// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// The populations that make up the population group, one for each type of population appropriate for the measure.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MeasureReportGroupPopulation>))]
  public class MeasureReportGroupPopulation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The type of the population.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The number of members of the population.
    /// </summary>
    public int? Count { get; set; }
    /// <summary>
    /// This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
    /// </summary>
    public Reference SubjectResults { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Count != null)
      {
        writer.WriteNumber("count", (int)Count!);
      }

      if (SubjectResults != null)
      {
        writer.WritePropertyName("subjectResults");
        SubjectResults.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "count":
          Count = reader.GetInt32();
          break;

        case "subjectResults":
          SubjectResults = new fhirCsR5.Models.Reference();
          SubjectResults.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A stratifier component value.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MeasureReportGroupStratifierStratumComponent>))]
  public class MeasureReportGroupStratifierStratumComponent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The code for the stratum component value.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The stratum component value.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The stratum component value.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// The stratum component value.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The stratum component value.
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The stratum component value.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR5.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR5.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The populations that make up the stratum, one for each type of population appropriate to the measure.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MeasureReportGroupStratifierStratumPopulation>))]
  public class MeasureReportGroupStratifierStratumPopulation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The type of the population.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The number of members of the population in this stratum.
    /// </summary>
    public int? Count { get; set; }
    /// <summary>
    /// This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
    /// </summary>
    public Reference SubjectResults { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Count != null)
      {
        writer.WriteNumber("count", (int)Count!);
      }

      if (SubjectResults != null)
      {
        writer.WritePropertyName("subjectResults");
        SubjectResults.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "count":
          Count = reader.GetInt32();
          break;

        case "subjectResults":
          SubjectResults = new fhirCsR5.Models.Reference();
          SubjectResults.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MeasureReportGroupStratifierStratum>))]
  public class MeasureReportGroupStratifierStratum : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A stratifier component value.
    /// </summary>
    public List<MeasureReportGroupStratifierStratumComponent> Component { get; set; }
    /// <summary>
    /// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
    /// </summary>
    public Quantity MeasureScoreQuantity { get; set; }
    /// <summary>
    /// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
    /// </summary>
    public string MeasureScoreDateTime { get; set; }
    /// <summary>
    /// Extension container element for MeasureScoreDateTime
    /// </summary>
    public Element _MeasureScoreDateTime { get; set; }
    /// <summary>
    /// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
    /// </summary>
    public CodeableConcept MeasureScoreCodeableConcept { get; set; }
    /// <summary>
    /// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
    /// </summary>
    public Period MeasureScorePeriod { get; set; }
    /// <summary>
    /// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
    /// </summary>
    public Range MeasureScoreRange { get; set; }
    /// <summary>
    /// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
    /// </summary>
    public Duration MeasureScoreDuration { get; set; }
    /// <summary>
    /// The populations that make up the stratum, one for each type of population appropriate to the measure.
    /// </summary>
    public List<MeasureReportGroupStratifierStratumPopulation> Population { get; set; }
    /// <summary>
    /// The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if ((Component != null) && (Component.Count != 0))
      {
        writer.WritePropertyName("component");
        writer.WriteStartArray();

        foreach (MeasureReportGroupStratifierStratumComponent valComponent in Component)
        {
          valComponent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Population != null) && (Population.Count != 0))
      {
        writer.WritePropertyName("population");
        writer.WriteStartArray();

        foreach (MeasureReportGroupStratifierStratumPopulation valPopulation in Population)
        {
          valPopulation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MeasureScoreQuantity != null)
      {
        writer.WritePropertyName("measureScoreQuantity");
        MeasureScoreQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasureScoreDateTime))
      {
        writer.WriteString("measureScoreDateTime", (string)MeasureScoreDateTime!);
      }

      if (_MeasureScoreDateTime != null)
      {
        writer.WritePropertyName("_measureScoreDateTime");
        _MeasureScoreDateTime.SerializeJson(writer, options);
      }

      if (MeasureScoreCodeableConcept != null)
      {
        writer.WritePropertyName("measureScoreCodeableConcept");
        MeasureScoreCodeableConcept.SerializeJson(writer, options);
      }

      if (MeasureScorePeriod != null)
      {
        writer.WritePropertyName("measureScorePeriod");
        MeasureScorePeriod.SerializeJson(writer, options);
      }

      if (MeasureScoreRange != null)
      {
        writer.WritePropertyName("measureScoreRange");
        MeasureScoreRange.SerializeJson(writer, options);
      }

      if (MeasureScoreDuration != null)
      {
        writer.WritePropertyName("measureScoreDuration");
        MeasureScoreDuration.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "component":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Component = new List<MeasureReportGroupStratifierStratumComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MeasureReportGroupStratifierStratumComponent objComponent = new fhirCsR5.Models.MeasureReportGroupStratifierStratumComponent();
            objComponent.DeserializeJson(ref reader, options);
            Component.Add(objComponent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Component.Count == 0)
          {
            Component = null;
          }

          break;

        case "measureScoreQuantity":
          MeasureScoreQuantity = new fhirCsR5.Models.Quantity();
          MeasureScoreQuantity.DeserializeJson(ref reader, options);
          break;

        case "measureScoreDateTime":
          MeasureScoreDateTime = reader.GetString();
          break;

        case "_measureScoreDateTime":
          _MeasureScoreDateTime = new fhirCsR5.Models.Element();
          _MeasureScoreDateTime.DeserializeJson(ref reader, options);
          break;

        case "measureScoreCodeableConcept":
          MeasureScoreCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          MeasureScoreCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "measureScorePeriod":
          MeasureScorePeriod = new fhirCsR5.Models.Period();
          MeasureScorePeriod.DeserializeJson(ref reader, options);
          break;

        case "measureScoreRange":
          MeasureScoreRange = new fhirCsR5.Models.Range();
          MeasureScoreRange.DeserializeJson(ref reader, options);
          break;

        case "measureScoreDuration":
          MeasureScoreDuration = new fhirCsR5.Models.Duration();
          MeasureScoreDuration.DeserializeJson(ref reader, options);
          break;

        case "population":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Population = new List<MeasureReportGroupStratifierStratumPopulation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MeasureReportGroupStratifierStratumPopulation objPopulation = new fhirCsR5.Models.MeasureReportGroupStratifierStratumPopulation();
            objPopulation.DeserializeJson(ref reader, options);
            Population.Add(objPopulation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Population.Count == 0)
          {
            Population = null;
          }

          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR5.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR5.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MeasureReportGroupStratifier>))]
  public class MeasureReportGroupStratifier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The meaning of this stratifier, as defined in the measure definition.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
    /// </summary>
    public List<MeasureReportGroupStratifierStratum> Stratum { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Stratum != null) && (Stratum.Count != 0))
      {
        writer.WritePropertyName("stratum");
        writer.WriteStartArray();

        foreach (MeasureReportGroupStratifierStratum valStratum in Stratum)
        {
          valStratum.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCode = new fhirCsR5.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "stratum":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Stratum = new List<MeasureReportGroupStratifierStratum>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MeasureReportGroupStratifierStratum objStratum = new fhirCsR5.Models.MeasureReportGroupStratifierStratum();
            objStratum.DeserializeJson(ref reader, options);
            Stratum.Add(objStratum);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Stratum.Count == 0)
          {
            Stratum = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The results of the calculation, one for each population group in the measure.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MeasureReportGroup>))]
  public class MeasureReportGroup : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The meaning of the population group as defined in the measure definition.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
    /// </summary>
    public Quantity MeasureScoreQuantity { get; set; }
    /// <summary>
    /// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
    /// </summary>
    public string MeasureScoreDateTime { get; set; }
    /// <summary>
    /// Extension container element for MeasureScoreDateTime
    /// </summary>
    public Element _MeasureScoreDateTime { get; set; }
    /// <summary>
    /// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
    /// </summary>
    public CodeableConcept MeasureScoreCodeableConcept { get; set; }
    /// <summary>
    /// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
    /// </summary>
    public Period MeasureScorePeriod { get; set; }
    /// <summary>
    /// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
    /// </summary>
    public Range MeasureScoreRange { get; set; }
    /// <summary>
    /// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
    /// </summary>
    public Duration MeasureScoreDuration { get; set; }
    /// <summary>
    /// The populations that make up the population group, one for each type of population appropriate for the measure.
    /// </summary>
    public List<MeasureReportGroupPopulation> Population { get; set; }
    /// <summary>
    /// When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
    /// </summary>
    public List<MeasureReportGroupStratifier> Stratifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((Population != null) && (Population.Count != 0))
      {
        writer.WritePropertyName("population");
        writer.WriteStartArray();

        foreach (MeasureReportGroupPopulation valPopulation in Population)
        {
          valPopulation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MeasureScoreQuantity != null)
      {
        writer.WritePropertyName("measureScoreQuantity");
        MeasureScoreQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasureScoreDateTime))
      {
        writer.WriteString("measureScoreDateTime", (string)MeasureScoreDateTime!);
      }

      if (_MeasureScoreDateTime != null)
      {
        writer.WritePropertyName("_measureScoreDateTime");
        _MeasureScoreDateTime.SerializeJson(writer, options);
      }

      if (MeasureScoreCodeableConcept != null)
      {
        writer.WritePropertyName("measureScoreCodeableConcept");
        MeasureScoreCodeableConcept.SerializeJson(writer, options);
      }

      if (MeasureScorePeriod != null)
      {
        writer.WritePropertyName("measureScorePeriod");
        MeasureScorePeriod.SerializeJson(writer, options);
      }

      if (MeasureScoreRange != null)
      {
        writer.WritePropertyName("measureScoreRange");
        MeasureScoreRange.SerializeJson(writer, options);
      }

      if (MeasureScoreDuration != null)
      {
        writer.WritePropertyName("measureScoreDuration");
        MeasureScoreDuration.SerializeJson(writer, options);
      }

      if ((Stratifier != null) && (Stratifier.Count != 0))
      {
        writer.WritePropertyName("stratifier");
        writer.WriteStartArray();

        foreach (MeasureReportGroupStratifier valStratifier in Stratifier)
        {
          valStratifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "measureScoreQuantity":
          MeasureScoreQuantity = new fhirCsR5.Models.Quantity();
          MeasureScoreQuantity.DeserializeJson(ref reader, options);
          break;

        case "measureScoreDateTime":
          MeasureScoreDateTime = reader.GetString();
          break;

        case "_measureScoreDateTime":
          _MeasureScoreDateTime = new fhirCsR5.Models.Element();
          _MeasureScoreDateTime.DeserializeJson(ref reader, options);
          break;

        case "measureScoreCodeableConcept":
          MeasureScoreCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          MeasureScoreCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "measureScorePeriod":
          MeasureScorePeriod = new fhirCsR5.Models.Period();
          MeasureScorePeriod.DeserializeJson(ref reader, options);
          break;

        case "measureScoreRange":
          MeasureScoreRange = new fhirCsR5.Models.Range();
          MeasureScoreRange.DeserializeJson(ref reader, options);
          break;

        case "measureScoreDuration":
          MeasureScoreDuration = new fhirCsR5.Models.Duration();
          MeasureScoreDuration.DeserializeJson(ref reader, options);
          break;

        case "population":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Population = new List<MeasureReportGroupPopulation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MeasureReportGroupPopulation objPopulation = new fhirCsR5.Models.MeasureReportGroupPopulation();
            objPopulation.DeserializeJson(ref reader, options);
            Population.Add(objPopulation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Population.Count == 0)
          {
            Population = null;
          }

          break;

        case "stratifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Stratifier = new List<MeasureReportGroupStratifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MeasureReportGroupStratifier objStratifier = new fhirCsR5.Models.MeasureReportGroupStratifier();
            objStratifier.DeserializeJson(ref reader, options);
            Stratifier.Add(objStratifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Stratifier.Count == 0)
          {
            Stratifier = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MeasureReport>))]
  public class MeasureReport : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MeasureReport";
    /// <summary>
    /// This element only applies to Data-collection reports used to communicate the data-of-interest for a measure
    /// </summary>
    public string DataUpdateType { get; set; }
    /// <summary>
    /// Extension container element for DataUpdateType
    /// </summary>
    public Element _DataUpdateType { get; set; }
    /// <summary>
    /// The date this measure report was generated.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// A reference to a Bundle containing the Resources that were used in the calculation of this measure.
    /// </summary>
    public List<Reference> EvaluatedResource { get; set; }
    /// <summary>
    /// The results of the calculation, one for each population group in the measure.
    /// </summary>
    public List<MeasureReportGroup> Group { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.
    /// </summary>
    public CodeableConcept ImprovementNotation { get; set; }
    /// <summary>
    /// A reference to the Measure that was calculated to produce this report.
    /// </summary>
    public string Measure { get; set; }
    /// <summary>
    /// Extension container element for Measure
    /// </summary>
    public Element _Measure { get; set; }
    /// <summary>
    /// The reporting period for which the report was calculated.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// The individual, location, or organization that is reporting the data.
    /// </summary>
    public Reference Reporter { get; set; }
    /// <summary>
    /// A reference to the vendor who queried the data, calculated results and/or generated the report. The ‘reporting vendor’ is intended to represent the submitting entity when it is not the same as the reporting entity. This extension is used when the Receiver is interested in getting vendor information in the report.
    /// </summary>
    public Reference ReportingVendor { get; set; }
    /// <summary>
    /// Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. It is expected to be the same as the scoring element on the referenced Measure.
    /// </summary>
    public CodeableConcept Scoring { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Optional subject identifying the individual or individuals the report is for.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DataUpdateType))
      {
        writer.WriteString("dataUpdateType", (string)DataUpdateType!);
      }

      if (_DataUpdateType != null)
      {
        writer.WritePropertyName("_dataUpdateType");
        _DataUpdateType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Measure))
      {
        writer.WriteString("measure", (string)Measure!);
      }

      if (_Measure != null)
      {
        writer.WritePropertyName("_measure");
        _Measure.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Reporter != null)
      {
        writer.WritePropertyName("reporter");
        Reporter.SerializeJson(writer, options);
      }

      if (ReportingVendor != null)
      {
        writer.WritePropertyName("reportingVendor");
        ReportingVendor.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (Scoring != null)
      {
        writer.WritePropertyName("scoring");
        Scoring.SerializeJson(writer, options);
      }

      if (ImprovementNotation != null)
      {
        writer.WritePropertyName("improvementNotation");
        ImprovementNotation.SerializeJson(writer, options);
      }

      if ((Group != null) && (Group.Count != 0))
      {
        writer.WritePropertyName("group");
        writer.WriteStartArray();

        foreach (MeasureReportGroup valGroup in Group)
        {
          valGroup.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((EvaluatedResource != null) && (EvaluatedResource.Count != 0))
      {
        writer.WritePropertyName("evaluatedResource");
        writer.WriteStartArray();

        foreach (Reference valEvaluatedResource in EvaluatedResource)
        {
          valEvaluatedResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dataUpdateType":
          DataUpdateType = reader.GetString();
          break;

        case "_dataUpdateType":
          _DataUpdateType = new fhirCsR5.Models.Element();
          _DataUpdateType.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "evaluatedResource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          EvaluatedResource = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objEvaluatedResource = new fhirCsR5.Models.Reference();
            objEvaluatedResource.DeserializeJson(ref reader, options);
            EvaluatedResource.Add(objEvaluatedResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (EvaluatedResource.Count == 0)
          {
            EvaluatedResource = null;
          }

          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Group = new List<MeasureReportGroup>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MeasureReportGroup objGroup = new fhirCsR5.Models.MeasureReportGroup();
            objGroup.DeserializeJson(ref reader, options);
            Group.Add(objGroup);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Group.Count == 0)
          {
            Group = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "improvementNotation":
          ImprovementNotation = new fhirCsR5.Models.CodeableConcept();
          ImprovementNotation.DeserializeJson(ref reader, options);
          break;

        case "measure":
          Measure = reader.GetString();
          break;

        case "_measure":
          _Measure = new fhirCsR5.Models.Element();
          _Measure.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR5.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "reporter":
          Reporter = new fhirCsR5.Models.Reference();
          Reporter.DeserializeJson(ref reader, options);
          break;

        case "reportingVendor":
          ReportingVendor = new fhirCsR5.Models.Reference();
          ReportingVendor.DeserializeJson(ref reader, options);
          break;

        case "scoring":
          Scoring = new fhirCsR5.Models.CodeableConcept();
          Scoring.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MeasureReport.dataUpdateType field
  /// </summary>
  public static class MeasureReportDataUpdateTypeCodes {
    public const string INCREMENTAL = "incremental";
    public const string SNAPSHOT = "snapshot";
  }
  /// <summary>
  /// Code Values for the MeasureReport.status field
  /// </summary>
  public static class MeasureReportStatusCodes {
    public const string COMPLETE = "complete";
    public const string PENDING = "pending";
    public const string ERROR = "error";
  }
  /// <summary>
  /// Code Values for the MeasureReport.type field
  /// </summary>
  public static class MeasureReportTypeCodes {
    public const string INDIVIDUAL = "individual";
    public const string SUBJECT_LIST = "subject-list";
    public const string SUMMARY = "summary";
    public const string DATA_COLLECTION = "data-collection";
  }
}
