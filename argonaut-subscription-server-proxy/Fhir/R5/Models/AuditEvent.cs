// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Logical network location for application activity, if the activity has a network location.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventAgentNetwork>))]
  public class AuditEventAgentNetwork : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This could be a device id, IP address or some other identifier associated with a device.
    /// </summary>
    public string Address { get; set; }
    /// <summary>
    /// Extension container element for Address
    /// </summary>
    public Element _Address { get; set; }
    /// <summary>
    /// An identifier for the type of network access point that originated the audit event.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Address))
      {
        writer.WriteString("address", (string)Address!);
      }

      if (_Address != null)
      {
        writer.WritePropertyName("_address");
        _Address.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          Address = reader.GetString();
          break;

        case "_address":
          _Address = new fhirCsR5.Models.Element();
          _Address.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
  /// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventAgent>))]
  public class AuditEventAgent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
    /// </summary>
    public string AltId { get; set; }
    /// <summary>
    /// Extension container element for AltId
    /// </summary>
    public Element _AltId { get; set; }
    /// <summary>
    /// Where the event occurred.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Type of media involved. Used when the event is about exporting/importing onto media.
    /// </summary>
    public Coding Media { get; set; }
    /// <summary>
    /// Human-meaningful name for the agent.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Logical network location for application activity, if the activity has a network location.
    /// </summary>
    public AuditEventAgentNetwork Network { get; set; }
    /// <summary>
    /// For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
    /// </summary>
    public List<string> Policy { get; set; }
    /// <summary>
    /// Extension container element for Policy
    /// </summary>
    public List<Element> _Policy { get; set; }
    /// <summary>
    /// Use AuditEvent.agent.purposeOfUse when you know that is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
    /// </summary>
    public List<CodeableConcept> PurposeOfUse { get; set; }
    /// <summary>
    /// There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
    /// </summary>
    public bool Requestor { get; set; }
    /// <summary>
    /// Should be all the relevant roles (Functional and Structural) inclusive of the value in .agent.type.
    /// </summary>
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// The most relevant role code for how the agent participated in the activity.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Where a User ID is available it will go into who.identifier.
    /// </summary>
    public Reference Who { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Role != null) && (Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();

        foreach (CodeableConcept valRole in Role)
        {
          valRole.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Who != null)
      {
        writer.WritePropertyName("who");
        Who.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AltId))
      {
        writer.WriteString("altId", (string)AltId!);
      }

      if (_AltId != null)
      {
        writer.WritePropertyName("_altId");
        _AltId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      writer.WriteBoolean("requestor", Requestor);

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Policy != null) && (Policy.Count != 0))
      {
        writer.WritePropertyName("policy");
        writer.WriteStartArray();

        foreach (string valPolicy in Policy)
        {
          writer.WriteStringValue(valPolicy);
        }

        writer.WriteEndArray();
      }

      if ((_Policy != null) && (_Policy.Count != 0))
      {
        writer.WritePropertyName("_policy");
        writer.WriteStartArray();

        foreach (Element val_Policy in _Policy)
        {
          val_Policy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Media != null)
      {
        writer.WritePropertyName("media");
        Media.SerializeJson(writer, options);
      }

      if (Network != null)
      {
        writer.WritePropertyName("network");
        Network.SerializeJson(writer, options);
      }

      if ((PurposeOfUse != null) && (PurposeOfUse.Count != 0))
      {
        writer.WritePropertyName("purposeOfUse");
        writer.WriteStartArray();

        foreach (CodeableConcept valPurposeOfUse in PurposeOfUse)
        {
          valPurposeOfUse.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "altId":
          AltId = reader.GetString();
          break;

        case "_altId":
          _AltId = new fhirCsR5.Models.Element();
          _AltId.DeserializeJson(ref reader, options);
          break;

        case "location":
          Location = new fhirCsR5.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "media":
          Media = new fhirCsR5.Models.Coding();
          Media.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "network":
          Network = new fhirCsR5.Models.AuditEventAgentNetwork();
          Network.DeserializeJson(ref reader, options);
          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Policy = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Policy.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Policy.Count == 0)
          {
            Policy = null;
          }

          break;

        case "_policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Policy = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Policy = new fhirCsR5.Models.Element();
            obj_Policy.DeserializeJson(ref reader, options);
            _Policy.Add(obj_Policy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Policy.Count == 0)
          {
            _Policy = null;
          }

          break;

        case "purposeOfUse":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PurposeOfUse = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objPurposeOfUse = new fhirCsR5.Models.CodeableConcept();
            objPurposeOfUse.DeserializeJson(ref reader, options);
            PurposeOfUse.Add(objPurposeOfUse);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PurposeOfUse.Count == 0)
          {
            PurposeOfUse = null;
          }

          break;

        case "requestor":
          Requestor = reader.GetBoolean();
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objRole = new fhirCsR5.Models.CodeableConcept();
            objRole.DeserializeJson(ref reader, options);
            Role.Add(objRole);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Role.Count == 0)
          {
            Role = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "who":
          Who = new fhirCsR5.Models.Reference();
          Who.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventSource>))]
  public class AuditEventSource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifier of the source where the event was detected.
    /// </summary>
    public Reference Observer { get; set; }
    /// <summary>
    /// Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
    /// </summary>
    public string Site { get; set; }
    /// <summary>
    /// Extension container element for Site
    /// </summary>
    public Element _Site { get; set; }
    /// <summary>
    /// Code specifying the type of source where event originated.
    /// </summary>
    public List<Coding> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Site))
      {
        writer.WriteString("site", (string)Site!);
      }

      if (_Site != null)
      {
        writer.WritePropertyName("_site");
        _Site.SerializeJson(writer, options);
      }

      if (Observer != null)
      {
        writer.WritePropertyName("observer");
        Observer.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (Coding valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "observer":
          Observer = new fhirCsR5.Models.Reference();
          Observer.DeserializeJson(ref reader, options);
          break;

        case "site":
          Site = reader.GetString();
          break;

        case "_site":
          _Site = new fhirCsR5.Models.Element();
          _Site.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Coding objType = new fhirCsR5.Models.Coding();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Tagged value pairs for conveying additional information about the entity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventEntityDetail>))]
  public class AuditEventEntityDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The type of extra detail provided in the value.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// The value can be string when known to be a string, else base64 encoding should be used to protect binary or undefined content.  The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The value can be string when known to be a string, else base64 encoding should be used to protect binary or undefined content.  The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
    /// </summary>
    public byte[] ValueBase64Binary { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueBase64Binary != null)
      {
        writer.WriteString("valueBase64Binary", System.Convert.ToBase64String(ValueBase64Binary));
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR5.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          ValueBase64Binary = System.Convert.FromBase64String(reader.GetString());
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventEntity>))]
  public class AuditEventEntity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Tagged value pairs for conveying additional information about the entity.
    /// </summary>
    public List<AuditEventEntityDetail> Detail { get; set; }
    /// <summary>
    /// This can be used to provide an audit trail for data, over time, as it passes through the system.
    /// </summary>
    public Coding Lifecycle { get; set; }
    /// <summary>
    /// This field may be used in a query/report to identify audit events for a specific person.  For example, where multiple synonymous entity identifiers (patient number, medical record number, encounter number, etc.) have been used.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example, if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
    /// </summary>
    public byte[] Query { get; set; }
    /// <summary>
    /// Code representing the role the entity played in the event being audited.
    /// </summary>
    public Coding Role { get; set; }
    /// <summary>
    /// Copied from entity meta security tags.
    /// </summary>
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// This value is distinct from the user's role or any user relationship to the entity.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Identifies a specific instance of the entity. The reference should be version specific.
    /// </summary>
    public Reference What { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (What != null)
      {
        writer.WritePropertyName("what");
        What.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Lifecycle != null)
      {
        writer.WritePropertyName("lifecycle");
        Lifecycle.SerializeJson(writer, options);
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (Coding valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Query != null)
      {
        writer.WriteString("query", System.Convert.ToBase64String(Query));
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (AuditEventEntityDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<AuditEventEntityDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AuditEventEntityDetail objDetail = new fhirCsR5.Models.AuditEventEntityDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "lifecycle":
          Lifecycle = new fhirCsR5.Models.Coding();
          Lifecycle.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "query":
          Query = System.Convert.FromBase64String(reader.GetString());
          break;

        case "role":
          Role = new fhirCsR5.Models.Coding();
          Role.DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Coding objSecurityLabel = new fhirCsR5.Models.Coding();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        case "what":
          What = new fhirCsR5.Models.Reference();
          What.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEvent>))]
  public class AuditEvent : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "AuditEvent";
    /// <summary>
    /// Indicator for type of action performed during the event that generated the audit.
    /// </summary>
    public string Action { get; set; }
    /// <summary>
    /// Extension container element for Action
    /// </summary>
    public Element _Action { get; set; }
    /// <summary>
    /// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
    /// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
    /// </summary>
    public List<AuditEventAgent> Agent { get; set; }
    /// <summary>
    /// Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
    /// </summary>
    public List<AuditEventEntity> Entity { get; set; }
    /// <summary>
    /// In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
    /// </summary>
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Use AuditEvent.agent.purposeOfUse when you know that it is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
    /// </summary>
    public List<CodeableConcept> PurposeOfEvent { get; set; }
    /// <summary>
    /// In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
    /// </summary>
    public string Recorded { get; set; }
    /// <summary>
    /// Extension container element for Recorded
    /// </summary>
    public Element _Recorded { get; set; }
    /// <summary>
    /// ATNA will map this to the SYSLOG PRI element.
    /// </summary>
    public string Severity { get; set; }
    /// <summary>
    /// Extension container element for Severity
    /// </summary>
    public Element _Severity { get; set; }
    /// <summary>
    /// Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
    /// </summary>
    public AuditEventSource Source { get; set; }
    /// <summary>
    /// Identifier for the category of event.
    /// </summary>
    public List<Coding> Subtype { get; set; }
    /// <summary>
    /// Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Subtype != null) && (Subtype.Count != 0))
      {
        writer.WritePropertyName("subtype");
        writer.WriteStartArray();

        foreach (Coding valSubtype in Subtype)
        {
          valSubtype.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Action))
      {
        writer.WriteString("action", (string)Action!);
      }

      if (_Action != null)
      {
        writer.WritePropertyName("_action");
        _Action.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Severity))
      {
        writer.WriteString("severity", (string)Severity!);
      }

      if (_Severity != null)
      {
        writer.WritePropertyName("_severity");
        _Severity.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Recorded))
      {
        writer.WriteString("recorded", (string)Recorded!);
      }

      if (_Recorded != null)
      {
        writer.WritePropertyName("_recorded");
        _Recorded.SerializeJson(writer, options);
      }

      if (Outcome != null)
      {
        writer.WritePropertyName("outcome");
        Outcome.SerializeJson(writer, options);
      }

      if ((PurposeOfEvent != null) && (PurposeOfEvent.Count != 0))
      {
        writer.WritePropertyName("purposeOfEvent");
        writer.WriteStartArray();

        foreach (CodeableConcept valPurposeOfEvent in PurposeOfEvent)
        {
          valPurposeOfEvent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if ((Agent != null) && (Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();

        foreach (AuditEventAgent valAgent in Agent)
        {
          valAgent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if ((Entity != null) && (Entity.Count != 0))
      {
        writer.WritePropertyName("entity");
        writer.WriteStartArray();

        foreach (AuditEventEntity valEntity in Entity)
        {
          valEntity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          Action = reader.GetString();
          break;

        case "_action":
          _Action = new fhirCsR5.Models.Element();
          _Action.DeserializeJson(ref reader, options);
          break;

        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Agent = new List<AuditEventAgent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AuditEventAgent objAgent = new fhirCsR5.Models.AuditEventAgent();
            objAgent.DeserializeJson(ref reader, options);
            Agent.Add(objAgent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Agent.Count == 0)
          {
            Agent = null;
          }

          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "encounter":
          Encounter = new fhirCsR5.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "entity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Entity = new List<AuditEventEntity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AuditEventEntity objEntity = new fhirCsR5.Models.AuditEventEntity();
            objEntity.DeserializeJson(ref reader, options);
            Entity.Add(objEntity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Entity.Count == 0)
          {
            Entity = null;
          }

          break;

        case "outcome":
          Outcome = new fhirCsR5.Models.CodeableConcept();
          Outcome.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR5.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "purposeOfEvent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PurposeOfEvent = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objPurposeOfEvent = new fhirCsR5.Models.CodeableConcept();
            objPurposeOfEvent.DeserializeJson(ref reader, options);
            PurposeOfEvent.Add(objPurposeOfEvent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PurposeOfEvent.Count == 0)
          {
            PurposeOfEvent = null;
          }

          break;

        case "recorded":
          Recorded = reader.GetString();
          break;

        case "_recorded":
          _Recorded = new fhirCsR5.Models.Element();
          _Recorded.DeserializeJson(ref reader, options);
          break;

        case "severity":
          Severity = reader.GetString();
          break;

        case "_severity":
          _Severity = new fhirCsR5.Models.Element();
          _Severity.DeserializeJson(ref reader, options);
          break;

        case "source":
          Source = new fhirCsR5.Models.AuditEventSource();
          Source.DeserializeJson(ref reader, options);
          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subtype = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Coding objSubtype = new fhirCsR5.Models.Coding();
            objSubtype.DeserializeJson(ref reader, options);
            Subtype.Add(objSubtype);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subtype.Count == 0)
          {
            Subtype = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the AuditEvent.severity field
  /// </summary>
  public static class AuditEventSeverityCodes {
    public const string EMERGENCY = "emergency";
    public const string ALERT = "alert";
    public const string CRITICAL = "critical";
    public const string ERROR = "error";
    public const string WARNING = "warning";
    public const string NOTICE = "notice";
    public const string INFORMATIONAL = "informational";
    public const string DEBUG = "debug";
  }
}
