// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Used for example, to point to a substance, or to a device used to administer a medication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CatalogEntryRelatedEntry>))]
  public class CatalogEntryRelatedEntry : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The type of relationship to the related entry.
    /// </summary>
    public string Relationship { get; set; }
    /// <summary>
    /// Extension container element for Relationship
    /// </summary>
    public Element _Relationship { get; set; }
    /// <summary>
    /// The reference to the related entry.
    /// </summary>
    public Reference Target { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Relationship))
      {
        writer.WriteString("relationship", (string)Relationship!);
      }

      if (_Relationship != null)
      {
        writer.WritePropertyName("_relationship");
        _Relationship.SerializeJson(writer, options);
      }

      if (Target != null)
      {
        writer.WritePropertyName("target");
        Target.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relationship":
          Relationship = reader.GetString();
          break;

        case "_relationship":
          _Relationship = new fhirCsR5.Models.Element();
          _Relationship.DeserializeJson(ref reader, options);
          break;

        case "target":
          Target = new fhirCsR5.Models.Reference();
          Target.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CatalogEntry.relatedEntry.relationship field
  /// </summary>
  public static class CatalogEntryRelatedEntryRelationshipCodes {
    public const string TRIGGERS = "triggers";
    public const string IS_REPLACED_BY = "is-replaced-by";
    public const string EXCLUDES = "excludes";
    public const string INCLUDES = "includes";
  }
  /// <summary>
  /// Catalog entries are wrappers that contextualize items included in a catalog.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CatalogEntry>))]
  public class CatalogEntry : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "CatalogEntry";
    /// <summary>
    /// Billing code associated to the  item in the context of this  entry of the catalog.
    /// </summary>
    public List<CodeableConcept> BillingCode { get; set; }
    /// <summary>
    /// Billing summary attached to the  item in the context of this  entry of the catalog.
    /// </summary>
    public string BillingSummary { get; set; }
    /// <summary>
    /// Extension container element for BillingSummary
    /// </summary>
    public Element _BillingSummary { get; set; }
    /// <summary>
    /// Period of usability of the catalog entry.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Estimated duration of the orderable item of this  entry of the catalog.
    /// </summary>
    public Duration EstimatedDuration { get; set; }
    /// <summary>
    /// Business identifier uniquely assigned to the catalog entry.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Summary of limitations for the  item in the context of this  entry of the catalog.
    /// </summary>
    public string LimitationSummary { get; set; }
    /// <summary>
    /// Extension container element for LimitationSummary
    /// </summary>
    public Element _LimitationSummary { get; set; }
    /// <summary>
    /// The name of this catalog entry announces the item that is represented by the entry.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Notes and comments about this catalog entry.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Indicates whether or not the entry represents an item that is orderable.
    /// </summary>
    public bool Orderable { get; set; }
    /// <summary>
    /// The item (resource) that this entry of the catalog represents.
    /// </summary>
    public Reference ReferencedItem { get; set; }
    /// <summary>
    /// Regulatory summary for the  item in the context of this  entry of the catalog.
    /// </summary>
    public string RegulatorySummary { get; set; }
    /// <summary>
    /// Extension container element for RegulatorySummary
    /// </summary>
    public Element _RegulatorySummary { get; set; }
    /// <summary>
    /// Used for example, to point to a substance, or to a device used to administer a medication.
    /// </summary>
    public List<CatalogEntryRelatedEntry> RelatedEntry { get; set; }
    /// <summary>
    /// Schedule summary for the  item in the context of this  entry of the catalog.
    /// </summary>
    public string ScheduleSummary { get; set; }
    /// <summary>
    /// Extension container element for ScheduleSummary
    /// </summary>
    public Element _ScheduleSummary { get; set; }
    /// <summary>
    /// Indicates whether this catalog entry is open to public usage (active) or not (draft or retired).
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The type of resource that is represented by this catalog entry.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Last actor who recorded (created or updated) this catalog entry.
    /// </summary>
    public Reference UpdatedBy { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      writer.WriteBoolean("orderable", Orderable);

      if (ReferencedItem != null)
      {
        writer.WritePropertyName("referencedItem");
        ReferencedItem.SerializeJson(writer, options);
      }

      if ((RelatedEntry != null) && (RelatedEntry.Count != 0))
      {
        writer.WritePropertyName("relatedEntry");
        writer.WriteStartArray();

        foreach (CatalogEntryRelatedEntry valRelatedEntry in RelatedEntry)
        {
          valRelatedEntry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (UpdatedBy != null)
      {
        writer.WritePropertyName("updatedBy");
        UpdatedBy.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (EstimatedDuration != null)
      {
        writer.WritePropertyName("estimatedDuration");
        EstimatedDuration.SerializeJson(writer, options);
      }

      if ((BillingCode != null) && (BillingCode.Count != 0))
      {
        writer.WritePropertyName("billingCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valBillingCode in BillingCode)
        {
          valBillingCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(BillingSummary))
      {
        writer.WriteString("billingSummary", (string)BillingSummary!);
      }

      if (_BillingSummary != null)
      {
        writer.WritePropertyName("_billingSummary");
        _BillingSummary.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ScheduleSummary))
      {
        writer.WriteString("scheduleSummary", (string)ScheduleSummary!);
      }

      if (_ScheduleSummary != null)
      {
        writer.WritePropertyName("_scheduleSummary");
        _ScheduleSummary.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LimitationSummary))
      {
        writer.WriteString("limitationSummary", (string)LimitationSummary!);
      }

      if (_LimitationSummary != null)
      {
        writer.WritePropertyName("_limitationSummary");
        _LimitationSummary.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RegulatorySummary))
      {
        writer.WriteString("regulatorySummary", (string)RegulatorySummary!);
      }

      if (_RegulatorySummary != null)
      {
        writer.WritePropertyName("_regulatorySummary");
        _RegulatorySummary.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "billingCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BillingCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objBillingCode = new fhirCsR5.Models.CodeableConcept();
            objBillingCode.DeserializeJson(ref reader, options);
            BillingCode.Add(objBillingCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BillingCode.Count == 0)
          {
            BillingCode = null;
          }

          break;

        case "billingSummary":
          BillingSummary = reader.GetString();
          break;

        case "_billingSummary":
          _BillingSummary = new fhirCsR5.Models.Element();
          _BillingSummary.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR5.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "estimatedDuration":
          EstimatedDuration = new fhirCsR5.Models.Duration();
          EstimatedDuration.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "limitationSummary":
          LimitationSummary = reader.GetString();
          break;

        case "_limitationSummary":
          _LimitationSummary = new fhirCsR5.Models.Element();
          _LimitationSummary.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "orderable":
          Orderable = reader.GetBoolean();
          break;

        case "referencedItem":
          ReferencedItem = new fhirCsR5.Models.Reference();
          ReferencedItem.DeserializeJson(ref reader, options);
          break;

        case "regulatorySummary":
          RegulatorySummary = reader.GetString();
          break;

        case "_regulatorySummary":
          _RegulatorySummary = new fhirCsR5.Models.Element();
          _RegulatorySummary.DeserializeJson(ref reader, options);
          break;

        case "relatedEntry":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedEntry = new List<CatalogEntryRelatedEntry>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CatalogEntryRelatedEntry objRelatedEntry = new fhirCsR5.Models.CatalogEntryRelatedEntry();
            objRelatedEntry.DeserializeJson(ref reader, options);
            RelatedEntry.Add(objRelatedEntry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedEntry.Count == 0)
          {
            RelatedEntry = null;
          }

          break;

        case "scheduleSummary":
          ScheduleSummary = reader.GetString();
          break;

        case "_scheduleSummary":
          _ScheduleSummary = new fhirCsR5.Models.Element();
          _ScheduleSummary.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "updatedBy":
          UpdatedBy = new fhirCsR5.Models.Reference();
          UpdatedBy.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CatalogEntry.status field
  /// </summary>
  public static class CatalogEntryStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Code Values for the CatalogEntry.type field
  /// </summary>
  public static class CatalogEntryTypeCodes {
    public const string ACTIVITYDEFINITION = "ActivityDefinition";
    public const string PLANDEFINITION = "PlanDefinition";
    public const string SPECIMENDEFINITION = "SpecimenDefinition";
    public const string OBSERVATIONDEFINITION = "ObservationDefinition";
    public const string DEVICEDEFINITION = "DeviceDefinition";
    public const string ORGANIZATION = "Organization";
    public const string PRACTITIONER = "Practitioner";
    public const string PRACTITIONERROLE = "PractitionerRole";
    public const string HEALTHCARESERVICE = "HealthcareService";
    public const string MEDICATIONKNOWLEDGE = "MedicationKnowledge";
    public const string MEDICATION = "Medication";
    public const string SUBSTANCE = "Substance";
    public const string LOCATION = "Location";
  }
}
