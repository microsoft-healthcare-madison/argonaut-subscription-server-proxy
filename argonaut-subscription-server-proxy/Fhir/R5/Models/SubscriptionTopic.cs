// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubscriptionTopicResourceTriggerQueryCriteria>))]
  public class SubscriptionTopicResourceTriggerQueryCriteria : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading "/".
    /// </summary>
    public string Current { get; set; }
    /// <summary>
    /// Extension container element for Current
    /// </summary>
    public Element _Current { get; set; }
    /// <summary>
    /// The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading "/".
    /// </summary>
    public string Previous { get; set; }
    /// <summary>
    /// Extension container element for Previous
    /// </summary>
    public Element _Previous { get; set; }
    /// <summary>
    /// If set to true, both current and previous criteria must evaluate true to  trigger a notification for this topic.  Otherwise a notification for this topic will be triggered if either one evaluates to true.
    /// </summary>
    public bool? RequireBoth { get; set; }
    /// <summary>
    /// What behavior a server will exhibit if the previous state of a resource does NOT exist (e.g., during a CREATE).
    /// </summary>
    public string ResultForCreate { get; set; }
    /// <summary>
    /// Extension container element for ResultForCreate
    /// </summary>
    public Element _ResultForCreate { get; set; }
    /// <summary>
    /// What behavior a server will exhibit if the current state of a resource does NOT exist (e.g., during a DELETE).
    /// </summary>
    public string ResultForDelete { get; set; }
    /// <summary>
    /// Extension container element for ResultForDelete
    /// </summary>
    public Element _ResultForDelete { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Previous))
      {
        writer.WriteString("previous", (string)Previous!);
      }

      if (_Previous != null)
      {
        writer.WritePropertyName("_previous");
        _Previous.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ResultForCreate))
      {
        writer.WriteString("resultForCreate", (string)ResultForCreate!);
      }

      if (_ResultForCreate != null)
      {
        writer.WritePropertyName("_resultForCreate");
        _ResultForCreate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Current))
      {
        writer.WriteString("current", (string)Current!);
      }

      if (_Current != null)
      {
        writer.WritePropertyName("_current");
        _Current.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ResultForDelete))
      {
        writer.WriteString("resultForDelete", (string)ResultForDelete!);
      }

      if (_ResultForDelete != null)
      {
        writer.WritePropertyName("_resultForDelete");
        _ResultForDelete.SerializeJson(writer, options);
      }

      if (RequireBoth != null)
      {
        writer.WriteBoolean("requireBoth", (bool)RequireBoth!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "current":
          Current = reader.GetString();
          break;

        case "_current":
          _Current = new fhirCsR5.Models.Element();
          _Current.DeserializeJson(ref reader, options);
          break;

        case "previous":
          Previous = reader.GetString();
          break;

        case "_previous":
          _Previous = new fhirCsR5.Models.Element();
          _Previous.DeserializeJson(ref reader, options);
          break;

        case "requireBoth":
          RequireBoth = reader.GetBoolean();
          break;

        case "resultForCreate":
          ResultForCreate = reader.GetString();
          break;

        case "_resultForCreate":
          _ResultForCreate = new fhirCsR5.Models.Element();
          _ResultForCreate.DeserializeJson(ref reader, options);
          break;

        case "resultForDelete":
          ResultForDelete = reader.GetString();
          break;

        case "_resultForDelete":
          _ResultForDelete = new fhirCsR5.Models.Element();
          _ResultForDelete.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the SubscriptionTopic.resourceTrigger.queryCriteria.resultForCreate field
  /// </summary>
  public static class SubscriptionTopicResourceTriggerQueryCriteriaResultForCreateCodes {
    public const string TEST_PASSES = "test-passes";
    public const string TEST_FAILS = "test-fails";
  }
  /// <summary>
  /// Code Values for the SubscriptionTopic.resourceTrigger.queryCriteria.resultForDelete field
  /// </summary>
  public static class SubscriptionTopicResourceTriggerQueryCriteriaResultForDeleteCodes {
    public const string TEST_PASSES = "test-passes";
    public const string TEST_FAILS = "test-fails";
  }
  /// <summary>
  /// List of properties by which Subscriptions on the subscription topic can be filtered.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubscriptionTopicResourceTriggerCanFilterBy>))]
  public class SubscriptionTopicResourceTriggerCanFilterBy : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Description of how this filter parameter is intended to be used.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Allowable operators to apply when determining matches (Search Modifiers).
    /// </summary>
    public List<string> SearchModifier { get; set; }
    /// <summary>
    /// Extension container element for SearchModifier
    /// </summary>
    public List<Element> _SearchModifier { get; set; }
    /// <summary>
    /// Chained parameters are allowed (like "patient.gender") - but can not use colons or modifiers.
    /// </summary>
    public string SearchParamName { get; set; }
    /// <summary>
    /// Extension container element for SearchParamName
    /// </summary>
    public Element _SearchParamName { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(SearchParamName))
      {
        writer.WriteString("searchParamName", (string)SearchParamName!);
      }

      if (_SearchParamName != null)
      {
        writer.WritePropertyName("_searchParamName");
        _SearchParamName.SerializeJson(writer, options);
      }

      if ((SearchModifier != null) && (SearchModifier.Count != 0))
      {
        writer.WritePropertyName("searchModifier");
        writer.WriteStartArray();

        foreach (string valSearchModifier in SearchModifier)
        {
          writer.WriteStringValue(valSearchModifier);
        }

        writer.WriteEndArray();
      }

      if ((_SearchModifier != null) && (_SearchModifier.Count != 0))
      {
        writer.WritePropertyName("_searchModifier");
        writer.WriteStartArray();

        foreach (Element val_SearchModifier in _SearchModifier)
        {
          val_SearchModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR5.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "searchModifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchModifier = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SearchModifier.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchModifier.Count == 0)
          {
            SearchModifier = null;
          }

          break;

        case "_searchModifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SearchModifier = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_SearchModifier = new fhirCsR5.Models.Element();
            obj_SearchModifier.DeserializeJson(ref reader, options);
            _SearchModifier.Add(obj_SearchModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SearchModifier.Count == 0)
          {
            _SearchModifier = null;
          }

          break;

        case "searchParamName":
          SearchParamName = reader.GetString();
          break;

        case "_searchParamName":
          _SearchParamName = new fhirCsR5.Models.Element();
          _SearchParamName.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the SubscriptionTopic.resourceTrigger.canFilterBy.searchModifier field
  /// </summary>
  public static class SubscriptionTopicResourceTriggerCanFilterBySearchModifierCodes {
    public const string EQUALS = "=";
    public const string EQ = "eq";
    public const string NE = "ne";
    public const string GT = "gt";
    public const string LT = "lt";
    public const string GE = "ge";
    public const string LE = "le";
    public const string SA = "sa";
    public const string EB = "eb";
    public const string AP = "ap";
    public const string ABOVE = "above";
    public const string BELOW = "below";
    public const string VAL_IN = "in";
    public const string NOT_IN = "not-in";
    public const string OF_TYPE = "of-type";
  }
  /// <summary>
  /// The criteria for including updates to a nominated resource in the subscription topic.  Thie criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubscriptionTopicResourceTrigger>))]
  public class SubscriptionTopicResourceTrigger : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// List of properties by which Subscriptions on the subscription topic can be filtered.
    /// </summary>
    public List<SubscriptionTopicResourceTriggerCanFilterBy> CanFilterBy { get; set; }
    /// <summary>
    /// Implementation of particular subscription topics might not use a computable definition and instead base their design on the definition.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// FHIRPath expression with %previous and %current vars.
    /// </summary>
    public List<string> FhirPathCriteria { get; set; }
    /// <summary>
    /// Extension container element for FhirPathCriteria
    /// </summary>
    public List<Element> _FhirPathCriteria { get; set; }
    /// <summary>
    /// The REST interaction based rules that the server should use to determine when to trigger a notification for this topic.
    /// </summary>
    public List<string> MethodCriteria { get; set; }
    /// <summary>
    /// Extension container element for MethodCriteria
    /// </summary>
    public List<Element> _MethodCriteria { get; set; }
    /// <summary>
    /// The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
    /// </summary>
    public SubscriptionTopicResourceTriggerQueryCriteria QueryCriteria { get; set; }
    /// <summary>
    /// URL of the Resource that is the type used in this trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see &lt;a href="elementdefinition-definitions.html#ElementDefinition.type.code"&gt;ElementDefinition.type.code&lt;/a&gt;.
    /// </summary>
    public string ResourceType { get; set; }
    /// <summary>
    /// Extension container element for ResourceType
    /// </summary>
    public Element _ResourceType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }

      if (_ResourceType != null)
      {
        writer.WritePropertyName("_resourceType");
        _ResourceType.SerializeJson(writer, options);
      }

      if ((MethodCriteria != null) && (MethodCriteria.Count != 0))
      {
        writer.WritePropertyName("methodCriteria");
        writer.WriteStartArray();

        foreach (string valMethodCriteria in MethodCriteria)
        {
          writer.WriteStringValue(valMethodCriteria);
        }

        writer.WriteEndArray();
      }

      if ((_MethodCriteria != null) && (_MethodCriteria.Count != 0))
      {
        writer.WritePropertyName("_methodCriteria");
        writer.WriteStartArray();

        foreach (Element val_MethodCriteria in _MethodCriteria)
        {
          val_MethodCriteria.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (QueryCriteria != null)
      {
        writer.WritePropertyName("queryCriteria");
        QueryCriteria.SerializeJson(writer, options);
      }

      if ((FhirPathCriteria != null) && (FhirPathCriteria.Count != 0))
      {
        writer.WritePropertyName("fhirPathCriteria");
        writer.WriteStartArray();

        foreach (string valFhirPathCriteria in FhirPathCriteria)
        {
          writer.WriteStringValue(valFhirPathCriteria);
        }

        writer.WriteEndArray();
      }

      if ((_FhirPathCriteria != null) && (_FhirPathCriteria.Count != 0))
      {
        writer.WritePropertyName("_fhirPathCriteria");
        writer.WriteStartArray();

        foreach (Element val_FhirPathCriteria in _FhirPathCriteria)
        {
          val_FhirPathCriteria.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CanFilterBy != null) && (CanFilterBy.Count != 0))
      {
        writer.WritePropertyName("canFilterBy");
        writer.WriteStartArray();

        foreach (SubscriptionTopicResourceTriggerCanFilterBy valCanFilterBy in CanFilterBy)
        {
          valCanFilterBy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "canFilterBy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CanFilterBy = new List<SubscriptionTopicResourceTriggerCanFilterBy>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubscriptionTopicResourceTriggerCanFilterBy objCanFilterBy = new fhirCsR5.Models.SubscriptionTopicResourceTriggerCanFilterBy();
            objCanFilterBy.DeserializeJson(ref reader, options);
            CanFilterBy.Add(objCanFilterBy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CanFilterBy.Count == 0)
          {
            CanFilterBy = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "fhirPathCriteria":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FhirPathCriteria = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            FhirPathCriteria.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FhirPathCriteria.Count == 0)
          {
            FhirPathCriteria = null;
          }

          break;

        case "_fhirPathCriteria":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _FhirPathCriteria = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_FhirPathCriteria = new fhirCsR5.Models.Element();
            obj_FhirPathCriteria.DeserializeJson(ref reader, options);
            _FhirPathCriteria.Add(obj_FhirPathCriteria);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_FhirPathCriteria.Count == 0)
          {
            _FhirPathCriteria = null;
          }

          break;

        case "methodCriteria":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MethodCriteria = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            MethodCriteria.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MethodCriteria.Count == 0)
          {
            MethodCriteria = null;
          }

          break;

        case "_methodCriteria":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _MethodCriteria = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_MethodCriteria = new fhirCsR5.Models.Element();
            obj_MethodCriteria.DeserializeJson(ref reader, options);
            _MethodCriteria.Add(obj_MethodCriteria);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_MethodCriteria.Count == 0)
          {
            _MethodCriteria = null;
          }

          break;

        case "queryCriteria":
          QueryCriteria = new fhirCsR5.Models.SubscriptionTopicResourceTriggerQueryCriteria();
          QueryCriteria.DeserializeJson(ref reader, options);
          break;

        case "resourceType":
          ResourceType = reader.GetString();
          break;

        case "_resourceType":
          _ResourceType = new fhirCsR5.Models.Element();
          _ResourceType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the SubscriptionTopic.resourceTrigger.methodCriteria field
  /// </summary>
  public static class SubscriptionTopicResourceTriggerMethodCriteriaCodes {
    public const string CREATE = "create";
    public const string UPDATE = "update";
    public const string DELETE = "delete";
  }
  /// <summary>
  /// Describes a stream of resource state changes identified by trigger criteria and annotated with labels useful to filter projections from this topic.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubscriptionTopic>))]
  public class SubscriptionTopic : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "SubscriptionTopic";
    /// <summary>
    /// The date may be more recent than the approval date because of minor changes / editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// For draft definitions, indicates the date of initial creation.  For active definitions, represents the date of activation.  For withdrawn definitions, indicates the date of withdrawal.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in whole or in part by this SubscriptionTopic.
    /// </summary>
    public List<string> DerivedFrom { get; set; }
    /// <summary>
    /// Extension container element for DerivedFrom
    /// </summary>
    public List<Element> _DerivedFrom { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the Topic was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The effective period for a SubscriptionTopic  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 would be published in 2015.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Allows filtering of SubscriptionTopic that are appropriate for use vs. not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A jurisdiction in which the Topic is intended to be used.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// If specified, this is usually after the approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the SubscriptionTopic.  May also allow for contact.
    /// </summary>
    public Reference Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the Topic.  Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this Topic.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// The criteria for including updates to a nominated resource in the subscription topic.  Thie criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression.
    /// </summary>
    public List<SubscriptionTopicResourceTrigger> ResourceTrigger { get; set; }
    /// <summary>
    /// A nominal state-transition diagram can be found in the [[definition.html#statemachine | Definition pattern]] documentation
    /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// A short, descriptive, user-friendly title for the SubscriptionTopic, for example, "admission".
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  This is the URI that will be used when making canonical references to this resource.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be multiple different instances of a SubscriptionTopic that have the same identifier but different versions.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if ((DerivedFrom != null) && (DerivedFrom.Count != 0))
      {
        writer.WritePropertyName("derivedFrom");
        writer.WriteStartArray();

        foreach (string valDerivedFrom in DerivedFrom)
        {
          writer.WriteStringValue(valDerivedFrom);
        }

        writer.WriteEndArray();
      }

      if ((_DerivedFrom != null) && (_DerivedFrom.Count != 0))
      {
        writer.WritePropertyName("_derivedFrom");
        writer.WriteStartArray();

        foreach (Element val_DerivedFrom in _DerivedFrom)
        {
          val_DerivedFrom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Publisher != null)
      {
        writer.WritePropertyName("publisher");
        Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((ResourceTrigger != null) && (ResourceTrigger.Count != 0))
      {
        writer.WritePropertyName("resourceTrigger");
        writer.WriteStartArray();

        foreach (SubscriptionTopicResourceTrigger valResourceTrigger in ResourceTrigger)
        {
          valResourceTrigger.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR5.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objContact = new fhirCsR5.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR5.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DerivedFrom = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DerivedFrom.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DerivedFrom.Count == 0)
          {
            DerivedFrom = null;
          }

          break;

        case "_derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _DerivedFrom = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_DerivedFrom = new fhirCsR5.Models.Element();
            obj_DerivedFrom.DeserializeJson(ref reader, options);
            _DerivedFrom.Add(obj_DerivedFrom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_DerivedFrom.Count == 0)
          {
            _DerivedFrom = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR5.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objJurisdiction = new fhirCsR5.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR5.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = new fhirCsR5.Models.Reference();
          Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR5.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "resourceTrigger":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ResourceTrigger = new List<SubscriptionTopicResourceTrigger>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubscriptionTopicResourceTrigger objResourceTrigger = new fhirCsR5.Models.SubscriptionTopicResourceTrigger();
            objResourceTrigger.DeserializeJson(ref reader, options);
            ResourceTrigger.Add(objResourceTrigger);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ResourceTrigger.Count == 0)
          {
            ResourceTrigger = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the SubscriptionTopic.status field
  /// </summary>
  public static class SubscriptionTopicStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
