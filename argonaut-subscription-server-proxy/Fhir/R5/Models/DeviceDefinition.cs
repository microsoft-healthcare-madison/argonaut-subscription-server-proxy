// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionUdiDeviceIdentifier>))]
  public class DeviceDefinitionUdiDeviceIdentifier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
    /// </summary>
    public string DeviceIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DeviceIdentifier
    /// </summary>
    public Element _DeviceIdentifier { get; set; }
    /// <summary>
    /// The organization that assigns the identifier algorithm.
    /// </summary>
    public string Issuer { get; set; }
    /// <summary>
    /// Extension container element for Issuer
    /// </summary>
    public Element _Issuer { get; set; }
    /// <summary>
    /// The jurisdiction to which the deviceIdentifier applies.
    /// </summary>
    public string Jurisdiction { get; set; }
    /// <summary>
    /// Extension container element for Jurisdiction
    /// </summary>
    public Element _Jurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(DeviceIdentifier))
      {
        writer.WriteString("deviceIdentifier", (string)DeviceIdentifier!);
      }

      if (_DeviceIdentifier != null)
      {
        writer.WritePropertyName("_deviceIdentifier");
        _DeviceIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issuer))
      {
        writer.WriteString("issuer", (string)Issuer!);
      }

      if (_Issuer != null)
      {
        writer.WritePropertyName("_issuer");
        _Issuer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Jurisdiction))
      {
        writer.WriteString("jurisdiction", (string)Jurisdiction!);
      }

      if (_Jurisdiction != null)
      {
        writer.WritePropertyName("_jurisdiction");
        _Jurisdiction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          DeviceIdentifier = reader.GetString();
          break;

        case "_deviceIdentifier":
          _DeviceIdentifier = new fhirCsR5.Models.Element();
          _DeviceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "issuer":
          Issuer = reader.GetString();
          break;

        case "_issuer":
          _Issuer = new fhirCsR5.Models.Element();
          _Issuer.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = reader.GetString();
          break;

        case "_jurisdiction":
          _Jurisdiction = new fhirCsR5.Models.Element();
          _Jurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The name or names of the device as given by the manufacturer.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionDeviceName>))]
  public class DeviceDefinitionDeviceName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The type of deviceName.
    /// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the DeviceDefinition.deviceName.type field
  /// </summary>
  public static class DeviceDefinitionDeviceNameTypeCodes {
    public const string UDI_LABEL_NAME = "udi-label-name";
    public const string USER_FRIENDLY_NAME = "user-friendly-name";
    public const string PATIENT_REPORTED_NAME = "patient-reported-name";
    public const string MANUFACTURER_NAME = "manufacturer-name";
    public const string MODEL_NAME = "model-name";
    public const string OTHER = "other";
  }
  /// <summary>
  /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionSpecialization>))]
  public class DeviceDefinitionSpecialization : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The standard that is used to operate and communicate.
    /// </summary>
    public string SystemType { get; set; }
    /// <summary>
    /// Extension container element for SystemType
    /// </summary>
    public Element _SystemType { get; set; }
    /// <summary>
    /// The version of the standard that is used to operate and communicate.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(SystemType))
      {
        writer.WriteString("systemType", (string)SystemType!);
      }

      if (_SystemType != null)
      {
        writer.WritePropertyName("_systemType");
        _SystemType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "systemType":
          SystemType = reader.GetString();
          break;

        case "_systemType":
          _SystemType = new fhirCsR5.Models.Element();
          _SystemType.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A device that is part (for example a component) of the present device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionHasPart>))]
  public class DeviceDefinitionHasPart : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Number of instances of the component device in the current device.
    /// </summary>
    public int? Count { get; set; }
    /// <summary>
    /// Reference to the device that is part of the current device.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (Count != null)
      {
        writer.WriteNumber("count", (int)Count!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "count":
          Count = reader.GetInt32();
          break;

        case "reference":
          Reference = new fhirCsR5.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An organization that distributes the packaged device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionPackagingDistributor>))]
  public class DeviceDefinitionPackagingDistributor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Distributor's human-readable name.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Distributor as an Organization resource.
    /// </summary>
    public List<Reference> OrganizationReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((OrganizationReference != null) && (OrganizationReference.Count != 0))
      {
        writer.WritePropertyName("organizationReference");
        writer.WriteStartArray();

        foreach (Reference valOrganizationReference in OrganizationReference)
        {
          valOrganizationReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "organizationReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OrganizationReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objOrganizationReference = new fhirCsR5.Models.Reference();
            objOrganizationReference.DeserializeJson(ref reader, options);
            OrganizationReference.Add(objOrganizationReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OrganizationReference.Count == 0)
          {
            OrganizationReference = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Unique Device Identifier (UDI) Barcode string on the packaging.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionPackagingUdiDeviceIdentifier>))]
  public class DeviceDefinitionPackagingUdiDeviceIdentifier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifier to be associated with every instance for issuer and jurisdiction.
    /// </summary>
    public string DeviceIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DeviceIdentifier
    /// </summary>
    public Element _DeviceIdentifier { get; set; }
    /// <summary>
    /// The organization that assigns the identifier algorithm.
    /// </summary>
    public string Issuer { get; set; }
    /// <summary>
    /// Extension container element for Issuer
    /// </summary>
    public Element _Issuer { get; set; }
    /// <summary>
    /// The jurisdiction to which the deviceIdentifier applies.
    /// </summary>
    public string Jurisdiction { get; set; }
    /// <summary>
    /// Extension container element for Jurisdiction
    /// </summary>
    public Element _Jurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(DeviceIdentifier))
      {
        writer.WriteString("deviceIdentifier", (string)DeviceIdentifier!);
      }

      if (_DeviceIdentifier != null)
      {
        writer.WritePropertyName("_deviceIdentifier");
        _DeviceIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issuer))
      {
        writer.WriteString("issuer", (string)Issuer!);
      }

      if (_Issuer != null)
      {
        writer.WritePropertyName("_issuer");
        _Issuer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Jurisdiction))
      {
        writer.WriteString("jurisdiction", (string)Jurisdiction!);
      }

      if (_Jurisdiction != null)
      {
        writer.WritePropertyName("_jurisdiction");
        _Jurisdiction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          DeviceIdentifier = reader.GetString();
          break;

        case "_deviceIdentifier":
          _DeviceIdentifier = new fhirCsR5.Models.Element();
          _DeviceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "issuer":
          Issuer = reader.GetString();
          break;

        case "_issuer":
          _Issuer = new fhirCsR5.Models.Element();
          _Issuer.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = reader.GetString();
          break;

        case "_jurisdiction":
          _Jurisdiction = new fhirCsR5.Models.Element();
          _Jurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about the packaging of the device, i.e. how the device is packaged.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionPackaging>))]
  public class DeviceDefinitionPackaging : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The number of items contained in the package (devices or sub-packages).
    /// </summary>
    public int? Count { get; set; }
    /// <summary>
    /// An organization that distributes the packaged device.
    /// </summary>
    public List<DeviceDefinitionPackagingDistributor> Distributor { get; set; }
    /// <summary>
    /// The business identifier of the packaged medication.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Allows packages within packages.
    /// </summary>
    public List<DeviceDefinitionPackaging> Packaging { get; set; }
    /// <summary>
    /// A code that defines the specific type of packaging.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string on the packaging.
    /// </summary>
    public List<DeviceDefinitionPackagingUdiDeviceIdentifier> UdiDeviceIdentifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Count != null)
      {
        writer.WriteNumber("count", (int)Count!);
      }

      if ((Distributor != null) && (Distributor.Count != 0))
      {
        writer.WritePropertyName("distributor");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackagingDistributor valDistributor in Distributor)
        {
          valDistributor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UdiDeviceIdentifier != null) && (UdiDeviceIdentifier.Count != 0))
      {
        writer.WritePropertyName("udiDeviceIdentifier");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackagingUdiDeviceIdentifier valUdiDeviceIdentifier in UdiDeviceIdentifier)
        {
          valUdiDeviceIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Packaging != null) && (Packaging.Count != 0))
      {
        writer.WritePropertyName("packaging");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackaging valPackaging in Packaging)
        {
          valPackaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "count":
          Count = reader.GetInt32();
          break;

        case "distributor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Distributor = new List<DeviceDefinitionPackagingDistributor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackagingDistributor objDistributor = new fhirCsR5.Models.DeviceDefinitionPackagingDistributor();
            objDistributor.DeserializeJson(ref reader, options);
            Distributor.Add(objDistributor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Distributor.Count == 0)
          {
            Distributor = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR5.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "packaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Packaging = new List<DeviceDefinitionPackaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackaging objPackaging = new fhirCsR5.Models.DeviceDefinitionPackaging();
            objPackaging.DeserializeJson(ref reader, options);
            Packaging.Add(objPackaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Packaging.Count == 0)
          {
            Packaging = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udiDeviceIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UdiDeviceIdentifier = new List<DeviceDefinitionPackagingUdiDeviceIdentifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackagingUdiDeviceIdentifier objUdiDeviceIdentifier = new fhirCsR5.Models.DeviceDefinitionPackagingUdiDeviceIdentifier();
            objUdiDeviceIdentifier.DeserializeJson(ref reader, options);
            UdiDeviceIdentifier.Add(objUdiDeviceIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UdiDeviceIdentifier.Count == 0)
          {
            UdiDeviceIdentifier = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The version of the device or software.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionVersion>))]
  public class DeviceDefinitionVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
    /// </summary>
    public Identifier Component { get; set; }
    /// <summary>
    /// The type of the device version, e.g. manufacturer, approved, internal.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The version text.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Component != null)
      {
        writer.WritePropertyName("component");
        Component.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "component":
          Component = new fhirCsR5.Models.Identifier();
          Component.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR5.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Additional capabilities that the device is defined or required to have e.g. "water resistant", "long life".
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionCapability>))]
  public class DeviceDefinitionCapability : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The actual capability of the device e.g. IP67.
    /// </summary>
    public List<CodeableConcept> Description { get; set; }
    /// <summary>
    /// The type of capability - whether it is a physical attribute, a customization needed. For exampl e "water ingress protection".
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Description != null) && (Description.Count != 0))
      {
        writer.WritePropertyName("description");
        writer.WriteStartArray();

        foreach (CodeableConcept valDescription in Description)
        {
          valDescription.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Description = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objDescription = new fhirCsR5.Models.CodeableConcept();
            objDescription.DeserializeJson(ref reader, options);
            Description.Add(objDescription);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Description.Count == 0)
          {
            Description = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionProperty>))]
  public class DeviceDefinitionProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Property value as a code, e.g., NTP4 (synced to NTP).
    /// </summary>
    public List<CodeableConcept> ValueCode { get; set; }
    /// <summary>
    /// Property value as a quantity.
    /// </summary>
    public List<Quantity> ValueQuantity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((ValueQuantity != null) && (ValueQuantity.Count != 0))
      {
        writer.WritePropertyName("valueQuantity");
        writer.WriteStartArray();

        foreach (Quantity valValueQuantity in ValueQuantity)
        {
          valValueQuantity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValueCode != null) && (ValueCode.Count != 0))
      {
        writer.WritePropertyName("valueCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valValueCode in ValueCode)
        {
          valValueCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objValueCode = new fhirCsR5.Models.CodeableConcept();
            objValueCode.DeserializeJson(ref reader, options);
            ValueCode.Add(objValueCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueCode.Count == 0)
          {
            ValueCode = null;
          }

          break;

        case "valueQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Quantity objValueQuantity = new fhirCsR5.Models.Quantity();
            objValueQuantity.DeserializeJson(ref reader, options);
            ValueQuantity.Add(objValueQuantity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueQuantity.Count == 0)
          {
            ValueQuantity = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A substance used to create the material(s) of which the device is made.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionMaterial>))]
  public class DeviceDefinitionMaterial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Whether the substance is a known or suspected allergen.
    /// </summary>
    public bool? AllergenicIndicator { get; set; }
    /// <summary>
    /// Indicates an alternative material of the device.
    /// </summary>
    public bool? Alternate { get; set; }
    /// <summary>
    /// A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.
    /// </summary>
    public CodeableConcept Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (Alternate != null)
      {
        writer.WriteBoolean("alternate", (bool)Alternate!);
      }

      if (AllergenicIndicator != null)
      {
        writer.WriteBoolean("allergenicIndicator", (bool)AllergenicIndicator!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allergenicIndicator":
          AllergenicIndicator = reader.GetBoolean();
          break;

        case "alternate":
          Alternate = reader.GetBoolean();
          break;

        case "substance":
          Substance = new fhirCsR5.Models.CodeableConcept();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The characteristics, operational status and capabilities of a medical-related component of a medical device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinition>))]
  public class DeviceDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "DeviceDefinition";
    /// <summary>
    /// Additional capabilities that the device is defined or required to have e.g. "water resistant", "long life".
    /// </summary>
    public List<DeviceDefinitionCapability> Capability { get; set; }
    /// <summary>
    /// used for troubleshooting etc.
    /// </summary>
    public List<ContactPoint> Contact { get; set; }
    /// <summary>
    /// The name or names of the device as given by the manufacturer.
    /// </summary>
    public List<DeviceDefinitionDeviceName> DeviceName { get; set; }
    /// <summary>
    /// A device that is part (for example a component) of the present device.
    /// </summary>
    public List<DeviceDefinitionHasPart> HasPart { get; set; }
    /// <summary>
    /// Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Language code for the human-readable text strings produced by the device (all supported).
    /// </summary>
    public List<CodeableConcept> LanguageCode { get; set; }
    /// <summary>
    /// A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
    /// </summary>
    public string ManufacturerString { get; set; }
    /// <summary>
    /// Extension container element for ManufacturerString
    /// </summary>
    public Element _ManufacturerString { get; set; }
    /// <summary>
    /// A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
    /// </summary>
    public Reference ManufacturerReference { get; set; }
    /// <summary>
    /// A substance used to create the material(s) of which the device is made.
    /// </summary>
    public List<DeviceDefinitionMaterial> Material { get; set; }
    /// <summary>
    /// The model number for the device for example as defined by the manufacturer or labeler, or other agency.
    /// </summary>
    public string ModelNumber { get; set; }
    /// <summary>
    /// Extension container element for ModelNumber
    /// </summary>
    public Element _ModelNumber { get; set; }
    /// <summary>
    /// Descriptive information, usage information or implantation information that is not captured in an existing element.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Access to on-line information about the device.
    /// </summary>
    public string OnlineInformation { get; set; }
    /// <summary>
    /// Extension container element for OnlineInformation
    /// </summary>
    public Element _OnlineInformation { get; set; }
    /// <summary>
    /// An organization that is responsible for the provision and ongoing maintenance of the device.
    /// </summary>
    public Reference Owner { get; set; }
    /// <summary>
    /// Information about the packaging of the device, i.e. how the device is packaged.
    /// </summary>
    public List<DeviceDefinitionPackaging> Packaging { get; set; }
    /// <summary>
    /// The parent device it can be part of.
    /// </summary>
    public Reference ParentDevice { get; set; }
    /// <summary>
    /// Physical characteristics to define or specify the product - for example dimensions, color etc. These can be defined by the manufacturer or labeler, or can be used to specify characteristics when ordering.
    /// </summary>
    public ProdCharacteristic PhysicalCharacteristics { get; set; }
    /// <summary>
    /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
    /// </summary>
    public List<DeviceDefinitionProperty> Property { get; set; }
    /// <summary>
    /// Safety characteristics of the device.
    /// </summary>
    public List<CodeableConcept> Safety { get; set; }
    /// <summary>
    /// Shelf Life and storage information.
    /// </summary>
    public List<ProductShelfLife> ShelfLifeStorage { get; set; }
    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
    /// </summary>
    public List<DeviceDefinitionSpecialization> Specialization { get; set; }
    /// <summary>
    /// What kind of device or device system this is.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
    /// </summary>
    public List<DeviceDefinitionUdiDeviceIdentifier> UdiDeviceIdentifier { get; set; }
    /// <summary>
    /// The version of the device or software.
    /// </summary>
    public List<DeviceDefinitionVersion> Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UdiDeviceIdentifier != null) && (UdiDeviceIdentifier.Count != 0))
      {
        writer.WritePropertyName("udiDeviceIdentifier");
        writer.WriteStartArray();

        foreach (DeviceDefinitionUdiDeviceIdentifier valUdiDeviceIdentifier in UdiDeviceIdentifier)
        {
          valUdiDeviceIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ManufacturerString))
      {
        writer.WriteString("manufacturerString", (string)ManufacturerString!);
      }

      if (_ManufacturerString != null)
      {
        writer.WritePropertyName("_manufacturerString");
        _ManufacturerString.SerializeJson(writer, options);
      }

      if (ManufacturerReference != null)
      {
        writer.WritePropertyName("manufacturerReference");
        ManufacturerReference.SerializeJson(writer, options);
      }

      if ((DeviceName != null) && (DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();

        foreach (DeviceDefinitionDeviceName valDeviceName in DeviceName)
        {
          valDeviceName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ModelNumber))
      {
        writer.WriteString("modelNumber", (string)ModelNumber!);
      }

      if (_ModelNumber != null)
      {
        writer.WritePropertyName("_modelNumber");
        _ModelNumber.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Specialization != null) && (Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();

        foreach (DeviceDefinitionSpecialization valSpecialization in Specialization)
        {
          valSpecialization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((HasPart != null) && (HasPart.Count != 0))
      {
        writer.WritePropertyName("hasPart");
        writer.WriteStartArray();

        foreach (DeviceDefinitionHasPart valHasPart in HasPart)
        {
          valHasPart.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Packaging != null) && (Packaging.Count != 0))
      {
        writer.WritePropertyName("packaging");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackaging valPackaging in Packaging)
        {
          valPackaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Version != null) && (Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();

        foreach (DeviceDefinitionVersion valVersion in Version)
        {
          valVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Safety != null) && (Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();

        foreach (CodeableConcept valSafety in Safety)
        {
          valSafety.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ShelfLifeStorage != null) && (ShelfLifeStorage.Count != 0))
      {
        writer.WritePropertyName("shelfLifeStorage");
        writer.WriteStartArray();

        foreach (ProductShelfLife valShelfLifeStorage in ShelfLifeStorage)
        {
          valShelfLifeStorage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PhysicalCharacteristics != null)
      {
        writer.WritePropertyName("physicalCharacteristics");
        PhysicalCharacteristics.SerializeJson(writer, options);
      }

      if ((LanguageCode != null) && (LanguageCode.Count != 0))
      {
        writer.WritePropertyName("languageCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valLanguageCode in LanguageCode)
        {
          valLanguageCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Capability != null) && (Capability.Count != 0))
      {
        writer.WritePropertyName("capability");
        writer.WriteStartArray();

        foreach (DeviceDefinitionCapability valCapability in Capability)
        {
          valCapability.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (DeviceDefinitionProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Owner != null)
      {
        writer.WritePropertyName("owner");
        Owner.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactPoint valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(OnlineInformation))
      {
        writer.WriteString("onlineInformation", (string)OnlineInformation!);
      }

      if (_OnlineInformation != null)
      {
        writer.WritePropertyName("_onlineInformation");
        _OnlineInformation.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ParentDevice != null)
      {
        writer.WritePropertyName("parentDevice");
        ParentDevice.SerializeJson(writer, options);
      }

      if ((Material != null) && (Material.Count != 0))
      {
        writer.WritePropertyName("material");
        writer.WriteStartArray();

        foreach (DeviceDefinitionMaterial valMaterial in Material)
        {
          valMaterial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Capability = new List<DeviceDefinitionCapability>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionCapability objCapability = new fhirCsR5.Models.DeviceDefinitionCapability();
            objCapability.DeserializeJson(ref reader, options);
            Capability.Add(objCapability);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Capability.Count == 0)
          {
            Capability = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactPoint objContact = new fhirCsR5.Models.ContactPoint();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DeviceName = new List<DeviceDefinitionDeviceName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionDeviceName objDeviceName = new fhirCsR5.Models.DeviceDefinitionDeviceName();
            objDeviceName.DeserializeJson(ref reader, options);
            DeviceName.Add(objDeviceName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DeviceName.Count == 0)
          {
            DeviceName = null;
          }

          break;

        case "hasPart":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          HasPart = new List<DeviceDefinitionHasPart>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionHasPart objHasPart = new fhirCsR5.Models.DeviceDefinitionHasPart();
            objHasPart.DeserializeJson(ref reader, options);
            HasPart.Add(objHasPart);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (HasPart.Count == 0)
          {
            HasPart = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "languageCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LanguageCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objLanguageCode = new fhirCsR5.Models.CodeableConcept();
            objLanguageCode.DeserializeJson(ref reader, options);
            LanguageCode.Add(objLanguageCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LanguageCode.Count == 0)
          {
            LanguageCode = null;
          }

          break;

        case "manufacturerString":
          ManufacturerString = reader.GetString();
          break;

        case "_manufacturerString":
          _ManufacturerString = new fhirCsR5.Models.Element();
          _ManufacturerString.DeserializeJson(ref reader, options);
          break;

        case "manufacturerReference":
          ManufacturerReference = new fhirCsR5.Models.Reference();
          ManufacturerReference.DeserializeJson(ref reader, options);
          break;

        case "material":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Material = new List<DeviceDefinitionMaterial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionMaterial objMaterial = new fhirCsR5.Models.DeviceDefinitionMaterial();
            objMaterial.DeserializeJson(ref reader, options);
            Material.Add(objMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Material.Count == 0)
          {
            Material = null;
          }

          break;

        case "modelNumber":
          ModelNumber = reader.GetString();
          break;

        case "_modelNumber":
          _ModelNumber = new fhirCsR5.Models.Element();
          _ModelNumber.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "onlineInformation":
          OnlineInformation = reader.GetString();
          break;

        case "_onlineInformation":
          _OnlineInformation = new fhirCsR5.Models.Element();
          _OnlineInformation.DeserializeJson(ref reader, options);
          break;

        case "owner":
          Owner = new fhirCsR5.Models.Reference();
          Owner.DeserializeJson(ref reader, options);
          break;

        case "packaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Packaging = new List<DeviceDefinitionPackaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackaging objPackaging = new fhirCsR5.Models.DeviceDefinitionPackaging();
            objPackaging.DeserializeJson(ref reader, options);
            Packaging.Add(objPackaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Packaging.Count == 0)
          {
            Packaging = null;
          }

          break;

        case "parentDevice":
          ParentDevice = new fhirCsR5.Models.Reference();
          ParentDevice.DeserializeJson(ref reader, options);
          break;

        case "physicalCharacteristics":
          PhysicalCharacteristics = new fhirCsR5.Models.ProdCharacteristic();
          PhysicalCharacteristics.DeserializeJson(ref reader, options);
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<DeviceDefinitionProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionProperty objProperty = new fhirCsR5.Models.DeviceDefinitionProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objSafety = new fhirCsR5.Models.CodeableConcept();
            objSafety.DeserializeJson(ref reader, options);
            Safety.Add(objSafety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Safety.Count == 0)
          {
            Safety = null;
          }

          break;

        case "shelfLifeStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ShelfLifeStorage = new List<ProductShelfLife>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ProductShelfLife objShelfLifeStorage = new fhirCsR5.Models.ProductShelfLife();
            objShelfLifeStorage.DeserializeJson(ref reader, options);
            ShelfLifeStorage.Add(objShelfLifeStorage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ShelfLifeStorage.Count == 0)
          {
            ShelfLifeStorage = null;
          }

          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialization = new List<DeviceDefinitionSpecialization>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionSpecialization objSpecialization = new fhirCsR5.Models.DeviceDefinitionSpecialization();
            objSpecialization.DeserializeJson(ref reader, options);
            Specialization.Add(objSpecialization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialization.Count == 0)
          {
            Specialization = null;
          }

          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objType = new fhirCsR5.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "udiDeviceIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UdiDeviceIdentifier = new List<DeviceDefinitionUdiDeviceIdentifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionUdiDeviceIdentifier objUdiDeviceIdentifier = new fhirCsR5.Models.DeviceDefinitionUdiDeviceIdentifier();
            objUdiDeviceIdentifier.DeserializeJson(ref reader, options);
            UdiDeviceIdentifier.Add(objUdiDeviceIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UdiDeviceIdentifier.Count == 0)
          {
            UdiDeviceIdentifier = null;
          }

          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Version = new List<DeviceDefinitionVersion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionVersion objVersion = new fhirCsR5.Models.DeviceDefinitionVersion();
            objVersion.DeserializeJson(ref reader, options);
            Version.Add(objVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Version.Count == 0)
          {
            Version = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
