// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Indicates who or what participated in the adverse event and how they were involved.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEventParticipant>))]
  public class AdverseEventParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For example, the physician prescribing a drug, a nurse administering the drug, a device that administered the drug, a witness to the event, or an informant of clinical history.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.
    /// </summary>
    public CodeableConcept Function { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Function != null)
      {
        writer.WritePropertyName("function");
        Function.SerializeJson(writer, options);
      }

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR5.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "function":
          Function = new fhirCsR5.Models.CodeableConcept();
          Function.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information on the possible cause of the event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEventSuspectEntityCausality>))]
  public class AdverseEventSuspectEntityCausality : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The method of evaluating the relatedness of the suspected entity to the event.
    /// </summary>
    public CodeableConcept AssessmentMethod { get; set; }
    /// <summary>
    /// The author of the information on the possible cause of the event.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// The result of the assessment regarding the relatedness of the suspected entity to the event.
    /// </summary>
    public CodeableConcept EntityRelatedness { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (AssessmentMethod != null)
      {
        writer.WritePropertyName("assessmentMethod");
        AssessmentMethod.SerializeJson(writer, options);
      }

      if (EntityRelatedness != null)
      {
        writer.WritePropertyName("entityRelatedness");
        EntityRelatedness.SerializeJson(writer, options);
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assessmentMethod":
          AssessmentMethod = new fhirCsR5.Models.CodeableConcept();
          AssessmentMethod.DeserializeJson(ref reader, options);
          break;

        case "author":
          Author = new fhirCsR5.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "entityRelatedness":
          EntityRelatedness = new fhirCsR5.Models.CodeableConcept();
          EntityRelatedness.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Describes the entity that is suspected to have caused the adverse event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEventSuspectEntity>))]
  public class AdverseEventSuspectEntity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Information on the possible cause of the event.
    /// </summary>
    public AdverseEventSuspectEntityCausality Causality { get; set; }
    /// <summary>
    /// Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
    /// </summary>
    public CodeableConcept InstanceCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
    /// </summary>
    public Reference InstanceReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (InstanceCodeableConcept != null)
      {
        writer.WritePropertyName("instanceCodeableConcept");
        InstanceCodeableConcept.SerializeJson(writer, options);
      }

      if (InstanceReference != null)
      {
        writer.WritePropertyName("instanceReference");
        InstanceReference.SerializeJson(writer, options);
      }

      if (Causality != null)
      {
        writer.WritePropertyName("causality");
        Causality.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "causality":
          Causality = new fhirCsR5.Models.AdverseEventSuspectEntityCausality();
          Causality.DeserializeJson(ref reader, options);
          break;

        case "instanceCodeableConcept":
          InstanceCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          InstanceCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "instanceReference":
          InstanceReference = new fhirCsR5.Models.Reference();
          InstanceReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The contributing factors suspected to have increased the probability or severity of the adverse event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEventContributingFactor>))]
  public class AdverseEventContributingFactor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The item that is suspected to have increased the probability or severity of the adverse event.
    /// </summary>
    public Reference ItemReference { get; set; }
    /// <summary>
    /// The item that is suspected to have increased the probability or severity of the adverse event.
    /// </summary>
    public CodeableConcept ItemCodeableConcept { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ItemReference != null)
      {
        writer.WritePropertyName("itemReference");
        ItemReference.SerializeJson(writer, options);
      }

      if (ItemCodeableConcept != null)
      {
        writer.WritePropertyName("itemCodeableConcept");
        ItemCodeableConcept.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemReference":
          ItemReference = new fhirCsR5.Models.Reference();
          ItemReference.DeserializeJson(ref reader, options);
          break;

        case "itemCodeableConcept":
          ItemCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ItemCodeableConcept.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Preventive actions that contributed to avoiding the adverse event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEventPreventiveAction>))]
  public class AdverseEventPreventiveAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The action that contributed to avoiding the adverse event.
    /// </summary>
    public Reference ItemReference { get; set; }
    /// <summary>
    /// The action that contributed to avoiding the adverse event.
    /// </summary>
    public CodeableConcept ItemCodeableConcept { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ItemReference != null)
      {
        writer.WritePropertyName("itemReference");
        ItemReference.SerializeJson(writer, options);
      }

      if (ItemCodeableConcept != null)
      {
        writer.WritePropertyName("itemCodeableConcept");
        ItemCodeableConcept.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemReference":
          ItemReference = new fhirCsR5.Models.Reference();
          ItemReference.DeserializeJson(ref reader, options);
          break;

        case "itemCodeableConcept":
          ItemCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ItemCodeableConcept.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEventMitigatingAction>))]
  public class AdverseEventMitigatingAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
    /// </summary>
    public Reference ItemReference { get; set; }
    /// <summary>
    /// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
    /// </summary>
    public CodeableConcept ItemCodeableConcept { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ItemReference != null)
      {
        writer.WritePropertyName("itemReference");
        ItemReference.SerializeJson(writer, options);
      }

      if (ItemCodeableConcept != null)
      {
        writer.WritePropertyName("itemCodeableConcept");
        ItemCodeableConcept.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemReference":
          ItemReference = new fhirCsR5.Models.Reference();
          ItemReference.DeserializeJson(ref reader, options);
          break;

        case "itemCodeableConcept":
          ItemCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ItemCodeableConcept.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Supporting information relevant to the event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEventSupportingInfo>))]
  public class AdverseEventSupportingInfo : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
    /// </summary>
    public Reference ItemReference { get; set; }
    /// <summary>
    /// Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
    /// </summary>
    public CodeableConcept ItemCodeableConcept { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ItemReference != null)
      {
        writer.WritePropertyName("itemReference");
        ItemReference.SerializeJson(writer, options);
      }

      if (ItemCodeableConcept != null)
      {
        writer.WritePropertyName("itemCodeableConcept");
        ItemCodeableConcept.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemReference":
          ItemReference = new fhirCsR5.Models.Reference();
          ItemReference.DeserializeJson(ref reader, options);
          break;

        case "itemCodeableConcept":
          ItemCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ItemCodeableConcept.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research subject.  The unintended effects may require additional monitoring, treatment or hospitalization or may result in death.  The AdverseEvent resource also extends to potential or avoided events that could have had such effects.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdverseEvent>))]
  public class AdverseEvent : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "AdverseEvent";
    /// <summary>
    /// Whether the event actually happened, or just had the potential to. Note that this is independent of whether anyone was affected or harmed or how severely.
    /// </summary>
    public string Actuality { get; set; }
    /// <summary>
    /// Extension container element for Actuality
    /// </summary>
    public Element _Actuality { get; set; }
    /// <summary>
    /// The overall type of event, intended for search and filtering purposes.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The contributing factors suspected to have increased the probability or severity of the adverse event.
    /// </summary>
    public List<AdverseEventContributingFactor> ContributingFactor { get; set; }
    /// <summary>
    /// Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
    /// </summary>
    public string Detected { get; set; }
    /// <summary>
    /// Extension container element for Detected
    /// </summary>
    public Element _Detected { get; set; }
    /// <summary>
    /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. For example, if a medication administration was considered an adverse event because it resulted in a rash, then the encounter when the medication administration was given is the associated encounter. If the patient reports the AdverseEvent during a second encounter, that second encounter is not the associated encounter.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The information about where the adverse event occurred.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
    /// </summary>
    public List<AdverseEventMitigatingAction> MitigatingAction { get; set; }
    /// <summary>
    /// The date (and perhaps time) when the adverse event occurred.
    /// </summary>
    public string OccurrenceDateTime { get; set; }
    /// <summary>
    /// Extension container element for OccurrenceDateTime
    /// </summary>
    public Element _OccurrenceDateTime { get; set; }
    /// <summary>
    /// The date (and perhaps time) when the adverse event occurred.
    /// </summary>
    public Period OccurrencePeriod { get; set; }
    /// <summary>
    /// The date (and perhaps time) when the adverse event occurred.
    /// </summary>
    public Timing OccurrenceTiming { get; set; }
    /// <summary>
    /// Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.
    /// </summary>
    public List<CodeableConcept> Outcome { get; set; }
    /// <summary>
    /// Indicates who or what participated in the adverse event and how they were involved.
    /// </summary>
    public List<AdverseEventParticipant> Participant { get; set; }
    /// <summary>
    /// Preventive actions that contributed to avoiding the adverse event.
    /// </summary>
    public List<AdverseEventPreventiveAction> PreventiveAction { get; set; }
    /// <summary>
    /// The recordedDate represents the date when this particular AdverseEvent record was created in the system, not the date of the most recent update.  The date of the last record modification can be retrieved from the resource metadata.
    /// </summary>
    public string RecordedDate { get; set; }
    /// <summary>
    /// Extension container element for RecordedDate
    /// </summary>
    public Element _RecordedDate { get; set; }
    /// <summary>
    /// Information on who recorded the adverse event.  May be the patient or a practitioner.
    /// </summary>
    public Reference Recorder { get; set; }
    /// <summary>
    /// Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall.
    /// </summary>
    public List<Reference> ResultingCondition { get; set; }
    /// <summary>
    /// Using an example, a rash can have an AdverseEvent.resultingCondition.severity = severe, yet an AdverseEvent.seriousness = non-serious.  Alternatively, a medication given with the wrong dose (chemotherapy given with too low of a dose) can have an AdverseEvent.resultingCondition.severity = mild, yet a AdverseEvent.seriousness = serious.  Another example would be a beta blocker clinical trial where patients with asthma should be excluded, yet a patient with asthma was included and had an asthmatic episode where  AdverseEvent.resultingCondition.severity = mild, yet a AdverseEvent.seriousness = serious.
    /// </summary>
    public CodeableConcept Seriousness { get; set; }
    /// <summary>
    /// This is not the reporting of the event to any regulatory or quality organization.  This is not the outcome of the patient's condition.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The research study that the subject is enrolled in.
    /// </summary>
    public List<Reference> Study { get; set; }
    /// <summary>
    /// If AdverseEvent.resultingCondition differs among members of the group, then use Patient as the subject.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Supporting information relevant to the event.
    /// </summary>
    public List<AdverseEventSupportingInfo> SupportingInfo { get; set; }
    /// <summary>
    /// Describes the entity that is suspected to have caused the adverse event.
    /// </summary>
    public List<AdverseEventSuspectEntity> SuspectEntity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Actuality))
      {
        writer.WriteString("actuality", (string)Actuality!);
      }

      if (_Actuality != null)
      {
        writer.WritePropertyName("_actuality");
        _Actuality.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OccurrenceDateTime))
      {
        writer.WriteString("occurrenceDateTime", (string)OccurrenceDateTime!);
      }

      if (_OccurrenceDateTime != null)
      {
        writer.WritePropertyName("_occurrenceDateTime");
        _OccurrenceDateTime.SerializeJson(writer, options);
      }

      if (OccurrencePeriod != null)
      {
        writer.WritePropertyName("occurrencePeriod");
        OccurrencePeriod.SerializeJson(writer, options);
      }

      if (OccurrenceTiming != null)
      {
        writer.WritePropertyName("occurrenceTiming");
        OccurrenceTiming.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Detected))
      {
        writer.WriteString("detected", (string)Detected!);
      }

      if (_Detected != null)
      {
        writer.WritePropertyName("_detected");
        _Detected.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RecordedDate))
      {
        writer.WriteString("recordedDate", (string)RecordedDate!);
      }

      if (_RecordedDate != null)
      {
        writer.WritePropertyName("_recordedDate");
        _RecordedDate.SerializeJson(writer, options);
      }

      if ((ResultingCondition != null) && (ResultingCondition.Count != 0))
      {
        writer.WritePropertyName("resultingCondition");
        writer.WriteStartArray();

        foreach (Reference valResultingCondition in ResultingCondition)
        {
          valResultingCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if (Seriousness != null)
      {
        writer.WritePropertyName("seriousness");
        Seriousness.SerializeJson(writer, options);
      }

      if ((Outcome != null) && (Outcome.Count != 0))
      {
        writer.WritePropertyName("outcome");
        writer.WriteStartArray();

        foreach (CodeableConcept valOutcome in Outcome)
        {
          valOutcome.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Recorder != null)
      {
        writer.WritePropertyName("recorder");
        Recorder.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (AdverseEventParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SuspectEntity != null) && (SuspectEntity.Count != 0))
      {
        writer.WritePropertyName("suspectEntity");
        writer.WriteStartArray();

        foreach (AdverseEventSuspectEntity valSuspectEntity in SuspectEntity)
        {
          valSuspectEntity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ContributingFactor != null) && (ContributingFactor.Count != 0))
      {
        writer.WritePropertyName("contributingFactor");
        writer.WriteStartArray();

        foreach (AdverseEventContributingFactor valContributingFactor in ContributingFactor)
        {
          valContributingFactor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PreventiveAction != null) && (PreventiveAction.Count != 0))
      {
        writer.WritePropertyName("preventiveAction");
        writer.WriteStartArray();

        foreach (AdverseEventPreventiveAction valPreventiveAction in PreventiveAction)
        {
          valPreventiveAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MitigatingAction != null) && (MitigatingAction.Count != 0))
      {
        writer.WritePropertyName("mitigatingAction");
        writer.WriteStartArray();

        foreach (AdverseEventMitigatingAction valMitigatingAction in MitigatingAction)
        {
          valMitigatingAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SupportingInfo != null) && (SupportingInfo.Count != 0))
      {
        writer.WritePropertyName("supportingInfo");
        writer.WriteStartArray();

        foreach (AdverseEventSupportingInfo valSupportingInfo in SupportingInfo)
        {
          valSupportingInfo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Study != null) && (Study.Count != 0))
      {
        writer.WritePropertyName("study");
        writer.WriteStartArray();

        foreach (Reference valStudy in Study)
        {
          valStudy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actuality":
          Actuality = reader.GetString();
          break;

        case "_actuality":
          _Actuality = new fhirCsR5.Models.Element();
          _Actuality.DeserializeJson(ref reader, options);
          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCategory = new fhirCsR5.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "contributingFactor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContributingFactor = new List<AdverseEventContributingFactor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdverseEventContributingFactor objContributingFactor = new fhirCsR5.Models.AdverseEventContributingFactor();
            objContributingFactor.DeserializeJson(ref reader, options);
            ContributingFactor.Add(objContributingFactor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContributingFactor.Count == 0)
          {
            ContributingFactor = null;
          }

          break;

        case "detected":
          Detected = reader.GetString();
          break;

        case "_detected":
          _Detected = new fhirCsR5.Models.Element();
          _Detected.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR5.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "location":
          Location = new fhirCsR5.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "mitigatingAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MitigatingAction = new List<AdverseEventMitigatingAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdverseEventMitigatingAction objMitigatingAction = new fhirCsR5.Models.AdverseEventMitigatingAction();
            objMitigatingAction.DeserializeJson(ref reader, options);
            MitigatingAction.Add(objMitigatingAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MitigatingAction.Count == 0)
          {
            MitigatingAction = null;
          }

          break;

        case "occurrenceDateTime":
          OccurrenceDateTime = reader.GetString();
          break;

        case "_occurrenceDateTime":
          _OccurrenceDateTime = new fhirCsR5.Models.Element();
          _OccurrenceDateTime.DeserializeJson(ref reader, options);
          break;

        case "occurrencePeriod":
          OccurrencePeriod = new fhirCsR5.Models.Period();
          OccurrencePeriod.DeserializeJson(ref reader, options);
          break;

        case "occurrenceTiming":
          OccurrenceTiming = new fhirCsR5.Models.Timing();
          OccurrenceTiming.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Outcome = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objOutcome = new fhirCsR5.Models.CodeableConcept();
            objOutcome.DeserializeJson(ref reader, options);
            Outcome.Add(objOutcome);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Outcome.Count == 0)
          {
            Outcome = null;
          }

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<AdverseEventParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdverseEventParticipant objParticipant = new fhirCsR5.Models.AdverseEventParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "preventiveAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreventiveAction = new List<AdverseEventPreventiveAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdverseEventPreventiveAction objPreventiveAction = new fhirCsR5.Models.AdverseEventPreventiveAction();
            objPreventiveAction.DeserializeJson(ref reader, options);
            PreventiveAction.Add(objPreventiveAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreventiveAction.Count == 0)
          {
            PreventiveAction = null;
          }

          break;

        case "recordedDate":
          RecordedDate = reader.GetString();
          break;

        case "_recordedDate":
          _RecordedDate = new fhirCsR5.Models.Element();
          _RecordedDate.DeserializeJson(ref reader, options);
          break;

        case "recorder":
          Recorder = new fhirCsR5.Models.Reference();
          Recorder.DeserializeJson(ref reader, options);
          break;

        case "resultingCondition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ResultingCondition = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objResultingCondition = new fhirCsR5.Models.Reference();
            objResultingCondition.DeserializeJson(ref reader, options);
            ResultingCondition.Add(objResultingCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ResultingCondition.Count == 0)
          {
            ResultingCondition = null;
          }

          break;

        case "seriousness":
          Seriousness = new fhirCsR5.Models.CodeableConcept();
          Seriousness.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "study":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Study = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objStudy = new fhirCsR5.Models.Reference();
            objStudy.DeserializeJson(ref reader, options);
            Study.Add(objStudy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Study.Count == 0)
          {
            Study = null;
          }

          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInfo = new List<AdverseEventSupportingInfo>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdverseEventSupportingInfo objSupportingInfo = new fhirCsR5.Models.AdverseEventSupportingInfo();
            objSupportingInfo.DeserializeJson(ref reader, options);
            SupportingInfo.Add(objSupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInfo.Count == 0)
          {
            SupportingInfo = null;
          }

          break;

        case "suspectEntity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SuspectEntity = new List<AdverseEventSuspectEntity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdverseEventSuspectEntity objSuspectEntity = new fhirCsR5.Models.AdverseEventSuspectEntity();
            objSuspectEntity.DeserializeJson(ref reader, options);
            SuspectEntity.Add(objSuspectEntity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SuspectEntity.Count == 0)
          {
            SuspectEntity = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the AdverseEvent.actuality field
  /// </summary>
  public static class AdverseEventActualityCodes {
    public const string ACTUAL = "actual";
    public const string POTENTIAL = "potential";
  }
  /// <summary>
  /// Code Values for the AdverseEvent.status field
  /// </summary>
  public static class AdverseEventStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
  }
}
