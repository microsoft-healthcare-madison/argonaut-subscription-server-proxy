// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them. 
  /// It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchSubjectProgress>))]
  public class ResearchSubjectProgress : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The date when the state ended.
    /// </summary>
    public string EndDate { get; set; }
    /// <summary>
    /// Extension container element for EndDate
    /// </summary>
    public Element _EndDate { get; set; }
    /// <summary>
    /// There can be multiple entries but it is also valid to just have the most recent.  This should npt be rlied upon as the full path the subject has taken.
    /// </summary>
    public CodeableConcept Milestone { get; set; }
    /// <summary>
    /// The reason for the state change.  If coded it should follow the formal subject state model.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// This is NOT the date the change in state was recorded.
    /// </summary>
    public string StartDate { get; set; }
    /// <summary>
    /// Extension container element for StartDate
    /// </summary>
    public Element _StartDate { get; set; }
    /// <summary>
    /// The current state of the subject.
    /// </summary>
    public CodeableConcept SubjectState { get; set; }
    /// <summary>
    /// Identifies the aspect of the subject's journey that the state refers to.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (SubjectState != null)
      {
        writer.WritePropertyName("subjectState");
        SubjectState.SerializeJson(writer, options);
      }

      if (Milestone != null)
      {
        writer.WritePropertyName("milestone");
        Milestone.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StartDate))
      {
        writer.WriteString("startDate", (string)StartDate!);
      }

      if (_StartDate != null)
      {
        writer.WritePropertyName("_startDate");
        _StartDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EndDate))
      {
        writer.WriteString("endDate", (string)EndDate!);
      }

      if (_EndDate != null)
      {
        writer.WritePropertyName("_endDate");
        _EndDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "endDate":
          EndDate = reader.GetString();
          break;

        case "_endDate":
          _EndDate = new fhirCsR5.Models.Element();
          _EndDate.DeserializeJson(ref reader, options);
          break;

        case "milestone":
          Milestone = new fhirCsR5.Models.CodeableConcept();
          Milestone.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR5.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "startDate":
          StartDate = reader.GetString();
          break;

        case "_startDate":
          _StartDate = new fhirCsR5.Models.Element();
          _StartDate.DeserializeJson(ref reader, options);
          break;

        case "subjectState":
          SubjectState = new fhirCsR5.Models.CodeableConcept();
          SubjectState.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A physical entity which is the primary unit of operational and/or administrative interest in a study.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchSubject>))]
  public class ResearchSubject : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ResearchSubject";
    /// <summary>
    /// The name of the arm in the study the subject actually followed as part of this study.
    /// </summary>
    public string ActualArm { get; set; }
    /// <summary>
    /// Extension container element for ActualArm
    /// </summary>
    public Element _ActualArm { get; set; }
    /// <summary>
    /// Maybe this is really PlanDefinition.
    /// </summary>
    public string AssignedArm { get; set; }
    /// <summary>
    /// Extension container element for AssignedArm
    /// </summary>
    public Element _AssignedArm { get; set; }
    /// <summary>
    /// A record of the patient's informed agreement to participate in the study.
    /// </summary>
    public Reference Consent { get; set; }
    /// <summary>
    /// Identifiers assigned to this research subject for a study.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The dates the subject began and ended their participation in the study.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them. 
    /// It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
    /// </summary>
    public List<ResearchSubjectProgress> Progress { get; set; }
    /// <summary>
    /// The publication state of the resource (not of the subject).
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Reference to the study the subject is participating in.
    /// </summary>
    public Reference Study { get; set; }
    /// <summary>
    /// The record of the person, animal or other entity involved in the study.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Progress != null) && (Progress.Count != 0))
      {
        writer.WritePropertyName("progress");
        writer.WriteStartArray();

        foreach (ResearchSubjectProgress valProgress in Progress)
        {
          valProgress.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (Study != null)
      {
        writer.WritePropertyName("study");
        Study.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AssignedArm))
      {
        writer.WriteString("assignedArm", (string)AssignedArm!);
      }

      if (_AssignedArm != null)
      {
        writer.WritePropertyName("_assignedArm");
        _AssignedArm.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ActualArm))
      {
        writer.WriteString("actualArm", (string)ActualArm!);
      }

      if (_ActualArm != null)
      {
        writer.WritePropertyName("_actualArm");
        _ActualArm.SerializeJson(writer, options);
      }

      if (Consent != null)
      {
        writer.WritePropertyName("consent");
        Consent.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actualArm":
          ActualArm = reader.GetString();
          break;

        case "_actualArm":
          _ActualArm = new fhirCsR5.Models.Element();
          _ActualArm.DeserializeJson(ref reader, options);
          break;

        case "assignedArm":
          AssignedArm = reader.GetString();
          break;

        case "_assignedArm":
          _AssignedArm = new fhirCsR5.Models.Element();
          _AssignedArm.DeserializeJson(ref reader, options);
          break;

        case "consent":
          Consent = new fhirCsR5.Models.Reference();
          Consent.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "period":
          Period = new fhirCsR5.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "progress":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Progress = new List<ResearchSubjectProgress>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchSubjectProgress objProgress = new fhirCsR5.Models.ResearchSubjectProgress();
            objProgress.DeserializeJson(ref reader, options);
            Progress.Add(objProgress);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Progress.Count == 0)
          {
            Progress = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "study":
          Study = new fhirCsR5.Models.Reference();
          Study.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ResearchSubject.status field
  /// </summary>
  public static class ResearchSubjectStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
