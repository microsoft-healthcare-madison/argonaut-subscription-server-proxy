// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2Software>))]
  public class CapabilityStatement2Software : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Name the software is known by.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Date this version of the software was released.
    /// </summary>
    public string ReleaseDate { get; set; }
    /// <summary>
    /// Extension container element for ReleaseDate
    /// </summary>
    public Element _ReleaseDate { get; set; }
    /// <summary>
    /// If possible, a version should be specified, as statements are likely to be different for different versions of software.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReleaseDate))
      {
        writer.WriteString("releaseDate", (string)ReleaseDate!);
      }

      if (_ReleaseDate != null)
      {
        writer.WritePropertyName("_releaseDate");
        _ReleaseDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "releaseDate":
          ReleaseDate = reader.GetString();
          break;

        case "_releaseDate":
          _ReleaseDate = new fhirCsR5.Models.Element();
          _ReleaseDate.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2Implementation>))]
  public class CapabilityStatement2Implementation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
    /// </summary>
    public Reference Custodian { get; set; }
    /// <summary>
    /// Information about the specific installation that this capability statement relates to.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Custodian != null)
      {
        writer.WritePropertyName("custodian");
        Custodian.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "custodian":
          Custodian = new fhirCsR5.Models.Reference();
          Custodian.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A statement that affirms support for a feature.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2RestFeature>))]
  public class CapabilityStatement2RestFeature : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code that describes the feature being reported on.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// A value for the feature - maybe true, false, or one of the set of codes allowed in the definition of the feature code.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR5.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR5.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// In general, a Resource will only appear in a CapabilityStatement2 if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2RestResourceInteraction>))]
  public class CapabilityStatement2RestResourceInteraction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coded identifier of the operation, supported by the system resource.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A statement that affirms support for a feature, in this context.
    /// </summary>
    public List<CapabilityStatement2RestFeature> Feature { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Feature != null) && (Feature.Count != 0))
      {
        writer.WritePropertyName("feature");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestFeature valFeature in Feature)
        {
          valFeature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR5.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR5.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "feature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Feature = new List<CapabilityStatement2RestFeature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestFeature objFeature = new fhirCsR5.Models.CapabilityStatement2RestFeature();
            objFeature.DeserializeJson(ref reader, options);
            Feature.Add(objFeature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Feature.Count == 0)
          {
            Feature = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement2.rest.resource.interaction.code field
  /// </summary>
  public static class CapabilityStatement2RestResourceInteractionCodeCodes {
    public const string READ = "read";
    public const string VREAD = "vread";
    public const string UPDATE = "update";
    public const string PATCH = "patch";
    public const string DELETE = "delete";
    public const string HISTORY_INSTANCE = "history-instance";
    public const string HISTORY_TYPE = "history-type";
    public const string CREATE = "create";
    public const string SEARCH_TYPE = "search-type";
  }
  /// <summary>
  /// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement2.rest.searchParam](capabilitystatement2-definitions.html#CapabilityStatement2.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2RestResourceSearchParam>))]
  public class CapabilityStatement2RestResourceSearchParam : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A statement that affirms support for a feature, in this context.
    /// </summary>
    public List<CapabilityStatement2RestFeature> Feature { get; set; }
    /// <summary>
    /// Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Feature != null) && (Feature.Count != 0))
      {
        writer.WritePropertyName("feature");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestFeature valFeature in Feature)
        {
          valFeature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR5.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR5.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "feature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Feature = new List<CapabilityStatement2RestFeature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestFeature objFeature = new fhirCsR5.Models.CapabilityStatement2RestFeature();
            objFeature.DeserializeJson(ref reader, options);
            Feature.Add(objFeature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Feature.Count == 0)
          {
            Feature = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement2.rest.resource.searchParam.type field
  /// </summary>
  public static class CapabilityStatement2RestResourceSearchParamTypeCodes {
    public const string NUMBER = "number";
    public const string DATE = "date";
    public const string VAL_STRING = "string";
    public const string TOKEN = "token";
    public const string REFERENCE = "reference";
    public const string COMPOSITE = "composite";
    public const string QUANTITY = "quantity";
    public const string URI = "uri";
    public const string SPECIAL = "special";
  }
  /// <summary>
  /// Operations linked from CapabilityStatement2.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
  /// If an operation that is listed in multiple CapabilityStatement2.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2RestResourceOperation>))]
  public class CapabilityStatement2RestResourceOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This can be used to build an HTML form to invoke the operation, for instance.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A statement that affirms support for a feature, in this context.
    /// </summary>
    public List<CapabilityStatement2RestFeature> Feature { get; set; }
    /// <summary>
    /// The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the "$" portion that is always included in the URL.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Feature != null) && (Feature.Count != 0))
      {
        writer.WritePropertyName("feature");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestFeature valFeature in Feature)
        {
          valFeature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR5.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR5.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "feature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Feature = new List<CapabilityStatement2RestFeature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestFeature objFeature = new fhirCsR5.Models.CapabilityStatement2RestFeature();
            objFeature.DeserializeJson(ref reader, options);
            Feature.Add(objFeature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Feature.Count == 0)
          {
            Feature = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Max of one repetition per resource type.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2RestResource>))]
  public class CapabilityStatement2RestResource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Additional information about the resource type used by the system.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A statement that affirms support for a feature, in this context.
    /// </summary>
    public List<CapabilityStatement2RestFeature> Feature { get; set; }
    /// <summary>
    /// In general, a Resource will only appear in a CapabilityStatement2 if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
    /// </summary>
    public List<CapabilityStatement2RestResourceInteraction> Interaction { get; set; }
    /// <summary>
    /// Operations linked from CapabilityStatement2.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
    /// If an operation that is listed in multiple CapabilityStatement2.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
    /// </summary>
    public List<CapabilityStatement2RestResourceOperation> Operation { get; set; }
    /// <summary>
    /// The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.
    /// </summary>
    public string Profile { get; set; }
    /// <summary>
    /// Extension container element for Profile
    /// </summary>
    public Element _Profile { get; set; }
    /// <summary>
    /// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement2.rest.searchParam](capabilitystatement2-definitions.html#CapabilityStatement2.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
    /// </summary>
    public List<CapabilityStatement2RestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// Supported profiles are different than the profile that applies to a particular resource in .rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that do? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).
    /// </summary>
    public List<string> SupportedProfile { get; set; }
    /// <summary>
    /// Extension container element for SupportedProfile
    /// </summary>
    public List<Element> _SupportedProfile { get; set; }
    /// <summary>
    /// A type of resource exposed via the restful interface.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Profile))
      {
        writer.WriteString("profile", (string)Profile!);
      }

      if (_Profile != null)
      {
        writer.WritePropertyName("_profile");
        _Profile.SerializeJson(writer, options);
      }

      if ((SupportedProfile != null) && (SupportedProfile.Count != 0))
      {
        writer.WritePropertyName("supportedProfile");
        writer.WriteStartArray();

        foreach (string valSupportedProfile in SupportedProfile)
        {
          writer.WriteStringValue(valSupportedProfile);
        }

        writer.WriteEndArray();
      }

      if ((_SupportedProfile != null) && (_SupportedProfile.Count != 0))
      {
        writer.WritePropertyName("_supportedProfile");
        writer.WriteStartArray();

        foreach (Element val_SupportedProfile in _SupportedProfile)
        {
          val_SupportedProfile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Feature != null) && (Feature.Count != 0))
      {
        writer.WritePropertyName("feature");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestFeature valFeature in Feature)
        {
          valFeature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Interaction != null) && (Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestResourceInteraction valInteraction in Interaction)
        {
          valInteraction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchParam != null) && (SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestResourceSearchParam valSearchParam in SearchParam)
        {
          valSearchParam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operation != null) && (Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestResourceOperation valOperation in Operation)
        {
          valOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR5.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "feature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Feature = new List<CapabilityStatement2RestFeature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestFeature objFeature = new fhirCsR5.Models.CapabilityStatement2RestFeature();
            objFeature.DeserializeJson(ref reader, options);
            Feature.Add(objFeature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Feature.Count == 0)
          {
            Feature = null;
          }

          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interaction = new List<CapabilityStatement2RestResourceInteraction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestResourceInteraction objInteraction = new fhirCsR5.Models.CapabilityStatement2RestResourceInteraction();
            objInteraction.DeserializeJson(ref reader, options);
            Interaction.Add(objInteraction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interaction.Count == 0)
          {
            Interaction = null;
          }

          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operation = new List<CapabilityStatement2RestResourceOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestResourceOperation objOperation = new fhirCsR5.Models.CapabilityStatement2RestResourceOperation();
            objOperation.DeserializeJson(ref reader, options);
            Operation.Add(objOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operation.Count == 0)
          {
            Operation = null;
          }

          break;

        case "profile":
          Profile = reader.GetString();
          break;

        case "_profile":
          _Profile = new fhirCsR5.Models.Element();
          _Profile.DeserializeJson(ref reader, options);
          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchParam = new List<CapabilityStatement2RestResourceSearchParam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestResourceSearchParam objSearchParam = new fhirCsR5.Models.CapabilityStatement2RestResourceSearchParam();
            objSearchParam.DeserializeJson(ref reader, options);
            SearchParam.Add(objSearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchParam.Count == 0)
          {
            SearchParam = null;
          }

          break;

        case "supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportedProfile = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SupportedProfile.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportedProfile.Count == 0)
          {
            SupportedProfile = null;
          }

          break;

        case "_supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SupportedProfile = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_SupportedProfile = new fhirCsR5.Models.Element();
            obj_SupportedProfile.DeserializeJson(ref reader, options);
            _SupportedProfile.Add(obj_SupportedProfile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SupportedProfile.Count == 0)
          {
            _SupportedProfile = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A specification of restful operations supported by the system.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2RestInteraction>))]
  public class CapabilityStatement2RestInteraction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A coded identifier of the operation, supported by the system.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A statement that affirms support for a feature, in this context.
    /// </summary>
    public List<CapabilityStatement2RestFeature> Feature { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Feature != null) && (Feature.Count != 0))
      {
        writer.WritePropertyName("feature");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestFeature valFeature in Feature)
        {
          valFeature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR5.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR5.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "feature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Feature = new List<CapabilityStatement2RestFeature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestFeature objFeature = new fhirCsR5.Models.CapabilityStatement2RestFeature();
            objFeature.DeserializeJson(ref reader, options);
            Feature.Add(objFeature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Feature.Count == 0)
          {
            Feature = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement2.rest.interaction.code field
  /// </summary>
  public static class CapabilityStatement2RestInteractionCodeCodes {
    public const string TRANSACTION = "transaction";
    public const string BATCH = "batch";
    public const string SEARCH_SYSTEM = "search-system";
    public const string HISTORY_SYSTEM = "history-system";
  }
  /// <summary>
  /// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2Rest>))]
  public class CapabilityStatement2Rest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
    /// </summary>
    public List<string> Compartment { get; set; }
    /// <summary>
    /// Extension container element for Compartment
    /// </summary>
    public List<Element> _Compartment { get; set; }
    /// <summary>
    /// Information about the system's restful capabilities that apply across all applications, such as security.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A statement that affirms support for a feature.
    /// </summary>
    public List<CapabilityStatement2RestFeature> Feature { get; set; }
    /// <summary>
    /// A specification of restful operations supported by the system.
    /// </summary>
    public List<CapabilityStatement2RestInteraction> Interaction { get; set; }
    /// <summary>
    /// Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// CapabilityStatement2.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement2.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.
    /// </summary>
    public List<CapabilityStatement2RestResourceOperation> Operation { get; set; }
    /// <summary>
    /// Max of one repetition per resource type.
    /// </summary>
    public List<CapabilityStatement2RestResource> Resource { get; set; }
    /// <summary>
    /// Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement2.rest.searchParam](capabilitystatement2-definitions.html#CapabilityStatement2.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
    /// </summary>
    public List<CapabilityStatement2RestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Feature != null) && (Feature.Count != 0))
      {
        writer.WritePropertyName("feature");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestFeature valFeature in Feature)
        {
          valFeature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestResource valResource in Resource)
        {
          valResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Interaction != null) && (Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestInteraction valInteraction in Interaction)
        {
          valInteraction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchParam != null) && (SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestResourceSearchParam valSearchParam in SearchParam)
        {
          valSearchParam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operation != null) && (Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();

        foreach (CapabilityStatement2RestResourceOperation valOperation in Operation)
        {
          valOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Compartment != null) && (Compartment.Count != 0))
      {
        writer.WritePropertyName("compartment");
        writer.WriteStartArray();

        foreach (string valCompartment in Compartment)
        {
          writer.WriteStringValue(valCompartment);
        }

        writer.WriteEndArray();
      }

      if ((_Compartment != null) && (_Compartment.Count != 0))
      {
        writer.WritePropertyName("_compartment");
        writer.WriteStartArray();

        foreach (Element val_Compartment in _Compartment)
        {
          val_Compartment.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Compartment = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Compartment.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Compartment.Count == 0)
          {
            Compartment = null;
          }

          break;

        case "_compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Compartment = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Compartment = new fhirCsR5.Models.Element();
            obj_Compartment.DeserializeJson(ref reader, options);
            _Compartment.Add(obj_Compartment);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Compartment.Count == 0)
          {
            _Compartment = null;
          }

          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR5.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "feature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Feature = new List<CapabilityStatement2RestFeature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestFeature objFeature = new fhirCsR5.Models.CapabilityStatement2RestFeature();
            objFeature.DeserializeJson(ref reader, options);
            Feature.Add(objFeature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Feature.Count == 0)
          {
            Feature = null;
          }

          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interaction = new List<CapabilityStatement2RestInteraction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestInteraction objInteraction = new fhirCsR5.Models.CapabilityStatement2RestInteraction();
            objInteraction.DeserializeJson(ref reader, options);
            Interaction.Add(objInteraction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interaction.Count == 0)
          {
            Interaction = null;
          }

          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR5.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operation = new List<CapabilityStatement2RestResourceOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestResourceOperation objOperation = new fhirCsR5.Models.CapabilityStatement2RestResourceOperation();
            objOperation.DeserializeJson(ref reader, options);
            Operation.Add(objOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operation.Count == 0)
          {
            Operation = null;
          }

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<CapabilityStatement2RestResource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestResource objResource = new fhirCsR5.Models.CapabilityStatement2RestResource();
            objResource.DeserializeJson(ref reader, options);
            Resource.Add(objResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchParam = new List<CapabilityStatement2RestResourceSearchParam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2RestResourceSearchParam objSearchParam = new fhirCsR5.Models.CapabilityStatement2RestResourceSearchParam();
            objSearchParam.DeserializeJson(ref reader, options);
            SearchParam.Add(objSearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchParam.Count == 0)
          {
            SearchParam = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement2.rest.mode field
  /// </summary>
  public static class CapabilityStatement2RestModeCodes {
    public const string CLIENT = "client";
    public const string SERVER = "server";
  }
  /// <summary>
  /// A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<CapabilityStatement2>))]
  public class CapabilityStatement2 : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "CapabilityStatement2";
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the capability statement2 and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement2.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement2. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the capability statement2 was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement2 as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the capability statement2 is presumed to be the predominant language in the place the capability statement2 was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of capability statement2s that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement2-operation-versions.html) operation). If they do, and the CapabilityStatement2 is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.
    /// </summary>
    public string FhirVersion { get; set; }
    /// <summary>
    /// Extension container element for FhirVersion
    /// </summary>
    public Element _FhirVersion { get; set; }
    /// <summary>
    /// "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
    /// </summary>
    public List<string> Format { get; set; }
    /// <summary>
    /// Extension container element for Format
    /// </summary>
    public List<Element> _Format { get; set; }
    /// <summary>
    /// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
    /// </summary>
    public CapabilityStatement2Implementation Implementation { get; set; }
    /// <summary>
    /// A list of implementation guides that the server does (or should) support in their entirety.
    /// </summary>
    public List<string> ImplementationGuide { get; set; }
    /// <summary>
    /// Extension container element for ImplementationGuide
    /// </summary>
    public List<Element> _ImplementationGuide { get; set; }
    /// <summary>
    /// the contents of any directly or indirectly imported CapabilityStatement2s SHALL NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name, searchparam/name, interaction/code, messaging/endpoint, document/mode pair.
    /// A capability statement that imports another CapabilityStatement2 automatically instantiates it too (though this is often not a very useful statement for the kinds of CapabilityStatement2s that are suitable for importing).
    /// </summary>
    public List<string> Imports { get; set; }
    /// <summary>
    /// Extension container element for Imports
    /// </summary>
    public List<Element> _Imports { get; set; }
    /// <summary>
    /// HL7 defines the following Services: [Terminology Service](terminology-service.html).    
    /// Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
    /// </summary>
    public List<string> Instantiates { get; set; }
    /// <summary>
    /// Extension container element for Instantiates
    /// </summary>
    public List<Element> _Instantiates { get; set; }
    /// <summary>
    /// It may be possible for the capability statement2 to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
    /// </summary>
    public List<string> PatchFormat { get; set; }
    /// <summary>
    /// Extension container element for PatchFormat
    /// </summary>
    public List<Element> _PatchFormat { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the capability statement2 is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement2. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement2. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the capability statement2. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement2.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
    /// </summary>
    public List<CapabilityStatement2Rest> Rest { get; set; }
    /// <summary>
    /// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
    /// </summary>
    public CapabilityStatement2Software Software { get; set; }
    /// <summary>
    /// Allows filtering of capability statement2s that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different capability statement2 instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the capability statement2 with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if ((Instantiates != null) && (Instantiates.Count != 0))
      {
        writer.WritePropertyName("instantiates");
        writer.WriteStartArray();

        foreach (string valInstantiates in Instantiates)
        {
          writer.WriteStringValue(valInstantiates);
        }

        writer.WriteEndArray();
      }

      if ((_Instantiates != null) && (_Instantiates.Count != 0))
      {
        writer.WritePropertyName("_instantiates");
        writer.WriteStartArray();

        foreach (Element val_Instantiates in _Instantiates)
        {
          val_Instantiates.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Imports != null) && (Imports.Count != 0))
      {
        writer.WritePropertyName("imports");
        writer.WriteStartArray();

        foreach (string valImports in Imports)
        {
          writer.WriteStringValue(valImports);
        }

        writer.WriteEndArray();
      }

      if ((_Imports != null) && (_Imports.Count != 0))
      {
        writer.WritePropertyName("_imports");
        writer.WriteStartArray();

        foreach (Element val_Imports in _Imports)
        {
          val_Imports.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Software != null)
      {
        writer.WritePropertyName("software");
        Software.SerializeJson(writer, options);
      }

      if (Implementation != null)
      {
        writer.WritePropertyName("implementation");
        Implementation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(FhirVersion))
      {
        writer.WriteString("fhirVersion", (string)FhirVersion!);
      }

      if (_FhirVersion != null)
      {
        writer.WritePropertyName("_fhirVersion");
        _FhirVersion.SerializeJson(writer, options);
      }

      if ((Format != null) && (Format.Count != 0))
      {
        writer.WritePropertyName("format");
        writer.WriteStartArray();

        foreach (string valFormat in Format)
        {
          writer.WriteStringValue(valFormat);
        }

        writer.WriteEndArray();
      }

      if ((_Format != null) && (_Format.Count != 0))
      {
        writer.WritePropertyName("_format");
        writer.WriteStartArray();

        foreach (Element val_Format in _Format)
        {
          val_Format.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PatchFormat != null) && (PatchFormat.Count != 0))
      {
        writer.WritePropertyName("patchFormat");
        writer.WriteStartArray();

        foreach (string valPatchFormat in PatchFormat)
        {
          writer.WriteStringValue(valPatchFormat);
        }

        writer.WriteEndArray();
      }

      if ((_PatchFormat != null) && (_PatchFormat.Count != 0))
      {
        writer.WritePropertyName("_patchFormat");
        writer.WriteStartArray();

        foreach (Element val_PatchFormat in _PatchFormat)
        {
          val_PatchFormat.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ImplementationGuide != null) && (ImplementationGuide.Count != 0))
      {
        writer.WritePropertyName("implementationGuide");
        writer.WriteStartArray();

        foreach (string valImplementationGuide in ImplementationGuide)
        {
          writer.WriteStringValue(valImplementationGuide);
        }

        writer.WriteEndArray();
      }

      if ((_ImplementationGuide != null) && (_ImplementationGuide.Count != 0))
      {
        writer.WritePropertyName("_implementationGuide");
        writer.WriteStartArray();

        foreach (Element val_ImplementationGuide in _ImplementationGuide)
        {
          val_ImplementationGuide.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Rest != null) && (Rest.Count != 0))
      {
        writer.WritePropertyName("rest");
        writer.WriteStartArray();

        foreach (CapabilityStatement2Rest valRest in Rest)
        {
          valRest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objContact = new fhirCsR5.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR5.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "fhirVersion":
          FhirVersion = reader.GetString();
          break;

        case "_fhirVersion":
          _FhirVersion = new fhirCsR5.Models.Element();
          _FhirVersion.DeserializeJson(ref reader, options);
          break;

        case "format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Format = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Format.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Format.Count == 0)
          {
            Format = null;
          }

          break;

        case "_format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Format = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Format = new fhirCsR5.Models.Element();
            obj_Format.DeserializeJson(ref reader, options);
            _Format.Add(obj_Format);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Format.Count == 0)
          {
            _Format = null;
          }

          break;

        case "implementation":
          Implementation = new fhirCsR5.Models.CapabilityStatement2Implementation();
          Implementation.DeserializeJson(ref reader, options);
          break;

        case "implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ImplementationGuide = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ImplementationGuide.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ImplementationGuide.Count == 0)
          {
            ImplementationGuide = null;
          }

          break;

        case "_implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ImplementationGuide = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_ImplementationGuide = new fhirCsR5.Models.Element();
            obj_ImplementationGuide.DeserializeJson(ref reader, options);
            _ImplementationGuide.Add(obj_ImplementationGuide);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ImplementationGuide.Count == 0)
          {
            _ImplementationGuide = null;
          }

          break;

        case "imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Imports = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Imports.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Imports.Count == 0)
          {
            Imports = null;
          }

          break;

        case "_imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Imports = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Imports = new fhirCsR5.Models.Element();
            obj_Imports.DeserializeJson(ref reader, options);
            _Imports.Add(obj_Imports);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Imports.Count == 0)
          {
            _Imports = null;
          }

          break;

        case "instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instantiates = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Instantiates.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instantiates.Count == 0)
          {
            Instantiates = null;
          }

          break;

        case "_instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Instantiates = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Instantiates = new fhirCsR5.Models.Element();
            obj_Instantiates.DeserializeJson(ref reader, options);
            _Instantiates.Add(obj_Instantiates);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Instantiates.Count == 0)
          {
            _Instantiates = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objJurisdiction = new fhirCsR5.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR5.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PatchFormat = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PatchFormat.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PatchFormat.Count == 0)
          {
            PatchFormat = null;
          }

          break;

        case "_patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PatchFormat = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_PatchFormat = new fhirCsR5.Models.Element();
            obj_PatchFormat.DeserializeJson(ref reader, options);
            _PatchFormat.Add(obj_PatchFormat);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PatchFormat.Count == 0)
          {
            _PatchFormat = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR5.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR5.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "rest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rest = new List<CapabilityStatement2Rest>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CapabilityStatement2Rest objRest = new fhirCsR5.Models.CapabilityStatement2Rest();
            objRest.DeserializeJson(ref reader, options);
            Rest.Add(objRest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rest.Count == 0)
          {
            Rest = null;
          }

          break;

        case "software":
          Software = new fhirCsR5.Models.CapabilityStatement2Software();
          Software.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement2.format field
  /// </summary>
  public static class CapabilityStatement2FormatCodes {
    public const string XML = "xml";
    public const string JSON = "json";
    public const string TTL = "ttl";
    public const string MIME = "MIME";
  }
  /// <summary>
  /// Code Values for the CapabilityStatement2.kind field
  /// </summary>
  public static class CapabilityStatement2KindCodes {
    public const string INSTANCE = "instance";
    public const string CAPABILITY = "capability";
    public const string REQUIREMENTS = "requirements";
  }
  /// <summary>
  /// Code Values for the CapabilityStatement2.status field
  /// </summary>
  public static class CapabilityStatement2StatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
