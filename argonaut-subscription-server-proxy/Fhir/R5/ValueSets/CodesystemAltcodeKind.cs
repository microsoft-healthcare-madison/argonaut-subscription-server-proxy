// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using fhirCsR5.Models;

namespace fhirCsR5.ValueSets
{
  /// <summary>
  /// Description Needed Here
  /// </summary>
  public static class CodesystemAltcodeKindCodes
  {
    /// <summary>
    /// The code is an alternative code that can be used in any of the circumstances that the primary code can be used.
    /// </summary>
    public static readonly Coding AlternateCode = new Coding
    {
      Code = "alternate",
      Display = "Alternate Code",
      System = "http://hl7.org/fhir/codesystem-altcode-kind"
    };
    /// <summary>
    /// The code is an alternative to be used when a case insensitive code is required (when the primary codes are case sensitive).
    /// </summary>
    public static readonly Coding CaseInsensitive = new Coding
    {
      Code = "case-insensitive",
      Display = "Case Insensitive",
      System = "http://hl7.org/fhir/codesystem-altcode-kind"
    };
    /// <summary>
    /// The code is an alternative to be used when a case sensitive code is required (when the primary codes are case insensitive).
    /// </summary>
    public static readonly Coding CaseSensitive = new Coding
    {
      Code = "case-sensitive",
      Display = "Case Sensitive",
      System = "http://hl7.org/fhir/codesystem-altcode-kind"
    };
    /// <summary>
    /// The code should no longer be used, but was used in the past.
    /// </summary>
    public static readonly Coding Deprecated = new Coding
    {
      Code = "deprecated",
      Display = "Deprecated",
      System = "http://hl7.org/fhir/codesystem-altcode-kind"
    };
    /// <summary>
    /// The code is an alternative for the primary code that is built using the expression grammar defined by the code system.
    /// </summary>
    public static readonly Coding Expression = new Coding
    {
      Code = "expression",
      Display = "Expression",
      System = "http://hl7.org/fhir/codesystem-altcode-kind"
    };

    /// <summary>
    /// Literal for code: AlternateCode
    /// </summary>
    public const string LiteralAlternateCode = "alternate";

    /// <summary>
    /// Literal for code: CaseInsensitive
    /// </summary>
    public const string LiteralCaseInsensitive = "case-insensitive";

    /// <summary>
    /// Literal for code: CaseSensitive
    /// </summary>
    public const string LiteralCaseSensitive = "case-sensitive";

    /// <summary>
    /// Literal for code: Deprecated
    /// </summary>
    public const string LiteralDeprecated = "deprecated";

    /// <summary>
    /// Literal for code: Expression
    /// </summary>
    public const string LiteralExpression = "expression";
  };
}
