// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.3.0
  // Option: "NAMESPACE" = "fhirCsR4B"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR4B.Serialization;

namespace fhirCsR4B.Models
{
  /// <summary>
  /// A human-readable display of the citation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationSummary>))]
  public class CitationSummary : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Format for display of the citation.
    /// </summary>
    public CodeableConcept Style { get; set; }
    /// <summary>
    /// The human-readable display of the citation.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Style != null)
      {
        writer.WritePropertyName("style");
        Style.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "style":
          Style = new fhirCsR4B.Models.CodeableConcept();
          Style.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4B.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The assignment to an organizing scheme.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationClassification>))]
  public class CitationClassification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specific classification value.
    /// </summary>
    public List<CodeableConcept> Classifier { get; set; }
    /// <summary>
    /// The kind of classifier (e.g. publication type, keyword).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Classifier != null) && (Classifier.Count != 0))
      {
        writer.WritePropertyName("classifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassifier in Classifier)
        {
          valClassifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objClassifier = new fhirCsR4B.Models.CodeableConcept();
            objClassifier.DeserializeJson(ref reader, options);
            Classifier.Add(objClassifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classifier.Count == 0)
          {
            Classifier = null;
          }

          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An effective date or period for a status of the citation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationStatusDate>))]
  public class CitationStatusDate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Classification of the status.
    /// </summary>
    public CodeableConcept Activity { get; set; }
    /// <summary>
    /// Either occurred or expected.
    /// </summary>
    public bool? Actual { get; set; }
    /// <summary>
    /// Extension container element for Actual
    /// </summary>
    public Element _Actual { get; set; }
    /// <summary>
    /// For an instance, place the same value in both start and end elements.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Activity != null)
      {
        writer.WritePropertyName("activity");
        Activity.SerializeJson(writer, options);
      }

      if (Actual != null)
      {
        writer.WriteBoolean("actual", (bool)Actual!);
      }

      if (_Actual != null)
      {
        writer.WritePropertyName("_actual");
        _Actual.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "activity":
          Activity = new fhirCsR4B.Models.CodeableConcept();
          Activity.DeserializeJson(ref reader, options);
          break;

        case "actual":
          Actual = reader.GetBoolean();
          break;

        case "_actual":
          _Actual = new fhirCsR4B.Models.Element();
          _Actual.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR4B.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Artifact related to the Citation Resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationRelatesTo>))]
  public class CitationRelatesTo : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How the Citation resource relates to the target artifact.
    /// </summary>
    public CodeableConcept RelationshipType { get; set; }
    /// <summary>
    /// The article or artifact that the Citation Resource is related to.
    /// </summary>
    public string TargetUri { get; set; }
    /// <summary>
    /// Extension container element for TargetUri
    /// </summary>
    public Element _TargetUri { get; set; }
    /// <summary>
    /// The article or artifact that the Citation Resource is related to.
    /// </summary>
    public Identifier TargetIdentifier { get; set; }
    /// <summary>
    /// The article or artifact that the Citation Resource is related to.
    /// </summary>
    public Reference TargetReference { get; set; }
    /// <summary>
    /// The article or artifact that the Citation Resource is related to.
    /// </summary>
    public Attachment TargetAttachment { get; set; }
    /// <summary>
    /// The clasification of the related artifact.
    /// </summary>
    public List<CodeableConcept> TargetClassifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (RelationshipType != null)
      {
        writer.WritePropertyName("relationshipType");
        RelationshipType.SerializeJson(writer, options);
      }

      if ((TargetClassifier != null) && (TargetClassifier.Count != 0))
      {
        writer.WritePropertyName("targetClassifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valTargetClassifier in TargetClassifier)
        {
          valTargetClassifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(TargetUri))
      {
        writer.WriteString("targetUri", (string)TargetUri!);
      }

      if (_TargetUri != null)
      {
        writer.WritePropertyName("_targetUri");
        _TargetUri.SerializeJson(writer, options);
      }

      if (TargetIdentifier != null)
      {
        writer.WritePropertyName("targetIdentifier");
        TargetIdentifier.SerializeJson(writer, options);
      }

      if (TargetReference != null)
      {
        writer.WritePropertyName("targetReference");
        TargetReference.SerializeJson(writer, options);
      }

      if (TargetAttachment != null)
      {
        writer.WritePropertyName("targetAttachment");
        TargetAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relationshipType":
          RelationshipType = new fhirCsR4B.Models.CodeableConcept();
          RelationshipType.DeserializeJson(ref reader, options);
          break;

        case "targetUri":
          TargetUri = reader.GetString();
          break;

        case "_targetUri":
          _TargetUri = new fhirCsR4B.Models.Element();
          _TargetUri.DeserializeJson(ref reader, options);
          break;

        case "targetIdentifier":
          TargetIdentifier = new fhirCsR4B.Models.Identifier();
          TargetIdentifier.DeserializeJson(ref reader, options);
          break;

        case "targetReference":
          TargetReference = new fhirCsR4B.Models.Reference();
          TargetReference.DeserializeJson(ref reader, options);
          break;

        case "targetAttachment":
          TargetAttachment = new fhirCsR4B.Models.Attachment();
          TargetAttachment.DeserializeJson(ref reader, options);
          break;

        case "targetClassifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TargetClassifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objTargetClassifier = new fhirCsR4B.Models.CodeableConcept();
            objTargetClassifier.DeserializeJson(ref reader, options);
            TargetClassifier.Add(objTargetClassifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TargetClassifier.Count == 0)
          {
            TargetClassifier = null;
          }

          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The defined version of the cited artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactVersion>))]
  public class CitationCitedArtifactVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Citation for the main version of the cited artifact.
    /// </summary>
    public Reference BaseCitation { get; set; }
    /// <summary>
    /// The version number or other version identifier.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (BaseCitation != null)
      {
        writer.WritePropertyName("baseCitation");
        BaseCitation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "baseCitation":
          BaseCitation = new fhirCsR4B.Models.Reference();
          BaseCitation.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4B.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An effective date or period for a status of the cited artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactStatusDate>))]
  public class CitationCitedArtifactStatusDate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Classification of the status.
    /// </summary>
    public CodeableConcept Activity { get; set; }
    /// <summary>
    /// Either occurred or expected.
    /// </summary>
    public bool? Actual { get; set; }
    /// <summary>
    /// Extension container element for Actual
    /// </summary>
    public Element _Actual { get; set; }
    /// <summary>
    /// For an instance, place the same value in both start and end elements.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Activity != null)
      {
        writer.WritePropertyName("activity");
        Activity.SerializeJson(writer, options);
      }

      if (Actual != null)
      {
        writer.WriteBoolean("actual", (bool)Actual!);
      }

      if (_Actual != null)
      {
        writer.WritePropertyName("_actual");
        _Actual.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "activity":
          Activity = new fhirCsR4B.Models.CodeableConcept();
          Activity.DeserializeJson(ref reader, options);
          break;

        case "actual":
          Actual = reader.GetBoolean();
          break;

        case "_actual":
          _Actual = new fhirCsR4B.Models.Element();
          _Actual.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR4B.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The title details of the article or artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactTitle>))]
  public class CitationCitedArtifactTitle : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to express the specific language.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// The title of the article or artifact.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Used to express the reason or specific aspect for the title.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = new fhirCsR4B.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4B.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objType = new fhirCsR4B.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Summary of the article or artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactAbstract>))]
  public class CitationCitedArtifactAbstract : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Copyright notice for the abstract.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Used to express the specific language.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// Abstract content.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Used to express the reason or specific aspect for the abstract.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4B.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = new fhirCsR4B.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4B.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The component of the article or artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactPart>))]
  public class CitationCitedArtifactPart : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The citation for the full article or artifact.
    /// </summary>
    public Reference BaseCitation { get; set; }
    /// <summary>
    /// The kind of component.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The specification of the component.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (BaseCitation != null)
      {
        writer.WritePropertyName("baseCitation");
        BaseCitation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "baseCitation":
          BaseCitation = new fhirCsR4B.Models.Reference();
          BaseCitation.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4B.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The artifact related to the cited artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactRelatesTo>))]
  public class CitationCitedArtifactRelatesTo : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How the cited artifact relates to the target artifact.
    /// </summary>
    public CodeableConcept RelationshipType { get; set; }
    /// <summary>
    /// The article or artifact that the cited artifact is related to.
    /// </summary>
    public string TargetUri { get; set; }
    /// <summary>
    /// Extension container element for TargetUri
    /// </summary>
    public Element _TargetUri { get; set; }
    /// <summary>
    /// The article or artifact that the cited artifact is related to.
    /// </summary>
    public Identifier TargetIdentifier { get; set; }
    /// <summary>
    /// The article or artifact that the cited artifact is related to.
    /// </summary>
    public Reference TargetReference { get; set; }
    /// <summary>
    /// The article or artifact that the cited artifact is related to.
    /// </summary>
    public Attachment TargetAttachment { get; set; }
    /// <summary>
    /// The clasification of the related artifact.
    /// </summary>
    public List<CodeableConcept> TargetClassifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (RelationshipType != null)
      {
        writer.WritePropertyName("relationshipType");
        RelationshipType.SerializeJson(writer, options);
      }

      if ((TargetClassifier != null) && (TargetClassifier.Count != 0))
      {
        writer.WritePropertyName("targetClassifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valTargetClassifier in TargetClassifier)
        {
          valTargetClassifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(TargetUri))
      {
        writer.WriteString("targetUri", (string)TargetUri!);
      }

      if (_TargetUri != null)
      {
        writer.WritePropertyName("_targetUri");
        _TargetUri.SerializeJson(writer, options);
      }

      if (TargetIdentifier != null)
      {
        writer.WritePropertyName("targetIdentifier");
        TargetIdentifier.SerializeJson(writer, options);
      }

      if (TargetReference != null)
      {
        writer.WritePropertyName("targetReference");
        TargetReference.SerializeJson(writer, options);
      }

      if (TargetAttachment != null)
      {
        writer.WritePropertyName("targetAttachment");
        TargetAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relationshipType":
          RelationshipType = new fhirCsR4B.Models.CodeableConcept();
          RelationshipType.DeserializeJson(ref reader, options);
          break;

        case "targetUri":
          TargetUri = reader.GetString();
          break;

        case "_targetUri":
          _TargetUri = new fhirCsR4B.Models.Element();
          _TargetUri.DeserializeJson(ref reader, options);
          break;

        case "targetIdentifier":
          TargetIdentifier = new fhirCsR4B.Models.Identifier();
          TargetIdentifier.DeserializeJson(ref reader, options);
          break;

        case "targetReference":
          TargetReference = new fhirCsR4B.Models.Reference();
          TargetReference.DeserializeJson(ref reader, options);
          break;

        case "targetAttachment":
          TargetAttachment = new fhirCsR4B.Models.Attachment();
          TargetAttachment.DeserializeJson(ref reader, options);
          break;

        case "targetClassifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TargetClassifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objTargetClassifier = new fhirCsR4B.Models.CodeableConcept();
            objTargetClassifier.DeserializeJson(ref reader, options);
            TargetClassifier.Add(objTargetClassifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TargetClassifier.Count == 0)
          {
            TargetClassifier = null;
          }

          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The collection the cited article or artifact is published in.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactPublicationFormPublishedIn>))]
  public class CitationCitedArtifactPublicationFormPublishedIn : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Name of the publisher.
    /// </summary>
    public Reference Publisher { get; set; }
    /// <summary>
    /// Geographic location of the publisher.
    /// </summary>
    public string PublisherLocation { get; set; }
    /// <summary>
    /// Extension container element for PublisherLocation
    /// </summary>
    public Element _PublisherLocation { get; set; }
    /// <summary>
    /// ClinicalTrials.gov is a name of a database.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Journals and newspapers are coded as Periodical.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Publisher != null)
      {
        writer.WritePropertyName("publisher");
        Publisher.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PublisherLocation))
      {
        writer.WriteString("publisherLocation", (string)PublisherLocation!);
      }

      if (_PublisherLocation != null)
      {
        writer.WritePropertyName("_publisherLocation");
        _PublisherLocation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Identifier objIdentifier = new fhirCsR4B.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "publisher":
          Publisher = new fhirCsR4B.Models.Reference();
          Publisher.DeserializeJson(ref reader, options);
          break;

        case "publisherLocation":
          PublisherLocation = reader.GetString();
          break;

        case "_publisherLocation":
          _PublisherLocation = new fhirCsR4B.Models.Element();
          _PublisherLocation.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4B.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Defining the date on which the issue of the journal was published.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication>))]
  public class CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Date on which the issue of the journal was published.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Day on which the issue of the journal was published.
    /// </summary>
    public string Day { get; set; }
    /// <summary>
    /// Extension container element for Day
    /// </summary>
    public Element _Day { get; set; }
    /// <summary>
    /// Month on which the issue of the journal was published.
    /// </summary>
    public string Month { get; set; }
    /// <summary>
    /// Extension container element for Month
    /// </summary>
    public Element _Month { get; set; }
    /// <summary>
    /// Spring, Summer, Fall/Autumn, Winter.
    /// </summary>
    public string Season { get; set; }
    /// <summary>
    /// Extension container element for Season
    /// </summary>
    public Element _Season { get; set; }
    /// <summary>
    /// Text representation of the date of which the issue of the journal was published.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Year on which the issue of the journal was published.
    /// </summary>
    public string Year { get; set; }
    /// <summary>
    /// Extension container element for Year
    /// </summary>
    public Element _Year { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Year))
      {
        writer.WriteString("year", (string)Year!);
      }

      if (_Year != null)
      {
        writer.WritePropertyName("_year");
        _Year.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Month))
      {
        writer.WriteString("month", (string)Month!);
      }

      if (_Month != null)
      {
        writer.WritePropertyName("_month");
        _Month.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Day))
      {
        writer.WriteString("day", (string)Day!);
      }

      if (_Day != null)
      {
        writer.WritePropertyName("_day");
        _Day.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Season))
      {
        writer.WriteString("season", (string)Season!);
      }

      if (_Season != null)
      {
        writer.WritePropertyName("_season");
        _Season.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4B.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "day":
          Day = reader.GetString();
          break;

        case "_day":
          _Day = new fhirCsR4B.Models.Element();
          _Day.DeserializeJson(ref reader, options);
          break;

        case "month":
          Month = reader.GetString();
          break;

        case "_month":
          _Month = new fhirCsR4B.Models.Element();
          _Month.DeserializeJson(ref reader, options);
          break;

        case "season":
          Season = reader.GetString();
          break;

        case "_season":
          _Season = new fhirCsR4B.Models.Element();
          _Season.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4B.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "year":
          Year = reader.GetString();
          break;

        case "_year":
          _Year = new fhirCsR4B.Models.Element();
          _Year.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The specific issue in which the cited article resides.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactPublicationFormPeriodicRelease>))]
  public class CitationCitedArtifactPublicationFormPeriodicRelease : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// National Library of Medicine uses the codes "Internet" or "Print".
    /// </summary>
    public CodeableConcept CitedMedium { get; set; }
    /// <summary>
    /// Defining the date on which the issue of the journal was published.
    /// </summary>
    public CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication DateOfPublication { get; set; }
    /// <summary>
    /// Issue, part or supplement of journal in which the article is published.
    /// </summary>
    public string Issue { get; set; }
    /// <summary>
    /// Extension container element for Issue
    /// </summary>
    public Element _Issue { get; set; }
    /// <summary>
    /// Volume number of journal in which the article is published.
    /// </summary>
    public string Volume { get; set; }
    /// <summary>
    /// Extension container element for Volume
    /// </summary>
    public Element _Volume { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (CitedMedium != null)
      {
        writer.WritePropertyName("citedMedium");
        CitedMedium.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Volume))
      {
        writer.WriteString("volume", (string)Volume!);
      }

      if (_Volume != null)
      {
        writer.WritePropertyName("_volume");
        _Volume.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issue))
      {
        writer.WriteString("issue", (string)Issue!);
      }

      if (_Issue != null)
      {
        writer.WritePropertyName("_issue");
        _Issue.SerializeJson(writer, options);
      }

      if (DateOfPublication != null)
      {
        writer.WritePropertyName("dateOfPublication");
        DateOfPublication.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "citedMedium":
          CitedMedium = new fhirCsR4B.Models.CodeableConcept();
          CitedMedium.DeserializeJson(ref reader, options);
          break;

        case "dateOfPublication":
          DateOfPublication = new fhirCsR4B.Models.CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication();
          DateOfPublication.DeserializeJson(ref reader, options);
          break;

        case "issue":
          Issue = reader.GetString();
          break;

        case "_issue":
          _Issue = new fhirCsR4B.Models.Element();
          _Issue.DeserializeJson(ref reader, options);
          break;

        case "volume":
          Volume = reader.GetString();
          break;

        case "_volume":
          _Volume = new fhirCsR4B.Models.Element();
          _Volume.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactPublicationForm>))]
  public class CitationCitedArtifactPublicationForm : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Entry number or identifier for inclusion in a database.
    /// </summary>
    public string AccessionNumber { get; set; }
    /// <summary>
    /// Extension container element for AccessionNumber
    /// </summary>
    public Element _AccessionNumber { get; set; }
    /// <summary>
    /// The date the article was added to the database, or the date the article was released (which may differ from the journal issue publication date).
    /// </summary>
    public string ArticleDate { get; set; }
    /// <summary>
    /// Extension container element for ArticleDate
    /// </summary>
    public Element _ArticleDate { get; set; }
    /// <summary>
    /// Copyright notice for the full article or artifact.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Used for isolated representation of first page.
    /// </summary>
    public string FirstPage { get; set; }
    /// <summary>
    /// Extension container element for FirstPage
    /// </summary>
    public Element _FirstPage { get; set; }
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    public List<CodeableConcept> Language { get; set; }
    /// <summary>
    /// Used for isolated representation of last page.
    /// </summary>
    public string LastPage { get; set; }
    /// <summary>
    /// Extension container element for LastPage
    /// </summary>
    public Element _LastPage { get; set; }
    /// <summary>
    /// The date the article was last revised or updated in the database.
    /// </summary>
    public string LastRevisionDate { get; set; }
    /// <summary>
    /// Extension container element for LastRevisionDate
    /// </summary>
    public Element _LastRevisionDate { get; set; }
    /// <summary>
    /// Actual or approximate number of pages or screens.
    /// </summary>
    public string PageCount { get; set; }
    /// <summary>
    /// Extension container element for PageCount
    /// </summary>
    public Element _PageCount { get; set; }
    /// <summary>
    /// Used for full display of pagination.
    /// </summary>
    public string PageString { get; set; }
    /// <summary>
    /// Extension container element for PageString
    /// </summary>
    public Element _PageString { get; set; }
    /// <summary>
    /// The specific issue in which the cited article resides.
    /// </summary>
    public CitationCitedArtifactPublicationFormPeriodicRelease PeriodicRelease { get; set; }
    /// <summary>
    /// The collection the cited article or artifact is published in.
    /// </summary>
    public CitationCitedArtifactPublicationFormPublishedIn PublishedIn { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (PublishedIn != null)
      {
        writer.WritePropertyName("publishedIn");
        PublishedIn.SerializeJson(writer, options);
      }

      if (PeriodicRelease != null)
      {
        writer.WritePropertyName("periodicRelease");
        PeriodicRelease.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ArticleDate))
      {
        writer.WriteString("articleDate", (string)ArticleDate!);
      }

      if (_ArticleDate != null)
      {
        writer.WritePropertyName("_articleDate");
        _ArticleDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastRevisionDate))
      {
        writer.WriteString("lastRevisionDate", (string)LastRevisionDate!);
      }

      if (_LastRevisionDate != null)
      {
        writer.WritePropertyName("_lastRevisionDate");
        _LastRevisionDate.SerializeJson(writer, options);
      }

      if ((Language != null) && (Language.Count != 0))
      {
        writer.WritePropertyName("language");
        writer.WriteStartArray();

        foreach (CodeableConcept valLanguage in Language)
        {
          valLanguage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(AccessionNumber))
      {
        writer.WriteString("accessionNumber", (string)AccessionNumber!);
      }

      if (_AccessionNumber != null)
      {
        writer.WritePropertyName("_accessionNumber");
        _AccessionNumber.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PageString))
      {
        writer.WriteString("pageString", (string)PageString!);
      }

      if (_PageString != null)
      {
        writer.WritePropertyName("_pageString");
        _PageString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(FirstPage))
      {
        writer.WriteString("firstPage", (string)FirstPage!);
      }

      if (_FirstPage != null)
      {
        writer.WritePropertyName("_firstPage");
        _FirstPage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastPage))
      {
        writer.WriteString("lastPage", (string)LastPage!);
      }

      if (_LastPage != null)
      {
        writer.WritePropertyName("_lastPage");
        _LastPage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PageCount))
      {
        writer.WriteString("pageCount", (string)PageCount!);
      }

      if (_PageCount != null)
      {
        writer.WritePropertyName("_pageCount");
        _PageCount.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accessionNumber":
          AccessionNumber = reader.GetString();
          break;

        case "_accessionNumber":
          _AccessionNumber = new fhirCsR4B.Models.Element();
          _AccessionNumber.DeserializeJson(ref reader, options);
          break;

        case "articleDate":
          ArticleDate = reader.GetString();
          break;

        case "_articleDate":
          _ArticleDate = new fhirCsR4B.Models.Element();
          _ArticleDate.DeserializeJson(ref reader, options);
          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4B.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "firstPage":
          FirstPage = reader.GetString();
          break;

        case "_firstPage":
          _FirstPage = new fhirCsR4B.Models.Element();
          _FirstPage.DeserializeJson(ref reader, options);
          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Language = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objLanguage = new fhirCsR4B.Models.CodeableConcept();
            objLanguage.DeserializeJson(ref reader, options);
            Language.Add(objLanguage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Language.Count == 0)
          {
            Language = null;
          }

          break;

        case "lastPage":
          LastPage = reader.GetString();
          break;

        case "_lastPage":
          _LastPage = new fhirCsR4B.Models.Element();
          _LastPage.DeserializeJson(ref reader, options);
          break;

        case "lastRevisionDate":
          LastRevisionDate = reader.GetString();
          break;

        case "_lastRevisionDate":
          _LastRevisionDate = new fhirCsR4B.Models.Element();
          _LastRevisionDate.DeserializeJson(ref reader, options);
          break;

        case "pageCount":
          PageCount = reader.GetString();
          break;

        case "_pageCount":
          _PageCount = new fhirCsR4B.Models.Element();
          _PageCount.DeserializeJson(ref reader, options);
          break;

        case "pageString":
          PageString = reader.GetString();
          break;

        case "_pageString":
          _PageString = new fhirCsR4B.Models.Element();
          _PageString.DeserializeJson(ref reader, options);
          break;

        case "periodicRelease":
          PeriodicRelease = new fhirCsR4B.Models.CitationCitedArtifactPublicationFormPeriodicRelease();
          PeriodicRelease.DeserializeJson(ref reader, options);
          break;

        case "publishedIn":
          PublishedIn = new fhirCsR4B.Models.CitationCitedArtifactPublicationFormPublishedIn();
          PublishedIn.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Used for any URL for the article or artifact cited.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactWebLocation>))]
  public class CitationCitedArtifactWebLocation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Code the reason for different URLs, e.g. abstract and full-text.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Persistent URLs, like doi, are preferred.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4B.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Provenance and copyright of classification.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactClassificationWhoClassified>))]
  public class CitationCitedArtifactClassificationWhoClassified : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Rights management statement for the classification.
    /// </summary>
    public string ClassifierCopyright { get; set; }
    /// <summary>
    /// Extension container element for ClassifierCopyright
    /// </summary>
    public Element _ClassifierCopyright { get; set; }
    /// <summary>
    /// Acceptable to re-use the classification.
    /// </summary>
    public bool? FreeToShare { get; set; }
    /// <summary>
    /// Extension container element for FreeToShare
    /// </summary>
    public Element _FreeToShare { get; set; }
    /// <summary>
    /// Organization who created the classification.
    /// </summary>
    public Reference Organization { get; set; }
    /// <summary>
    /// Person who created the classification.
    /// </summary>
    public Reference Person { get; set; }
    /// <summary>
    /// The publisher of the classification, not the publisher of the article or artifact being cited.
    /// </summary>
    public Reference Publisher { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Person != null)
      {
        writer.WritePropertyName("person");
        Person.SerializeJson(writer, options);
      }

      if (Organization != null)
      {
        writer.WritePropertyName("organization");
        Organization.SerializeJson(writer, options);
      }

      if (Publisher != null)
      {
        writer.WritePropertyName("publisher");
        Publisher.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ClassifierCopyright))
      {
        writer.WriteString("classifierCopyright", (string)ClassifierCopyright!);
      }

      if (_ClassifierCopyright != null)
      {
        writer.WritePropertyName("_classifierCopyright");
        _ClassifierCopyright.SerializeJson(writer, options);
      }

      if (FreeToShare != null)
      {
        writer.WriteBoolean("freeToShare", (bool)FreeToShare!);
      }

      if (_FreeToShare != null)
      {
        writer.WritePropertyName("_freeToShare");
        _FreeToShare.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classifierCopyright":
          ClassifierCopyright = reader.GetString();
          break;

        case "_classifierCopyright":
          _ClassifierCopyright = new fhirCsR4B.Models.Element();
          _ClassifierCopyright.DeserializeJson(ref reader, options);
          break;

        case "freeToShare":
          FreeToShare = reader.GetBoolean();
          break;

        case "_freeToShare":
          _FreeToShare = new fhirCsR4B.Models.Element();
          _FreeToShare.DeserializeJson(ref reader, options);
          break;

        case "organization":
          Organization = new fhirCsR4B.Models.Reference();
          Organization.DeserializeJson(ref reader, options);
          break;

        case "person":
          Person = new fhirCsR4B.Models.Reference();
          Person.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = new fhirCsR4B.Models.Reference();
          Publisher.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The assignment to an organizing scheme.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactClassification>))]
  public class CitationCitedArtifactClassification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specific classification value.
    /// </summary>
    public List<CodeableConcept> Classifier { get; set; }
    /// <summary>
    /// The kind of classifier (e.g. publication type, keyword).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Provenance and copyright of classification.
    /// </summary>
    public CitationCitedArtifactClassificationWhoClassified WhoClassified { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Classifier != null) && (Classifier.Count != 0))
      {
        writer.WritePropertyName("classifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassifier in Classifier)
        {
          valClassifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (WhoClassified != null)
      {
        writer.WritePropertyName("whoClassified");
        WhoClassified.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objClassifier = new fhirCsR4B.Models.CodeableConcept();
            objClassifier.DeserializeJson(ref reader, options);
            Classifier.Add(objClassifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classifier.Count == 0)
          {
            Classifier = null;
          }

          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "whoClassified":
          WhoClassified = new fhirCsR4B.Models.CitationCitedArtifactClassificationWhoClassified();
          WhoClassified.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Organization affiliated with the entity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactContributorshipEntryAffiliationInfo>))]
  public class CitationCitedArtifactContributorshipEntryAffiliationInfo : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Display for the organization.
    /// </summary>
    public string Affiliation { get; set; }
    /// <summary>
    /// Extension container element for Affiliation
    /// </summary>
    public Element _Affiliation { get; set; }
    /// <summary>
    /// Identifier for the organization.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Role within the organization, such as professional title.
    /// </summary>
    public string Role { get; set; }
    /// <summary>
    /// Extension container element for Role
    /// </summary>
    public Element _Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Affiliation))
      {
        writer.WriteString("affiliation", (string)Affiliation!);
      }

      if (_Affiliation != null)
      {
        writer.WritePropertyName("_affiliation");
        _Affiliation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Role))
      {
        writer.WriteString("role", (string)Role!);
      }

      if (_Role != null)
      {
        writer.WritePropertyName("_role");
        _Role.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "affiliation":
          Affiliation = reader.GetString();
          break;

        case "_affiliation":
          _Affiliation = new fhirCsR4B.Models.Element();
          _Affiliation.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Identifier objIdentifier = new fhirCsR4B.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "role":
          Role = reader.GetString();
          break;

        case "_role":
          _Role = new fhirCsR4B.Models.Element();
          _Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Contributions with accounting for time or number.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactContributorshipEntryContributionInstance>))]
  public class CitationCitedArtifactContributorshipEntryContributionInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The time that the contribution was made.
    /// </summary>
    public string Time { get; set; }
    /// <summary>
    /// Extension container element for Time
    /// </summary>
    public Element _Time { get; set; }
    /// <summary>
    /// The specific contribution.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Time))
      {
        writer.WriteString("time", (string)Time!);
      }

      if (_Time != null)
      {
        writer.WritePropertyName("_time");
        _Time.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "time":
          Time = reader.GetString();
          break;

        case "_time":
          _Time = new fhirCsR4B.Models.Element();
          _Time.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Used to report contributorship in individualized ways.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactContributorshipEntry>))]
  public class CitationCitedArtifactContributorshipEntry : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Physical mailing address for the author or contributor.
    /// </summary>
    public List<Address> Address { get; set; }
    /// <summary>
    /// Organization affiliated with the entity.
    /// </summary>
    public List<CitationCitedArtifactContributorshipEntryAffiliationInfo> AffiliationInfo { get; set; }
    /// <summary>
    /// This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
    /// </summary>
    public string CollectiveName { get; set; }
    /// <summary>
    /// Extension container element for CollectiveName
    /// </summary>
    public Element _CollectiveName { get; set; }
    /// <summary>
    /// Contributions with accounting for time or number.
    /// </summary>
    public List<CitationCitedArtifactContributorshipEntryContributionInstance> ContributionInstance { get; set; }
    /// <summary>
    /// The CreDiT taxonomy provides a way to encode contribution information inside article XML files. The purpose of CRediT is to provide transparency in contributions to scholarly published work, to enable improved systems of attribution, credit, and accountability.
    /// </summary>
    public List<CodeableConcept> ContributionType { get; set; }
    /// <summary>
    /// Indication of which contributor is the corresponding contributor for the role.
    /// </summary>
    public bool? CorrespondingContact { get; set; }
    /// <summary>
    /// Extension container element for CorrespondingContact
    /// </summary>
    public Element _CorrespondingContact { get; set; }
    /// <summary>
    /// Avoids needing to disambiguate common last names or changes of name. ORCID is commonly used as author identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
    /// </summary>
    public string Initials { get; set; }
    /// <summary>
    /// Extension container element for Initials
    /// </summary>
    public Element _Initials { get; set; }
    /// <summary>
    /// Used to code order of authors.
    /// </summary>
    public uint? ListOrder { get; set; }
    /// <summary>
    /// humanName.family can match MEDLINE-based lastName (used for surname or single name), humanName.given can match MEDLINE-based forename (used for remainder of name except for suffix), humanName.suffix can match MEDLINE-based suffix (eg 2nd, 3rd, Jr, Sr).
    /// </summary>
    public HumanName Name { get; set; }
    /// <summary>
    /// The role of the contributor (e.g. author, editor, reviewer).
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Email or telephone contact methods for the author or contributor.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Name != null)
      {
        writer.WritePropertyName("name");
        Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Initials))
      {
        writer.WriteString("initials", (string)Initials!);
      }

      if (_Initials != null)
      {
        writer.WritePropertyName("_initials");
        _Initials.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CollectiveName))
      {
        writer.WriteString("collectiveName", (string)CollectiveName!);
      }

      if (_CollectiveName != null)
      {
        writer.WritePropertyName("_collectiveName");
        _CollectiveName.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AffiliationInfo != null) && (AffiliationInfo.Count != 0))
      {
        writer.WritePropertyName("affiliationInfo");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactContributorshipEntryAffiliationInfo valAffiliationInfo in AffiliationInfo)
        {
          valAffiliationInfo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Address != null) && (Address.Count != 0))
      {
        writer.WritePropertyName("address");
        writer.WriteStartArray();

        foreach (Address valAddress in Address)
        {
          valAddress.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ContributionType != null) && (ContributionType.Count != 0))
      {
        writer.WritePropertyName("contributionType");
        writer.WriteStartArray();

        foreach (CodeableConcept valContributionType in ContributionType)
        {
          valContributionType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if ((ContributionInstance != null) && (ContributionInstance.Count != 0))
      {
        writer.WritePropertyName("contributionInstance");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactContributorshipEntryContributionInstance valContributionInstance in ContributionInstance)
        {
          valContributionInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (CorrespondingContact != null)
      {
        writer.WriteBoolean("correspondingContact", (bool)CorrespondingContact!);
      }

      if (_CorrespondingContact != null)
      {
        writer.WritePropertyName("_correspondingContact");
        _CorrespondingContact.SerializeJson(writer, options);
      }

      if (ListOrder != null)
      {
        writer.WriteNumber("listOrder", (uint)ListOrder!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Address = new List<Address>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Address objAddress = new fhirCsR4B.Models.Address();
            objAddress.DeserializeJson(ref reader, options);
            Address.Add(objAddress);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Address.Count == 0)
          {
            Address = null;
          }

          break;

        case "affiliationInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AffiliationInfo = new List<CitationCitedArtifactContributorshipEntryAffiliationInfo>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactContributorshipEntryAffiliationInfo objAffiliationInfo = new fhirCsR4B.Models.CitationCitedArtifactContributorshipEntryAffiliationInfo();
            objAffiliationInfo.DeserializeJson(ref reader, options);
            AffiliationInfo.Add(objAffiliationInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AffiliationInfo.Count == 0)
          {
            AffiliationInfo = null;
          }

          break;

        case "collectiveName":
          CollectiveName = reader.GetString();
          break;

        case "_collectiveName":
          _CollectiveName = new fhirCsR4B.Models.Element();
          _CollectiveName.DeserializeJson(ref reader, options);
          break;

        case "contributionInstance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContributionInstance = new List<CitationCitedArtifactContributorshipEntryContributionInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactContributorshipEntryContributionInstance objContributionInstance = new fhirCsR4B.Models.CitationCitedArtifactContributorshipEntryContributionInstance();
            objContributionInstance.DeserializeJson(ref reader, options);
            ContributionInstance.Add(objContributionInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContributionInstance.Count == 0)
          {
            ContributionInstance = null;
          }

          break;

        case "contributionType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContributionType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objContributionType = new fhirCsR4B.Models.CodeableConcept();
            objContributionType.DeserializeJson(ref reader, options);
            ContributionType.Add(objContributionType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContributionType.Count == 0)
          {
            ContributionType = null;
          }

          break;

        case "correspondingContact":
          CorrespondingContact = reader.GetBoolean();
          break;

        case "_correspondingContact":
          _CorrespondingContact = new fhirCsR4B.Models.Element();
          _CorrespondingContact.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Identifier objIdentifier = new fhirCsR4B.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "initials":
          Initials = reader.GetString();
          break;

        case "_initials":
          _Initials = new fhirCsR4B.Models.Element();
          _Initials.DeserializeJson(ref reader, options);
          break;

        case "listOrder":
          ListOrder = reader.GetUInt32();
          break;

        case "name":
          Name = new fhirCsR4B.Models.HumanName();
          Name.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR4B.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.ContactPoint objTelecom = new fhirCsR4B.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Used to record a display of the author/contributor list without separate coding for each list member.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactContributorshipSummary>))]
  public class CitationCitedArtifactContributorshipSummary : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to code the producer or rule for creating the display string.
    /// </summary>
    public CodeableConcept Source { get; set; }
    /// <summary>
    /// The format for the display string.
    /// </summary>
    public CodeableConcept Style { get; set; }
    /// <summary>
    /// Used most commonly to express an author list or a contributorship statement.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The display string for the author list, contributor list, or contributorship statement.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Style != null)
      {
        writer.WritePropertyName("style");
        Style.SerializeJson(writer, options);
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          Source = new fhirCsR4B.Models.CodeableConcept();
          Source.DeserializeJson(ref reader, options);
          break;

        case "style":
          Style = new fhirCsR4B.Models.CodeableConcept();
          Style.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4B.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifactContributorship>))]
  public class CitationCitedArtifactContributorship : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If list is incomplete "et al" can be appended to Contributorship.summary.value for display purposes.
    /// </summary>
    public bool? Complete { get; set; }
    /// <summary>
    /// Extension container element for Complete
    /// </summary>
    public Element _Complete { get; set; }
    /// <summary>
    /// Used to report contributorship in individualized ways.
    /// </summary>
    public List<CitationCitedArtifactContributorshipEntry> Entry { get; set; }
    /// <summary>
    /// Used to record a display of the author/contributor list without separate coding for each list member.
    /// </summary>
    public List<CitationCitedArtifactContributorshipSummary> Summary { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Complete != null)
      {
        writer.WriteBoolean("complete", (bool)Complete!);
      }

      if (_Complete != null)
      {
        writer.WritePropertyName("_complete");
        _Complete.SerializeJson(writer, options);
      }

      if ((Entry != null) && (Entry.Count != 0))
      {
        writer.WritePropertyName("entry");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactContributorshipEntry valEntry in Entry)
        {
          valEntry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Summary != null) && (Summary.Count != 0))
      {
        writer.WritePropertyName("summary");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactContributorshipSummary valSummary in Summary)
        {
          valSummary.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "complete":
          Complete = reader.GetBoolean();
          break;

        case "_complete":
          _Complete = new fhirCsR4B.Models.Element();
          _Complete.DeserializeJson(ref reader, options);
          break;

        case "entry":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Entry = new List<CitationCitedArtifactContributorshipEntry>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactContributorshipEntry objEntry = new fhirCsR4B.Models.CitationCitedArtifactContributorshipEntry();
            objEntry.DeserializeJson(ref reader, options);
            Entry.Add(objEntry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Entry.Count == 0)
          {
            Entry = null;
          }

          break;

        case "summary":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Summary = new List<CitationCitedArtifactContributorshipSummary>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactContributorshipSummary objSummary = new fhirCsR4B.Models.CitationCitedArtifactContributorshipSummary();
            objSummary.DeserializeJson(ref reader, options);
            Summary.Add(objSummary);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Summary.Count == 0)
          {
            Summary = null;
          }

          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The article or artifact being described.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<CitationCitedArtifact>))]
  public class CitationCitedArtifact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Summary of the article or artifact.
    /// </summary>
    public List<CitationCitedArtifactAbstract> Abstract { get; set; }
    /// <summary>
    /// The assignment to an organizing scheme.
    /// </summary>
    public List<CitationCitedArtifactClassification> Classification { get; set; }
    /// <summary>
    /// This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
    /// </summary>
    public CitationCitedArtifactContributorship Contributorship { get; set; }
    /// <summary>
    /// The status of the cited artifact.
    /// </summary>
    public List<CodeableConcept> CurrentState { get; set; }
    /// <summary>
    /// When the cited artifact was accessed.
    /// </summary>
    public string DateAccessed { get; set; }
    /// <summary>
    /// Extension container element for DateAccessed
    /// </summary>
    public Element _DateAccessed { get; set; }
    /// <summary>
    /// May include DOI, PMID, PMCID, etc. This element will contain unique identifiers that support de-duplication of citations. This identifier can be valid for only one citation resource.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Any additional information or content for the article or artifact.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The component of the article or artifact.
    /// </summary>
    public CitationCitedArtifactPart Part { get; set; }
    /// <summary>
    /// A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
    /// </summary>
    public List<CitationCitedArtifactPublicationForm> PublicationForm { get; set; }
    /// <summary>
    /// May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This identifier can be valid for multiple citation resources.
    /// </summary>
    public List<Identifier> RelatedIdentifier { get; set; }
    /// <summary>
    /// The artifact related to the cited artifact.
    /// </summary>
    public List<CitationCitedArtifactRelatesTo> RelatesTo { get; set; }
    /// <summary>
    /// An effective date or period for a status of the cited artifact.
    /// </summary>
    public List<CitationCitedArtifactStatusDate> StatusDate { get; set; }
    /// <summary>
    /// The title details of the article or artifact.
    /// </summary>
    public List<CitationCitedArtifactTitle> Title { get; set; }
    /// <summary>
    /// The defined version of the cited artifact.
    /// </summary>
    public CitationCitedArtifactVersion Version { get; set; }
    /// <summary>
    /// Used for any URL for the article or artifact cited.
    /// </summary>
    public List<CitationCitedArtifactWebLocation> WebLocation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedIdentifier != null) && (RelatedIdentifier.Count != 0))
      {
        writer.WritePropertyName("relatedIdentifier");
        writer.WriteStartArray();

        foreach (Identifier valRelatedIdentifier in RelatedIdentifier)
        {
          valRelatedIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(DateAccessed))
      {
        writer.WriteString("dateAccessed", (string)DateAccessed!);
      }

      if (_DateAccessed != null)
      {
        writer.WritePropertyName("_dateAccessed");
        _DateAccessed.SerializeJson(writer, options);
      }

      if (Version != null)
      {
        writer.WritePropertyName("version");
        Version.SerializeJson(writer, options);
      }

      if ((CurrentState != null) && (CurrentState.Count != 0))
      {
        writer.WritePropertyName("currentState");
        writer.WriteStartArray();

        foreach (CodeableConcept valCurrentState in CurrentState)
        {
          valCurrentState.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((StatusDate != null) && (StatusDate.Count != 0))
      {
        writer.WritePropertyName("statusDate");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactStatusDate valStatusDate in StatusDate)
        {
          valStatusDate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Title != null) && (Title.Count != 0))
      {
        writer.WritePropertyName("title");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactTitle valTitle in Title)
        {
          valTitle.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Abstract != null) && (Abstract.Count != 0))
      {
        writer.WritePropertyName("abstract");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactAbstract valAbstract in Abstract)
        {
          valAbstract.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Part != null)
      {
        writer.WritePropertyName("part");
        Part.SerializeJson(writer, options);
      }

      if ((RelatesTo != null) && (RelatesTo.Count != 0))
      {
        writer.WritePropertyName("relatesTo");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactRelatesTo valRelatesTo in RelatesTo)
        {
          valRelatesTo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PublicationForm != null) && (PublicationForm.Count != 0))
      {
        writer.WritePropertyName("publicationForm");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactPublicationForm valPublicationForm in PublicationForm)
        {
          valPublicationForm.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((WebLocation != null) && (WebLocation.Count != 0))
      {
        writer.WritePropertyName("webLocation");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactWebLocation valWebLocation in WebLocation)
        {
          valWebLocation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Classification != null) && (Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();

        foreach (CitationCitedArtifactClassification valClassification in Classification)
        {
          valClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Contributorship != null)
      {
        writer.WritePropertyName("contributorship");
        Contributorship.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "abstract":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Abstract = new List<CitationCitedArtifactAbstract>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactAbstract objAbstract = new fhirCsR4B.Models.CitationCitedArtifactAbstract();
            objAbstract.DeserializeJson(ref reader, options);
            Abstract.Add(objAbstract);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Abstract.Count == 0)
          {
            Abstract = null;
          }

          break;

        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<CitationCitedArtifactClassification>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactClassification objClassification = new fhirCsR4B.Models.CitationCitedArtifactClassification();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "contributorship":
          Contributorship = new fhirCsR4B.Models.CitationCitedArtifactContributorship();
          Contributorship.DeserializeJson(ref reader, options);
          break;

        case "currentState":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CurrentState = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objCurrentState = new fhirCsR4B.Models.CodeableConcept();
            objCurrentState.DeserializeJson(ref reader, options);
            CurrentState.Add(objCurrentState);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CurrentState.Count == 0)
          {
            CurrentState = null;
          }

          break;

        case "dateAccessed":
          DateAccessed = reader.GetString();
          break;

        case "_dateAccessed":
          _DateAccessed = new fhirCsR4B.Models.Element();
          _DateAccessed.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Identifier objIdentifier = new fhirCsR4B.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Annotation objNote = new fhirCsR4B.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "part":
          Part = new fhirCsR4B.Models.CitationCitedArtifactPart();
          Part.DeserializeJson(ref reader, options);
          break;

        case "publicationForm":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PublicationForm = new List<CitationCitedArtifactPublicationForm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactPublicationForm objPublicationForm = new fhirCsR4B.Models.CitationCitedArtifactPublicationForm();
            objPublicationForm.DeserializeJson(ref reader, options);
            PublicationForm.Add(objPublicationForm);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PublicationForm.Count == 0)
          {
            PublicationForm = null;
          }

          break;

        case "relatedIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedIdentifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Identifier objRelatedIdentifier = new fhirCsR4B.Models.Identifier();
            objRelatedIdentifier.DeserializeJson(ref reader, options);
            RelatedIdentifier.Add(objRelatedIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedIdentifier.Count == 0)
          {
            RelatedIdentifier = null;
          }

          break;

        case "relatesTo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatesTo = new List<CitationCitedArtifactRelatesTo>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactRelatesTo objRelatesTo = new fhirCsR4B.Models.CitationCitedArtifactRelatesTo();
            objRelatesTo.DeserializeJson(ref reader, options);
            RelatesTo.Add(objRelatesTo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatesTo.Count == 0)
          {
            RelatesTo = null;
          }

          break;

        case "statusDate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StatusDate = new List<CitationCitedArtifactStatusDate>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactStatusDate objStatusDate = new fhirCsR4B.Models.CitationCitedArtifactStatusDate();
            objStatusDate.DeserializeJson(ref reader, options);
            StatusDate.Add(objStatusDate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StatusDate.Count == 0)
          {
            StatusDate = null;
          }

          break;

        case "title":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Title = new List<CitationCitedArtifactTitle>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactTitle objTitle = new fhirCsR4B.Models.CitationCitedArtifactTitle();
            objTitle.DeserializeJson(ref reader, options);
            Title.Add(objTitle);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Title.Count == 0)
          {
            Title = null;
          }

          break;

        case "version":
          Version = new fhirCsR4B.Models.CitationCitedArtifactVersion();
          Version.DeserializeJson(ref reader, options);
          break;

        case "webLocation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          WebLocation = new List<CitationCitedArtifactWebLocation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationCitedArtifactWebLocation objWebLocation = new fhirCsR4B.Models.CitationCitedArtifactWebLocation();
            objWebLocation.DeserializeJson(ref reader, options);
            WebLocation.Add(objWebLocation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (WebLocation.Count == 0)
          {
            WebLocation = null;
          }

          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<Citation>))]
  public class Citation : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Citation";
    /// <summary>
    /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// Who authored the Citation.
    /// </summary>
    public List<ContactDetail> Author { get; set; }
    /// <summary>
    /// The article or artifact being described.
    /// </summary>
    public CitationCitedArtifact CitedArtifact { get; set; }
    /// <summary>
    /// The assignment to an organizing scheme.
    /// </summary>
    public List<CitationClassification> Classification { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// Use and/or publishing restrictions for the Citation, not for the cited artifact.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// The status of the citation.
    /// </summary>
    public List<CodeableConcept> CurrentState { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the citation. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the citation was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the citation as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the citation is presumed to be the predominant language in the place the citation was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Who edited the Citation.
    /// </summary>
    public List<ContactDetail> Editor { get; set; }
    /// <summary>
    /// The effective period for a citation  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Who endorsed the Citation.
    /// </summary>
    public List<ContactDetail> Endorser { get; set; }
    /// <summary>
    /// Allows filtering of citations that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// May include DOI, PMID, PMCID, etc. This element will contain unique identifiers that support de-duplication of citations. This identifier can be valid for only one citation resource.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// It may be possible for the citation to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// If specified, this date follows the original approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Used for general notes and annotations not coded elsewhere.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the citation is the organization or individual primarily responsible for the maintenance and upkeep of the citation. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the citation. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the citation. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this citation.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Artifact related to the Citation Resource.
    /// </summary>
    public List<CitationRelatesTo> RelatesTo { get; set; }
    /// <summary>
    /// Who reviewed the Citation.
    /// </summary>
    public List<ContactDetail> Reviewer { get; set; }
    /// <summary>
    /// Allows filtering of summarys s that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// An effective date or period for a status of the citation.
    /// </summary>
    public List<CitationStatusDate> StatusDate { get; set; }
    /// <summary>
    /// A human-readable display of the citation.
    /// </summary>
    public List<CitationSummary> Summary { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different citation instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the citation with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4B.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((Author != null) && (Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();

        foreach (ContactDetail valAuthor in Author)
        {
          valAuthor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Editor != null) && (Editor.Count != 0))
      {
        writer.WritePropertyName("editor");
        writer.WriteStartArray();

        foreach (ContactDetail valEditor in Editor)
        {
          valEditor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Reviewer != null) && (Reviewer.Count != 0))
      {
        writer.WritePropertyName("reviewer");
        writer.WriteStartArray();

        foreach (ContactDetail valReviewer in Reviewer)
        {
          valReviewer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Endorser != null) && (Endorser.Count != 0))
      {
        writer.WritePropertyName("endorser");
        writer.WriteStartArray();

        foreach (ContactDetail valEndorser in Endorser)
        {
          valEndorser.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Summary != null) && (Summary.Count != 0))
      {
        writer.WritePropertyName("summary");
        writer.WriteStartArray();

        foreach (CitationSummary valSummary in Summary)
        {
          valSummary.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Classification != null) && (Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();

        foreach (CitationClassification valClassification in Classification)
        {
          valClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CurrentState != null) && (CurrentState.Count != 0))
      {
        writer.WritePropertyName("currentState");
        writer.WriteStartArray();

        foreach (CodeableConcept valCurrentState in CurrentState)
        {
          valCurrentState.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((StatusDate != null) && (StatusDate.Count != 0))
      {
        writer.WritePropertyName("statusDate");
        writer.WriteStartArray();

        foreach (CitationStatusDate valStatusDate in StatusDate)
        {
          valStatusDate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatesTo != null) && (RelatesTo.Count != 0))
      {
        writer.WritePropertyName("relatesTo");
        writer.WriteStartArray();

        foreach (CitationRelatesTo valRelatesTo in RelatesTo)
        {
          valRelatesTo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (CitedArtifact != null)
      {
        writer.WritePropertyName("citedArtifact");
        CitedArtifact.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR4B.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.ContactDetail objAuthor = new fhirCsR4B.Models.ContactDetail();
            objAuthor.DeserializeJson(ref reader, options);
            Author.Add(objAuthor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Author.Count == 0)
          {
            Author = null;
          }

          break;

        case "citedArtifact":
          CitedArtifact = new fhirCsR4B.Models.CitationCitedArtifact();
          CitedArtifact.DeserializeJson(ref reader, options);
          break;

        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<CitationClassification>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationClassification objClassification = new fhirCsR4B.Models.CitationClassification();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.ContactDetail objContact = new fhirCsR4B.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4B.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "currentState":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CurrentState = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objCurrentState = new fhirCsR4B.Models.CodeableConcept();
            objCurrentState.DeserializeJson(ref reader, options);
            CurrentState.Add(objCurrentState);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CurrentState.Count == 0)
          {
            CurrentState = null;
          }

          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4B.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4B.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.ContactDetail objEditor = new fhirCsR4B.Models.ContactDetail();
            objEditor.DeserializeJson(ref reader, options);
            Editor.Add(objEditor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Editor.Count == 0)
          {
            Editor = null;
          }

          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR4B.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.ContactDetail objEndorser = new fhirCsR4B.Models.ContactDetail();
            objEndorser.DeserializeJson(ref reader, options);
            Endorser.Add(objEndorser);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endorser.Count == 0)
          {
            Endorser = null;
          }

          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR4B.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Identifier objIdentifier = new fhirCsR4B.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objJurisdiction = new fhirCsR4B.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR4B.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4B.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Annotation objNote = new fhirCsR4B.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4B.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR4B.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "relatesTo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatesTo = new List<CitationRelatesTo>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationRelatesTo objRelatesTo = new fhirCsR4B.Models.CitationRelatesTo();
            objRelatesTo.DeserializeJson(ref reader, options);
            RelatesTo.Add(objRelatesTo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatesTo.Count == 0)
          {
            RelatesTo = null;
          }

          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.ContactDetail objReviewer = new fhirCsR4B.Models.ContactDetail();
            objReviewer.DeserializeJson(ref reader, options);
            Reviewer.Add(objReviewer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reviewer.Count == 0)
          {
            Reviewer = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4B.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StatusDate = new List<CitationStatusDate>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationStatusDate objStatusDate = new fhirCsR4B.Models.CitationStatusDate();
            objStatusDate.DeserializeJson(ref reader, options);
            StatusDate.Add(objStatusDate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StatusDate.Count == 0)
          {
            StatusDate = null;
          }

          break;

        case "summary":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Summary = new List<CitationSummary>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CitationSummary objSummary = new fhirCsR4B.Models.CitationSummary();
            objSummary.DeserializeJson(ref reader, options);
            Summary.Add(objSummary);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Summary.Count == 0)
          {
            Summary = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4B.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4B.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.UsageContext objUseContext = new fhirCsR4B.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4B.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Citation.status field
  /// </summary>
  public static class CitationStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
