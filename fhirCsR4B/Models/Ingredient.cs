// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.3.0
  // Option: "NAMESPACE" = "fhirCsR4B"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR4B.Serialization;

namespace fhirCsR4B.Models
{
  /// <summary>
  /// The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<IngredientManufacturer>))]
  public class IngredientManufacturer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An organization that manufactures this ingredient.
    /// </summary>
    public Reference Manufacturer { get; set; }
    /// <summary>
    /// The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
    /// </summary>
    public string Role { get; set; }
    /// <summary>
    /// Extension container element for Role
    /// </summary>
    public Element _Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Role))
      {
        writer.WriteString("role", (string)Role!);
      }

      if (_Role != null)
      {
        writer.WritePropertyName("_role");
        _Role.SerializeJson(writer, options);
      }

      if (Manufacturer != null)
      {
        writer.WritePropertyName("manufacturer");
        Manufacturer.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "manufacturer":
          Manufacturer = new fhirCsR4B.Models.Reference();
          Manufacturer.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = reader.GetString();
          break;

        case "_role":
          _Role = new fhirCsR4B.Models.Element();
          _Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Ingredient.manufacturer.role field
  /// </summary>
  public static class IngredientManufacturerRoleCodes {
    public const string ALLOWED = "allowed";
    public const string POSSIBLE = "possible";
    public const string ACTUAL = "actual";
    public static HashSet<string> Values = new HashSet<string>() {
      "allowed",
      "possible",
      "actual",
    };
  }
  /// <summary>
  /// Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<IngredientSubstanceStrengthReferenceStrength>))]
  public class IngredientSubstanceStrengthReferenceStrength : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The country or countries for which the strength range applies.
    /// </summary>
    public List<CodeableConcept> Country { get; set; }
    /// <summary>
    /// For when strength is measured at a particular point or distance.
    /// </summary>
    public string MeasurementPoint { get; set; }
    /// <summary>
    /// Extension container element for MeasurementPoint
    /// </summary>
    public Element _MeasurementPoint { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance.
    /// </summary>
    public Ratio StrengthRatio { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance.
    /// </summary>
    public RatioRange StrengthRatioRange { get; set; }
    /// <summary>
    /// Relevant reference substance.
    /// </summary>
    public CodeableReference Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (StrengthRatio != null)
      {
        writer.WritePropertyName("strengthRatio");
        StrengthRatio.SerializeJson(writer, options);
      }

      if (StrengthRatioRange != null)
      {
        writer.WritePropertyName("strengthRatioRange");
        StrengthRatioRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasurementPoint))
      {
        writer.WriteString("measurementPoint", (string)MeasurementPoint!);
      }

      if (_MeasurementPoint != null)
      {
        writer.WritePropertyName("_measurementPoint");
        _MeasurementPoint.SerializeJson(writer, options);
      }

      if ((Country != null) && (Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountry in Country)
        {
          valCountry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objCountry = new fhirCsR4B.Models.CodeableConcept();
            objCountry.DeserializeJson(ref reader, options);
            Country.Add(objCountry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Country.Count == 0)
          {
            Country = null;
          }

          break;

        case "measurementPoint":
          MeasurementPoint = reader.GetString();
          break;

        case "_measurementPoint":
          _MeasurementPoint = new fhirCsR4B.Models.Element();
          _MeasurementPoint.DeserializeJson(ref reader, options);
          break;

        case "strengthRatio":
          StrengthRatio = new fhirCsR4B.Models.Ratio();
          StrengthRatio.DeserializeJson(ref reader, options);
          break;

        case "strengthRatioRange":
          StrengthRatioRange = new fhirCsR4B.Models.RatioRange();
          StrengthRatioRange.DeserializeJson(ref reader, options);
          break;

        case "substance":
          Substance = new fhirCsR4B.Models.CodeableReference();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<IngredientSubstanceStrength>))]
  public class IngredientSubstanceStrength : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The strength per unitary volume (or mass).
    /// </summary>
    public Ratio ConcentrationRatio { get; set; }
    /// <summary>
    /// The strength per unitary volume (or mass).
    /// </summary>
    public RatioRange ConcentrationRatioRange { get; set; }
    /// <summary>
    /// The country or countries for which the strength range applies.
    /// </summary>
    public List<CodeableConcept> Country { get; set; }
    /// <summary>
    /// For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.
    /// </summary>
    public string MeasurementPoint { get; set; }
    /// <summary>
    /// Extension container element for MeasurementPoint
    /// </summary>
    public Element _MeasurementPoint { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
    /// </summary>
    public Ratio PresentationRatio { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
    /// </summary>
    public RatioRange PresentationRatioRange { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
    /// </summary>
    public List<IngredientSubstanceStrengthReferenceStrength> ReferenceStrength { get; set; }
    /// <summary>
    /// A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
    /// </summary>
    public string TextConcentration { get; set; }
    /// <summary>
    /// Extension container element for TextConcentration
    /// </summary>
    public Element _TextConcentration { get; set; }
    /// <summary>
    /// A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
    /// </summary>
    public string TextPresentation { get; set; }
    /// <summary>
    /// Extension container element for TextPresentation
    /// </summary>
    public Element _TextPresentation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (PresentationRatio != null)
      {
        writer.WritePropertyName("presentationRatio");
        PresentationRatio.SerializeJson(writer, options);
      }

      if (PresentationRatioRange != null)
      {
        writer.WritePropertyName("presentationRatioRange");
        PresentationRatioRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TextPresentation))
      {
        writer.WriteString("textPresentation", (string)TextPresentation!);
      }

      if (_TextPresentation != null)
      {
        writer.WritePropertyName("_textPresentation");
        _TextPresentation.SerializeJson(writer, options);
      }

      if (ConcentrationRatio != null)
      {
        writer.WritePropertyName("concentrationRatio");
        ConcentrationRatio.SerializeJson(writer, options);
      }

      if (ConcentrationRatioRange != null)
      {
        writer.WritePropertyName("concentrationRatioRange");
        ConcentrationRatioRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TextConcentration))
      {
        writer.WriteString("textConcentration", (string)TextConcentration!);
      }

      if (_TextConcentration != null)
      {
        writer.WritePropertyName("_textConcentration");
        _TextConcentration.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasurementPoint))
      {
        writer.WriteString("measurementPoint", (string)MeasurementPoint!);
      }

      if (_MeasurementPoint != null)
      {
        writer.WritePropertyName("_measurementPoint");
        _MeasurementPoint.SerializeJson(writer, options);
      }

      if ((Country != null) && (Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountry in Country)
        {
          valCountry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReferenceStrength != null) && (ReferenceStrength.Count != 0))
      {
        writer.WritePropertyName("referenceStrength");
        writer.WriteStartArray();

        foreach (IngredientSubstanceStrengthReferenceStrength valReferenceStrength in ReferenceStrength)
        {
          valReferenceStrength.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "concentrationRatio":
          ConcentrationRatio = new fhirCsR4B.Models.Ratio();
          ConcentrationRatio.DeserializeJson(ref reader, options);
          break;

        case "concentrationRatioRange":
          ConcentrationRatioRange = new fhirCsR4B.Models.RatioRange();
          ConcentrationRatioRange.DeserializeJson(ref reader, options);
          break;

        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objCountry = new fhirCsR4B.Models.CodeableConcept();
            objCountry.DeserializeJson(ref reader, options);
            Country.Add(objCountry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Country.Count == 0)
          {
            Country = null;
          }

          break;

        case "measurementPoint":
          MeasurementPoint = reader.GetString();
          break;

        case "_measurementPoint":
          _MeasurementPoint = new fhirCsR4B.Models.Element();
          _MeasurementPoint.DeserializeJson(ref reader, options);
          break;

        case "presentationRatio":
          PresentationRatio = new fhirCsR4B.Models.Ratio();
          PresentationRatio.DeserializeJson(ref reader, options);
          break;

        case "presentationRatioRange":
          PresentationRatioRange = new fhirCsR4B.Models.RatioRange();
          PresentationRatioRange.DeserializeJson(ref reader, options);
          break;

        case "referenceStrength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReferenceStrength = new List<IngredientSubstanceStrengthReferenceStrength>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.IngredientSubstanceStrengthReferenceStrength objReferenceStrength = new fhirCsR4B.Models.IngredientSubstanceStrengthReferenceStrength();
            objReferenceStrength.DeserializeJson(ref reader, options);
            ReferenceStrength.Add(objReferenceStrength);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReferenceStrength.Count == 0)
          {
            ReferenceStrength = null;
          }

          break;

        case "textConcentration":
          TextConcentration = reader.GetString();
          break;

        case "_textConcentration":
          _TextConcentration = new fhirCsR4B.Models.Element();
          _TextConcentration.DeserializeJson(ref reader, options);
          break;

        case "textPresentation":
          TextPresentation = reader.GetString();
          break;

        case "_textPresentation":
          _TextPresentation = new fhirCsR4B.Models.Element();
          _TextPresentation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The substance that comprises this ingredient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<IngredientSubstance>))]
  public class IngredientSubstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code or full resource that represents the ingredient's substance.
    /// </summary>
    public CodeableReference Code { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
    /// </summary>
    public List<IngredientSubstanceStrength> Strength { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((Strength != null) && (Strength.Count != 0))
      {
        writer.WritePropertyName("strength");
        writer.WriteStartArray();

        foreach (IngredientSubstanceStrength valStrength in Strength)
        {
          valStrength.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4B.Models.CodeableReference();
          Code.DeserializeJson(ref reader, options);
          break;

        case "strength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Strength = new List<IngredientSubstanceStrength>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.IngredientSubstanceStrength objStrength = new fhirCsR4B.Models.IngredientSubstanceStrength();
            objStrength.DeserializeJson(ref reader, options);
            Strength.Add(objStrength);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Strength.Count == 0)
          {
            Strength = null;
          }

          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An ingredient of a manufactured item or pharmaceutical product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<Ingredient>))]
  public class Ingredient : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Ingredient";
    /// <summary>
    /// If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.
    /// </summary>
    public bool? AllergenicIndicator { get; set; }
    /// <summary>
    /// Extension container element for AllergenicIndicator
    /// </summary>
    public Element _AllergenicIndicator { get; set; }
    /// <summary>
    /// The product which this ingredient is a constituent part of.
    /// </summary>
    public List<Reference> For { get; set; }
    /// <summary>
    /// A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent.
    /// </summary>
    public List<CodeableConcept> Function { get; set; }
    /// <summary>
    /// The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
    /// </summary>
    public List<IngredientManufacturer> Manufacturer { get; set; }
    /// <summary>
    /// A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Allows filtering of ingredient that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The substance that comprises this ingredient.
    /// </summary>
    public IngredientSubstance Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4B.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((For != null) && (For.Count != 0))
      {
        writer.WritePropertyName("for");
        writer.WriteStartArray();

        foreach (Reference valFor in For)
        {
          valFor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if ((Function != null) && (Function.Count != 0))
      {
        writer.WritePropertyName("function");
        writer.WriteStartArray();

        foreach (CodeableConcept valFunction in Function)
        {
          valFunction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AllergenicIndicator != null)
      {
        writer.WriteBoolean("allergenicIndicator", (bool)AllergenicIndicator!);
      }

      if (_AllergenicIndicator != null)
      {
        writer.WritePropertyName("_allergenicIndicator");
        _AllergenicIndicator.SerializeJson(writer, options);
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (IngredientManufacturer valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allergenicIndicator":
          AllergenicIndicator = reader.GetBoolean();
          break;

        case "_allergenicIndicator":
          _AllergenicIndicator = new fhirCsR4B.Models.Element();
          _AllergenicIndicator.DeserializeJson(ref reader, options);
          break;

        case "for":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          For = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.Reference objFor = new fhirCsR4B.Models.Reference();
            objFor.DeserializeJson(ref reader, options);
            For.Add(objFor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (For.Count == 0)
          {
            For = null;
          }

          break;

        case "function":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Function = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objFunction = new fhirCsR4B.Models.CodeableConcept();
            objFunction.DeserializeJson(ref reader, options);
            Function.Add(objFunction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Function.Count == 0)
          {
            Function = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR4B.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<IngredientManufacturer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.IngredientManufacturer objManufacturer = new fhirCsR4B.Models.IngredientManufacturer();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "role":
          Role = new fhirCsR4B.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4B.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "substance":
          Substance = new fhirCsR4B.Models.IngredientSubstance();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Ingredient.status field
  /// </summary>
  public static class IngredientStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
