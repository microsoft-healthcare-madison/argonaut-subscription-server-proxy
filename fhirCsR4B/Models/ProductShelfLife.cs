// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.3.0
  // Option: "NAMESPACE" = "fhirCsR4B"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR4B.Serialization;

namespace fhirCsR4B.Models
{
  /// <summary>
  /// The shelf-life and storage information for a medicinal product item or container can be described using this class.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4B.Serialization.JsonStreamComponentConverter<ProductShelfLife>))]
  public class ProductShelfLife : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Unique identifier for the packaged Medicinal Product.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    /// </summary>
    public Quantity Period { get; set; }
    /// <summary>
    /// Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
    /// </summary>
    public List<CodeableConcept> SpecialPrecautionsForStorage { get; set; }
    /// <summary>
    /// This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4B.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((SpecialPrecautionsForStorage != null) && (SpecialPrecautionsForStorage.Count != 0))
      {
        writer.WritePropertyName("specialPrecautionsForStorage");
        writer.WriteStartArray();

        foreach (CodeableConcept valSpecialPrecautionsForStorage in SpecialPrecautionsForStorage)
        {
          valSpecialPrecautionsForStorage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          Identifier = new fhirCsR4B.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR4B.Models.Quantity();
          Period.DeserializeJson(ref reader, options);
          break;

        case "specialPrecautionsForStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecialPrecautionsForStorage = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4B.Models.CodeableConcept objSpecialPrecautionsForStorage = new fhirCsR4B.Models.CodeableConcept();
            objSpecialPrecautionsForStorage.DeserializeJson(ref reader, options);
            SpecialPrecautionsForStorage.Add(objSpecialPrecautionsForStorage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecialPrecautionsForStorage.Count == 0)
          {
            SpecialPrecautionsForStorage = null;
          }

          break;

        case "type":
          Type = new fhirCsR4B.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4B.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
