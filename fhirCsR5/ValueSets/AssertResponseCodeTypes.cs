// <auto-generated />
// Built from: hl7.fhir.r5.core version: 4.6.0
  // Option: "NAMESPACE" = "fhirCsR5"

using fhirCsR5.Models;

namespace fhirCsR5.ValueSets
{
  /// <summary>
  /// The type of response code to use for assertion.
  /// </summary>
  public static class AssertResponseCodeTypesCodes
  {
    /// <summary>
    /// Response code is 400.
    /// </summary>
    public static readonly Coding Bad = new Coding
    {
      Code = "bad",
      Display = "bad",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 409.
    /// </summary>
    public static readonly Coding Conflict = new Coding
    {
      Code = "conflict",
      Display = "conflict",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 201.
    /// </summary>
    public static readonly Coding Created = new Coding
    {
      Code = "created",
      Display = "created",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 403.
    /// </summary>
    public static readonly Coding Forbidden = new Coding
    {
      Code = "forbidden",
      Display = "forbidden",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 410.
    /// </summary>
    public static readonly Coding Gone = new Coding
    {
      Code = "gone",
      Display = "gone",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 405.
    /// </summary>
    public static readonly Coding MethodNotAllowed = new Coding
    {
      Code = "methodNotAllowed",
      Display = "methodNotAllowed",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 204.
    /// </summary>
    public static readonly Coding NoContent = new Coding
    {
      Code = "noContent",
      Display = "noContent",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 404.
    /// </summary>
    public static readonly Coding NotFound = new Coding
    {
      Code = "notFound",
      Display = "notFound",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 304.
    /// </summary>
    public static readonly Coding NotModified = new Coding
    {
      Code = "notModified",
      Display = "notModified",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 200.
    /// </summary>
    public static readonly Coding Okay = new Coding
    {
      Code = "okay",
      Display = "okay",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 412.
    /// </summary>
    public static readonly Coding PreconditionFailed = new Coding
    {
      Code = "preconditionFailed",
      Display = "preconditionFailed",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    /// <summary>
    /// Response code is 422.
    /// </summary>
    public static readonly Coding Unprocessable = new Coding
    {
      Code = "unprocessable",
      Display = "unprocessable",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };

    /// <summary>
    /// Literal for code: Bad
    /// </summary>
    public const string LiteralBad = "bad";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesBad
    /// </summary>
    public const string LiteralAssertResponseCodeTypesBad = "http://hl7.org/fhir/assert-response-code-types#bad";

    /// <summary>
    /// Literal for code: Conflict
    /// </summary>
    public const string LiteralConflict = "conflict";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesConflict
    /// </summary>
    public const string LiteralAssertResponseCodeTypesConflict = "http://hl7.org/fhir/assert-response-code-types#conflict";

    /// <summary>
    /// Literal for code: Created
    /// </summary>
    public const string LiteralCreated = "created";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesCreated
    /// </summary>
    public const string LiteralAssertResponseCodeTypesCreated = "http://hl7.org/fhir/assert-response-code-types#created";

    /// <summary>
    /// Literal for code: Forbidden
    /// </summary>
    public const string LiteralForbidden = "forbidden";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesForbidden
    /// </summary>
    public const string LiteralAssertResponseCodeTypesForbidden = "http://hl7.org/fhir/assert-response-code-types#forbidden";

    /// <summary>
    /// Literal for code: Gone
    /// </summary>
    public const string LiteralGone = "gone";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesGone
    /// </summary>
    public const string LiteralAssertResponseCodeTypesGone = "http://hl7.org/fhir/assert-response-code-types#gone";

    /// <summary>
    /// Literal for code: MethodNotAllowed
    /// </summary>
    public const string LiteralMethodNotAllowed = "methodNotAllowed";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesMethodNotAllowed
    /// </summary>
    public const string LiteralAssertResponseCodeTypesMethodNotAllowed = "http://hl7.org/fhir/assert-response-code-types#methodNotAllowed";

    /// <summary>
    /// Literal for code: NoContent
    /// </summary>
    public const string LiteralNoContent = "noContent";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesNoContent
    /// </summary>
    public const string LiteralAssertResponseCodeTypesNoContent = "http://hl7.org/fhir/assert-response-code-types#noContent";

    /// <summary>
    /// Literal for code: NotFound
    /// </summary>
    public const string LiteralNotFound = "notFound";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesNotFound
    /// </summary>
    public const string LiteralAssertResponseCodeTypesNotFound = "http://hl7.org/fhir/assert-response-code-types#notFound";

    /// <summary>
    /// Literal for code: NotModified
    /// </summary>
    public const string LiteralNotModified = "notModified";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesNotModified
    /// </summary>
    public const string LiteralAssertResponseCodeTypesNotModified = "http://hl7.org/fhir/assert-response-code-types#notModified";

    /// <summary>
    /// Literal for code: Okay
    /// </summary>
    public const string LiteralOkay = "okay";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesOkay
    /// </summary>
    public const string LiteralAssertResponseCodeTypesOkay = "http://hl7.org/fhir/assert-response-code-types#okay";

    /// <summary>
    /// Literal for code: PreconditionFailed
    /// </summary>
    public const string LiteralPreconditionFailed = "preconditionFailed";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesPreconditionFailed
    /// </summary>
    public const string LiteralAssertResponseCodeTypesPreconditionFailed = "http://hl7.org/fhir/assert-response-code-types#preconditionFailed";

    /// <summary>
    /// Literal for code: Unprocessable
    /// </summary>
    public const string LiteralUnprocessable = "unprocessable";

    /// <summary>
    /// Literal for code: AssertResponseCodeTypesUnprocessable
    /// </summary>
    public const string LiteralAssertResponseCodeTypesUnprocessable = "http://hl7.org/fhir/assert-response-code-types#unprocessable";

    /// <summary>
    /// Dictionary for looking up AssertResponseCodeTypes Codings based on Codes
    /// </summary>
    public static Dictionary<string, Coding> Values = new Dictionary<string, Coding>() {
      { "bad", Bad }, 
      { "http://hl7.org/fhir/assert-response-code-types#bad", Bad }, 
      { "conflict", Conflict }, 
      { "http://hl7.org/fhir/assert-response-code-types#conflict", Conflict }, 
      { "created", Created }, 
      { "http://hl7.org/fhir/assert-response-code-types#created", Created }, 
      { "forbidden", Forbidden }, 
      { "http://hl7.org/fhir/assert-response-code-types#forbidden", Forbidden }, 
      { "gone", Gone }, 
      { "http://hl7.org/fhir/assert-response-code-types#gone", Gone }, 
      { "methodNotAllowed", MethodNotAllowed }, 
      { "http://hl7.org/fhir/assert-response-code-types#methodNotAllowed", MethodNotAllowed }, 
      { "noContent", NoContent }, 
      { "http://hl7.org/fhir/assert-response-code-types#noContent", NoContent }, 
      { "notFound", NotFound }, 
      { "http://hl7.org/fhir/assert-response-code-types#notFound", NotFound }, 
      { "notModified", NotModified }, 
      { "http://hl7.org/fhir/assert-response-code-types#notModified", NotModified }, 
      { "okay", Okay }, 
      { "http://hl7.org/fhir/assert-response-code-types#okay", Okay }, 
      { "preconditionFailed", PreconditionFailed }, 
      { "http://hl7.org/fhir/assert-response-code-types#preconditionFailed", PreconditionFailed }, 
      { "unprocessable", Unprocessable }, 
      { "http://hl7.org/fhir/assert-response-code-types#unprocessable", Unprocessable }, 
    };
  };
}
