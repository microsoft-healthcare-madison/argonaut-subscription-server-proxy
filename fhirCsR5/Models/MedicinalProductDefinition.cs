// <auto-generated />
// Built from: hl7.fhir.r5.core version: 3.0.1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// A product specific contact, person (in a role), or an organization.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinitionContact>))]
  public class MedicinalProductDefinitionContact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A product specific contact, person (in a role), or an organization.
    /// </summary>
    public Reference Contact { get; set; }
    /// <summary>
    /// Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Contact != null)
      {
        writer.WritePropertyName("contact");
        Contact.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          Contact = new fhirCsR5.Models.Reference();
          Contact.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Coding words or phrases of the name.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinitionNameNamePart>))]
  public class MedicinalProductDefinitionNameNamePart : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A fragment of a product name.
    /// </summary>
    public string Part { get; set; }
    /// <summary>
    /// Extension container element for Part
    /// </summary>
    public Element _Part { get; set; }
    /// <summary>
    /// Identifying type for this part of the name (e.g. strength part).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Part))
      {
        writer.WriteString("part", (string)Part!);
      }

      if (_Part != null)
      {
        writer.WritePropertyName("_part");
        _Part.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "part":
          Part = reader.GetString();
          break;

        case "_part":
          _Part = new fhirCsR5.Models.Element();
          _Part.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Country where the name applies.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinitionNameCountryLanguage>))]
  public class MedicinalProductDefinitionNameCountryLanguage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Country code for where this name applies.
    /// </summary>
    public CodeableConcept Country { get; set; }
    /// <summary>
    /// Jurisdiction code for where this name applies.
    /// </summary>
    public CodeableConcept Jurisdiction { get; set; }
    /// <summary>
    /// Language code for this name.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Country != null)
      {
        writer.WritePropertyName("country");
        Country.SerializeJson(writer, options);
      }

      if (Jurisdiction != null)
      {
        writer.WritePropertyName("jurisdiction");
        Jurisdiction.SerializeJson(writer, options);
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          Country = new fhirCsR5.Models.CodeableConcept();
          Country.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = new fhirCsR5.Models.CodeableConcept();
          Jurisdiction.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = new fhirCsR5.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The product's name, including full name and possibly coded parts.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinitionName>))]
  public class MedicinalProductDefinitionName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Country where the name applies.
    /// </summary>
    public List<MedicinalProductDefinitionNameCountryLanguage> CountryLanguage { get; set; }
    /// <summary>
    /// Coding words or phrases of the name.
    /// </summary>
    public List<MedicinalProductDefinitionNameNamePart> NamePart { get; set; }
    /// <summary>
    /// The full product name.
    /// </summary>
    public string ProductName { get; set; }
    /// <summary>
    /// Extension container element for ProductName
    /// </summary>
    public Element _ProductName { get; set; }
    /// <summary>
    /// Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ProductName))
      {
        writer.WriteString("productName", (string)ProductName!);
      }

      if (_ProductName != null)
      {
        writer.WritePropertyName("_productName");
        _ProductName.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((NamePart != null) && (NamePart.Count != 0))
      {
        writer.WritePropertyName("namePart");
        writer.WriteStartArray();

        foreach (MedicinalProductDefinitionNameNamePart valNamePart in NamePart)
        {
          valNamePart.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CountryLanguage != null) && (CountryLanguage.Count != 0))
      {
        writer.WritePropertyName("countryLanguage");
        writer.WriteStartArray();

        foreach (MedicinalProductDefinitionNameCountryLanguage valCountryLanguage in CountryLanguage)
        {
          valCountryLanguage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "countryLanguage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CountryLanguage = new List<MedicinalProductDefinitionNameCountryLanguage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicinalProductDefinitionNameCountryLanguage objCountryLanguage = new fhirCsR5.Models.MedicinalProductDefinitionNameCountryLanguage();
            objCountryLanguage.DeserializeJson(ref reader, options);
            CountryLanguage.Add(objCountryLanguage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CountryLanguage.Count == 0)
          {
            CountryLanguage = null;
          }

          break;

        case "namePart":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NamePart = new List<MedicinalProductDefinitionNameNamePart>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicinalProductDefinitionNameNamePart objNamePart = new fhirCsR5.Models.MedicinalProductDefinitionNameNamePart();
            objNamePart.DeserializeJson(ref reader, options);
            NamePart.Add(objNamePart);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NamePart.Count == 0)
          {
            NamePart = null;
          }

          break;

        case "productName":
          ProductName = reader.GetString();
          break;

        case "_productName":
          _ProductName = new fhirCsR5.Models.Element();
          _ProductName.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Reference to another product, e.g. for linking authorised to investigational product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinitionCrossReference>))]
  public class MedicinalProductDefinitionCrossReference : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Reference to another product, e.g. for linking authorised to investigational product.
    /// </summary>
    public CodeableReference Product { get; set; }
    /// <summary>
    /// The type of relationship, for instance branded to generic, product to development product (investigational), parallel import version.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Product != null)
      {
        writer.WritePropertyName("product");
        Product.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "product":
          Product = new fhirCsR5.Models.CodeableReference();
          Product.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A manufacturing or administrative process or step associated with (or performed on) the medicinal product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinitionOperation>))]
  public class MedicinalProductDefinitionOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specifies whether this particular business or manufacturing process is considered proprietary or confidential.
    /// </summary>
    public CodeableConcept ConfidentialityIndicator { get; set; }
    /// <summary>
    /// Date range of applicability.
    /// </summary>
    public Period EffectiveDate { get; set; }
    /// <summary>
    /// The organization or establishment responsible for (or associated with) the particular process or step, examples include the manufacturer, importer, agent.
    /// </summary>
    public List<Reference> Organization { get; set; }
    /// <summary>
    /// The type of manufacturing operation e.g. manufacturing itself, re-packaging. For the authorization of this, a RegulatedAuthorization would point to the same plan or activity referenced here.
    /// </summary>
    public CodeableReference Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (EffectiveDate != null)
      {
        writer.WritePropertyName("effectiveDate");
        EffectiveDate.SerializeJson(writer, options);
      }

      if ((Organization != null) && (Organization.Count != 0))
      {
        writer.WritePropertyName("organization");
        writer.WriteStartArray();

        foreach (Reference valOrganization in Organization)
        {
          valOrganization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ConfidentialityIndicator != null)
      {
        writer.WritePropertyName("confidentialityIndicator");
        ConfidentialityIndicator.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "confidentialityIndicator":
          ConfidentialityIndicator = new fhirCsR5.Models.CodeableConcept();
          ConfidentialityIndicator.DeserializeJson(ref reader, options);
          break;

        case "effectiveDate":
          EffectiveDate = new fhirCsR5.Models.Period();
          EffectiveDate.DeserializeJson(ref reader, options);
          break;

        case "organization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Organization = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objOrganization = new fhirCsR5.Models.Reference();
            objOrganization.DeserializeJson(ref reader, options);
            Organization.Add(objOrganization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Organization.Count == 0)
          {
            Organization = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableReference();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import".
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinitionCharacteristic>))]
  public class MedicinalProductDefinitionCharacteristic : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code expressing the type of characteristic.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR5.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR5.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR5.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use, drug catalogs).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicinalProductDefinition>))]
  public class MedicinalProductDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MedicinalProductDefinition";
    /// <summary>
    /// Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
    /// </summary>
    public CodeableConcept AdditionalMonitoringIndicator { get; set; }
    /// <summary>
    /// Additional information or supporting documentation about the medicinal product.
    /// </summary>
    public List<Reference> AttachedDocument { get; set; }
    /// <summary>
    /// Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import".
    /// </summary>
    public List<MedicinalProductDefinitionCharacteristic> Characteristic { get; set; }
    /// <summary>
    /// Allows the product to be classified by various systems.
    /// </summary>
    public List<CodeableConcept> Classification { get; set; }
    /// <summary>
    /// Clinical trials or studies that this product is involved in.
    /// </summary>
    public List<Reference> ClinicalTrial { get; set; }
    /// <summary>
    /// A code that this product is known by, usually within some formal terminology. Products (types of medications) tend to be known by identifiers during development and within regulatory process. However when they are prescribed they tend to be identified by codes. The same product may be have multiple codes, applied to it by multiple organizations.
    /// </summary>
    public List<Coding> Code { get; set; }
    /// <summary>
    /// The dose form for a single part product, or combined form of a multiple part product.
    /// </summary>
    public CodeableConcept CombinedPharmaceuticalDoseForm { get; set; }
    /// <summary>
    /// A product specific contact, person (in a role), or an organization.
    /// </summary>
    public List<MedicinalProductDefinitionContact> Contact { get; set; }
    /// <summary>
    /// Reference to another product, e.g. for linking authorised to investigational product.
    /// </summary>
    public List<MedicinalProductDefinitionCrossReference> CrossReference { get; set; }
    /// <summary>
    /// General description of this product.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// If this medicine applies to human or veterinary uses.
    /// </summary>
    public CodeableConcept Domain { get; set; }
    /// <summary>
    /// Business identifier for this product. Could be an MPID.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Any component of the drug product which is not the chemical entity defined as the drug substance or an excipient in the drug product. This includes process-related impurities and contaminants, product-related impurities including degradation products.
    /// </summary>
    public List<CodeableReference> Impurity { get; set; }
    /// <summary>
    /// Description of indication(s) for this product, used when structured indications are not required. In cases where structured indications are required, they are captured using the ClinicalUseDefinition resource. An indication is a medical situation for which using the product is appropriate.
    /// </summary>
    public string Indication { get; set; }
    /// <summary>
    /// Extension container element for Indication
    /// </summary>
    public Element _Indication { get; set; }
    /// <summary>
    /// The ingredients of this medicinal product - when not detailed in other resources. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource, or indirectly via incoming AdministrableProductDefinition, PackagedProductDefinition or ManufacturedItemDefinition references. In cases where those levels of detail are not used, the ingredients may be specified directly here as codes.
    /// </summary>
    public List<CodeableConcept> Ingredient { get; set; }
    /// <summary>
    /// The legal status of supply of the medicinal product as classified by the regulator.
    /// </summary>
    public CodeableConcept LegalStatusOfSupply { get; set; }
    /// <summary>
    /// Marketing status of the medicinal product, in contrast to marketing authorization.
    /// </summary>
    public List<MarketingStatus> MarketingStatus { get; set; }
    /// <summary>
    /// A master file for the medicinal product (e.g. Pharmacovigilance System Master File). Drug master files (DMFs) are documents submitted to regulatory agencies to provide confidential detailed information about facilities, processes or articles used in the manufacturing, processing, packaging and storing of drug products.
    /// </summary>
    public List<Reference> MasterFile { get; set; }
    /// <summary>
    /// The product's name, including full name and possibly coded parts.
    /// </summary>
    public List<MedicinalProductDefinitionName> Name { get; set; }
    /// <summary>
    /// A manufacturing or administrative process or step associated with (or performed on) the medicinal product.
    /// </summary>
    public List<MedicinalProductDefinitionOperation> Operation { get; set; }
    /// <summary>
    /// Package representation for the product. See also the PackagedProductDefinition resource.
    /// </summary>
    public List<CodeableConcept> PackagedMedicinalProduct { get; set; }
    /// <summary>
    /// If authorised for use in children.
    /// </summary>
    public CodeableConcept PediatricUseIndicator { get; set; }
    /// <summary>
    /// The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. See also AdministrableProductDefinition resource.
    /// </summary>
    public List<CodeableConcept> Route { get; set; }
    /// <summary>
    /// Whether the Medicinal Product is subject to special measures for regulatory reasons.
    /// </summary>
    public List<CodeableConcept> SpecialMeasures { get; set; }
    /// <summary>
    /// The status within the lifecycle of this product record. A high-level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The date at which the given status became applicable.
    /// </summary>
    public string StatusDate { get; set; }
    /// <summary>
    /// Extension container element for StatusDate
    /// </summary>
    public Element _StatusDate { get; set; }
    /// <summary>
    /// Regulatory type, e.g. Investigational or Authorized.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// A business identifier relating to a specific version of the product, this is commonly used to support revisions to an existing product.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Domain != null)
      {
        writer.WritePropertyName("domain");
        Domain.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StatusDate))
      {
        writer.WriteString("statusDate", (string)StatusDate!);
      }

      if (_StatusDate != null)
      {
        writer.WritePropertyName("_statusDate");
        _StatusDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (CombinedPharmaceuticalDoseForm != null)
      {
        writer.WritePropertyName("combinedPharmaceuticalDoseForm");
        CombinedPharmaceuticalDoseForm.SerializeJson(writer, options);
      }

      if ((Route != null) && (Route.Count != 0))
      {
        writer.WritePropertyName("route");
        writer.WriteStartArray();

        foreach (CodeableConcept valRoute in Route)
        {
          valRoute.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Indication))
      {
        writer.WriteString("indication", (string)Indication!);
      }

      if (_Indication != null)
      {
        writer.WritePropertyName("_indication");
        _Indication.SerializeJson(writer, options);
      }

      if (LegalStatusOfSupply != null)
      {
        writer.WritePropertyName("legalStatusOfSupply");
        LegalStatusOfSupply.SerializeJson(writer, options);
      }

      if (AdditionalMonitoringIndicator != null)
      {
        writer.WritePropertyName("additionalMonitoringIndicator");
        AdditionalMonitoringIndicator.SerializeJson(writer, options);
      }

      if ((SpecialMeasures != null) && (SpecialMeasures.Count != 0))
      {
        writer.WritePropertyName("specialMeasures");
        writer.WriteStartArray();

        foreach (CodeableConcept valSpecialMeasures in SpecialMeasures)
        {
          valSpecialMeasures.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PediatricUseIndicator != null)
      {
        writer.WritePropertyName("pediatricUseIndicator");
        PediatricUseIndicator.SerializeJson(writer, options);
      }

      if ((Classification != null) && (Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassification in Classification)
        {
          valClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MarketingStatus != null) && (MarketingStatus.Count != 0))
      {
        writer.WritePropertyName("marketingStatus");
        writer.WriteStartArray();

        foreach (MarketingStatus valMarketingStatus in MarketingStatus)
        {
          valMarketingStatus.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PackagedMedicinalProduct != null) && (PackagedMedicinalProduct.Count != 0))
      {
        writer.WritePropertyName("packagedMedicinalProduct");
        writer.WriteStartArray();

        foreach (CodeableConcept valPackagedMedicinalProduct in PackagedMedicinalProduct)
        {
          valPackagedMedicinalProduct.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Ingredient != null) && (Ingredient.Count != 0))
      {
        writer.WritePropertyName("ingredient");
        writer.WriteStartArray();

        foreach (CodeableConcept valIngredient in Ingredient)
        {
          valIngredient.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Impurity != null) && (Impurity.Count != 0))
      {
        writer.WritePropertyName("impurity");
        writer.WriteStartArray();

        foreach (CodeableReference valImpurity in Impurity)
        {
          valImpurity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AttachedDocument != null) && (AttachedDocument.Count != 0))
      {
        writer.WritePropertyName("attachedDocument");
        writer.WriteStartArray();

        foreach (Reference valAttachedDocument in AttachedDocument)
        {
          valAttachedDocument.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MasterFile != null) && (MasterFile.Count != 0))
      {
        writer.WritePropertyName("masterFile");
        writer.WriteStartArray();

        foreach (Reference valMasterFile in MasterFile)
        {
          valMasterFile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (MedicinalProductDefinitionContact valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ClinicalTrial != null) && (ClinicalTrial.Count != 0))
      {
        writer.WritePropertyName("clinicalTrial");
        writer.WriteStartArray();

        foreach (Reference valClinicalTrial in ClinicalTrial)
        {
          valClinicalTrial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (Coding valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Name != null) && (Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();

        foreach (MedicinalProductDefinitionName valName in Name)
        {
          valName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CrossReference != null) && (CrossReference.Count != 0))
      {
        writer.WritePropertyName("crossReference");
        writer.WriteStartArray();

        foreach (MedicinalProductDefinitionCrossReference valCrossReference in CrossReference)
        {
          valCrossReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operation != null) && (Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();

        foreach (MedicinalProductDefinitionOperation valOperation in Operation)
        {
          valOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Characteristic != null) && (Characteristic.Count != 0))
      {
        writer.WritePropertyName("characteristic");
        writer.WriteStartArray();

        foreach (MedicinalProductDefinitionCharacteristic valCharacteristic in Characteristic)
        {
          valCharacteristic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additionalMonitoringIndicator":
          AdditionalMonitoringIndicator = new fhirCsR5.Models.CodeableConcept();
          AdditionalMonitoringIndicator.DeserializeJson(ref reader, options);
          break;

        case "attachedDocument":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AttachedDocument = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objAttachedDocument = new fhirCsR5.Models.Reference();
            objAttachedDocument.DeserializeJson(ref reader, options);
            AttachedDocument.Add(objAttachedDocument);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AttachedDocument.Count == 0)
          {
            AttachedDocument = null;
          }

          break;

        case "characteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Characteristic = new List<MedicinalProductDefinitionCharacteristic>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicinalProductDefinitionCharacteristic objCharacteristic = new fhirCsR5.Models.MedicinalProductDefinitionCharacteristic();
            objCharacteristic.DeserializeJson(ref reader, options);
            Characteristic.Add(objCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Characteristic.Count == 0)
          {
            Characteristic = null;
          }

          break;

        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objClassification = new fhirCsR5.Models.CodeableConcept();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "clinicalTrial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ClinicalTrial = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objClinicalTrial = new fhirCsR5.Models.Reference();
            objClinicalTrial.DeserializeJson(ref reader, options);
            ClinicalTrial.Add(objClinicalTrial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ClinicalTrial.Count == 0)
          {
            ClinicalTrial = null;
          }

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Coding objCode = new fhirCsR5.Models.Coding();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "combinedPharmaceuticalDoseForm":
          CombinedPharmaceuticalDoseForm = new fhirCsR5.Models.CodeableConcept();
          CombinedPharmaceuticalDoseForm.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<MedicinalProductDefinitionContact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicinalProductDefinitionContact objContact = new fhirCsR5.Models.MedicinalProductDefinitionContact();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "crossReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CrossReference = new List<MedicinalProductDefinitionCrossReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicinalProductDefinitionCrossReference objCrossReference = new fhirCsR5.Models.MedicinalProductDefinitionCrossReference();
            objCrossReference.DeserializeJson(ref reader, options);
            CrossReference.Add(objCrossReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CrossReference.Count == 0)
          {
            CrossReference = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "domain":
          Domain = new fhirCsR5.Models.CodeableConcept();
          Domain.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "impurity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Impurity = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objImpurity = new fhirCsR5.Models.CodeableReference();
            objImpurity.DeserializeJson(ref reader, options);
            Impurity.Add(objImpurity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Impurity.Count == 0)
          {
            Impurity = null;
          }

          break;

        case "indication":
          Indication = reader.GetString();
          break;

        case "_indication":
          _Indication = new fhirCsR5.Models.Element();
          _Indication.DeserializeJson(ref reader, options);
          break;

        case "ingredient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Ingredient = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objIngredient = new fhirCsR5.Models.CodeableConcept();
            objIngredient.DeserializeJson(ref reader, options);
            Ingredient.Add(objIngredient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Ingredient.Count == 0)
          {
            Ingredient = null;
          }

          break;

        case "legalStatusOfSupply":
          LegalStatusOfSupply = new fhirCsR5.Models.CodeableConcept();
          LegalStatusOfSupply.DeserializeJson(ref reader, options);
          break;

        case "marketingStatus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MarketingStatus = new List<MarketingStatus>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MarketingStatus objMarketingStatus = new fhirCsR5.Models.MarketingStatus();
            objMarketingStatus.DeserializeJson(ref reader, options);
            MarketingStatus.Add(objMarketingStatus);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MarketingStatus.Count == 0)
          {
            MarketingStatus = null;
          }

          break;

        case "masterFile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MasterFile = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objMasterFile = new fhirCsR5.Models.Reference();
            objMasterFile.DeserializeJson(ref reader, options);
            MasterFile.Add(objMasterFile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MasterFile.Count == 0)
          {
            MasterFile = null;
          }

          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Name = new List<MedicinalProductDefinitionName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicinalProductDefinitionName objName = new fhirCsR5.Models.MedicinalProductDefinitionName();
            objName.DeserializeJson(ref reader, options);
            Name.Add(objName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Name.Count == 0)
          {
            Name = null;
          }

          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operation = new List<MedicinalProductDefinitionOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicinalProductDefinitionOperation objOperation = new fhirCsR5.Models.MedicinalProductDefinitionOperation();
            objOperation.DeserializeJson(ref reader, options);
            Operation.Add(objOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operation.Count == 0)
          {
            Operation = null;
          }

          break;

        case "packagedMedicinalProduct":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PackagedMedicinalProduct = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objPackagedMedicinalProduct = new fhirCsR5.Models.CodeableConcept();
            objPackagedMedicinalProduct.DeserializeJson(ref reader, options);
            PackagedMedicinalProduct.Add(objPackagedMedicinalProduct);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PackagedMedicinalProduct.Count == 0)
          {
            PackagedMedicinalProduct = null;
          }

          break;

        case "pediatricUseIndicator":
          PediatricUseIndicator = new fhirCsR5.Models.CodeableConcept();
          PediatricUseIndicator.DeserializeJson(ref reader, options);
          break;

        case "route":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Route = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objRoute = new fhirCsR5.Models.CodeableConcept();
            objRoute.DeserializeJson(ref reader, options);
            Route.Add(objRoute);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Route.Count == 0)
          {
            Route = null;
          }

          break;

        case "specialMeasures":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecialMeasures = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objSpecialMeasures = new fhirCsR5.Models.CodeableConcept();
            objSpecialMeasures.DeserializeJson(ref reader, options);
            SpecialMeasures.Add(objSpecialMeasures);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecialMeasures.Count == 0)
          {
            SpecialMeasures = null;
          }

          break;

        case "status":
          Status = new fhirCsR5.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          StatusDate = reader.GetString();
          break;

        case "_statusDate":
          _StatusDate = new fhirCsR5.Models.Element();
          _StatusDate.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
