// <auto-generated />
// Built from: hl7.fhir.r5.core version: 3.0.1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// An organization that manufactures this ingredient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<IngredientManufacturer>))]
  public class IngredientManufacturer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An organization that manufactures this ingredient.
    /// </summary>
    public Reference Manufacturer { get; set; }
    /// <summary>
    /// The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
    /// </summary>
    public Coding Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Manufacturer != null)
      {
        writer.WritePropertyName("manufacturer");
        Manufacturer.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "manufacturer":
          Manufacturer = new fhirCsR5.Models.Reference();
          Manufacturer.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR5.Models.Coding();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Strength expressed in terms of a reference substance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<IngredientSubstanceStrengthReferenceStrength>))]
  public class IngredientSubstanceStrengthReferenceStrength : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The country or countries for which the strength range applies.
    /// </summary>
    public List<CodeableConcept> Country { get; set; }
    /// <summary>
    /// For when strength is measured at a particular point or distance.
    /// </summary>
    public string MeasurementPoint { get; set; }
    /// <summary>
    /// Extension container element for MeasurementPoint
    /// </summary>
    public Element _MeasurementPoint { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance.
    /// </summary>
    public Ratio StrengthRatio { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance.
    /// </summary>
    public RatioRange StrengthRatioRange { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance.
    /// </summary>
    public Quantity StrengthQuantity { get; set; }
    /// <summary>
    /// Relevant reference substance.
    /// </summary>
    public CodeableReference Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (StrengthRatio != null)
      {
        writer.WritePropertyName("strengthRatio");
        StrengthRatio.SerializeJson(writer, options);
      }

      if (StrengthRatioRange != null)
      {
        writer.WritePropertyName("strengthRatioRange");
        StrengthRatioRange.SerializeJson(writer, options);
      }

      if (StrengthQuantity != null)
      {
        writer.WritePropertyName("strengthQuantity");
        StrengthQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasurementPoint))
      {
        writer.WriteString("measurementPoint", (string)MeasurementPoint!);
      }

      if (_MeasurementPoint != null)
      {
        writer.WritePropertyName("_measurementPoint");
        _MeasurementPoint.SerializeJson(writer, options);
      }

      if ((Country != null) && (Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountry in Country)
        {
          valCountry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCountry = new fhirCsR5.Models.CodeableConcept();
            objCountry.DeserializeJson(ref reader, options);
            Country.Add(objCountry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Country.Count == 0)
          {
            Country = null;
          }

          break;

        case "measurementPoint":
          MeasurementPoint = reader.GetString();
          break;

        case "_measurementPoint":
          _MeasurementPoint = new fhirCsR5.Models.Element();
          _MeasurementPoint.DeserializeJson(ref reader, options);
          break;

        case "strengthRatio":
          StrengthRatio = new fhirCsR5.Models.Ratio();
          StrengthRatio.DeserializeJson(ref reader, options);
          break;

        case "strengthRatioRange":
          StrengthRatioRange = new fhirCsR5.Models.RatioRange();
          StrengthRatioRange.DeserializeJson(ref reader, options);
          break;

        case "strengthQuantity":
          StrengthQuantity = new fhirCsR5.Models.Quantity();
          StrengthQuantity.DeserializeJson(ref reader, options);
          break;

        case "substance":
          Substance = new fhirCsR5.Models.CodeableReference();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<IngredientSubstanceStrength>))]
  public class IngredientSubstanceStrength : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt).
    /// </summary>
    public CodeableConcept Basis { get; set; }
    /// <summary>
    /// The strength per unitary volume (or mass).
    /// </summary>
    public Ratio ConcentrationRatio { get; set; }
    /// <summary>
    /// The strength per unitary volume (or mass).
    /// </summary>
    public RatioRange ConcentrationRatioRange { get; set; }
    /// <summary>
    /// The strength per unitary volume (or mass).
    /// </summary>
    public CodeableConcept ConcentrationCodeableConcept { get; set; }
    /// <summary>
    /// The strength per unitary volume (or mass).
    /// </summary>
    public Quantity ConcentrationQuantity { get; set; }
    /// <summary>
    /// A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
    /// </summary>
    public string ConcentrationText { get; set; }
    /// <summary>
    /// Extension container element for ConcentrationText
    /// </summary>
    public Element _ConcentrationText { get; set; }
    /// <summary>
    /// The country or countries for which the strength range applies.
    /// </summary>
    public List<CodeableConcept> Country { get; set; }
    /// <summary>
    /// For when strength is measured at a particular point or distance.
    /// </summary>
    public string MeasurementPoint { get; set; }
    /// <summary>
    /// Extension container element for MeasurementPoint
    /// </summary>
    public Element _MeasurementPoint { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
    /// </summary>
    public Ratio PresentationRatio { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
    /// </summary>
    public RatioRange PresentationRatioRange { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
    /// </summary>
    public CodeableConcept PresentationCodeableConcept { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
    /// </summary>
    public Quantity PresentationQuantity { get; set; }
    /// <summary>
    /// A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
    /// </summary>
    public string PresentationText { get; set; }
    /// <summary>
    /// Extension container element for PresentationText
    /// </summary>
    public Element _PresentationText { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance.
    /// </summary>
    public List<IngredientSubstanceStrengthReferenceStrength> ReferenceStrength { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (PresentationRatio != null)
      {
        writer.WritePropertyName("presentationRatio");
        PresentationRatio.SerializeJson(writer, options);
      }

      if (PresentationRatioRange != null)
      {
        writer.WritePropertyName("presentationRatioRange");
        PresentationRatioRange.SerializeJson(writer, options);
      }

      if (PresentationCodeableConcept != null)
      {
        writer.WritePropertyName("presentationCodeableConcept");
        PresentationCodeableConcept.SerializeJson(writer, options);
      }

      if (PresentationQuantity != null)
      {
        writer.WritePropertyName("presentationQuantity");
        PresentationQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PresentationText))
      {
        writer.WriteString("presentationText", (string)PresentationText!);
      }

      if (_PresentationText != null)
      {
        writer.WritePropertyName("_presentationText");
        _PresentationText.SerializeJson(writer, options);
      }

      if (ConcentrationRatio != null)
      {
        writer.WritePropertyName("concentrationRatio");
        ConcentrationRatio.SerializeJson(writer, options);
      }

      if (ConcentrationRatioRange != null)
      {
        writer.WritePropertyName("concentrationRatioRange");
        ConcentrationRatioRange.SerializeJson(writer, options);
      }

      if (ConcentrationCodeableConcept != null)
      {
        writer.WritePropertyName("concentrationCodeableConcept");
        ConcentrationCodeableConcept.SerializeJson(writer, options);
      }

      if (ConcentrationQuantity != null)
      {
        writer.WritePropertyName("concentrationQuantity");
        ConcentrationQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ConcentrationText))
      {
        writer.WriteString("concentrationText", (string)ConcentrationText!);
      }

      if (_ConcentrationText != null)
      {
        writer.WritePropertyName("_concentrationText");
        _ConcentrationText.SerializeJson(writer, options);
      }

      if (Basis != null)
      {
        writer.WritePropertyName("basis");
        Basis.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasurementPoint))
      {
        writer.WriteString("measurementPoint", (string)MeasurementPoint!);
      }

      if (_MeasurementPoint != null)
      {
        writer.WritePropertyName("_measurementPoint");
        _MeasurementPoint.SerializeJson(writer, options);
      }

      if ((Country != null) && (Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountry in Country)
        {
          valCountry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReferenceStrength != null) && (ReferenceStrength.Count != 0))
      {
        writer.WritePropertyName("referenceStrength");
        writer.WriteStartArray();

        foreach (IngredientSubstanceStrengthReferenceStrength valReferenceStrength in ReferenceStrength)
        {
          valReferenceStrength.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "basis":
          Basis = new fhirCsR5.Models.CodeableConcept();
          Basis.DeserializeJson(ref reader, options);
          break;

        case "concentrationRatio":
          ConcentrationRatio = new fhirCsR5.Models.Ratio();
          ConcentrationRatio.DeserializeJson(ref reader, options);
          break;

        case "concentrationRatioRange":
          ConcentrationRatioRange = new fhirCsR5.Models.RatioRange();
          ConcentrationRatioRange.DeserializeJson(ref reader, options);
          break;

        case "concentrationCodeableConcept":
          ConcentrationCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ConcentrationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "concentrationQuantity":
          ConcentrationQuantity = new fhirCsR5.Models.Quantity();
          ConcentrationQuantity.DeserializeJson(ref reader, options);
          break;

        case "concentrationText":
          ConcentrationText = reader.GetString();
          break;

        case "_concentrationText":
          _ConcentrationText = new fhirCsR5.Models.Element();
          _ConcentrationText.DeserializeJson(ref reader, options);
          break;

        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCountry = new fhirCsR5.Models.CodeableConcept();
            objCountry.DeserializeJson(ref reader, options);
            Country.Add(objCountry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Country.Count == 0)
          {
            Country = null;
          }

          break;

        case "measurementPoint":
          MeasurementPoint = reader.GetString();
          break;

        case "_measurementPoint":
          _MeasurementPoint = new fhirCsR5.Models.Element();
          _MeasurementPoint.DeserializeJson(ref reader, options);
          break;

        case "presentationRatio":
          PresentationRatio = new fhirCsR5.Models.Ratio();
          PresentationRatio.DeserializeJson(ref reader, options);
          break;

        case "presentationRatioRange":
          PresentationRatioRange = new fhirCsR5.Models.RatioRange();
          PresentationRatioRange.DeserializeJson(ref reader, options);
          break;

        case "presentationCodeableConcept":
          PresentationCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          PresentationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "presentationQuantity":
          PresentationQuantity = new fhirCsR5.Models.Quantity();
          PresentationQuantity.DeserializeJson(ref reader, options);
          break;

        case "presentationText":
          PresentationText = reader.GetString();
          break;

        case "_presentationText":
          _PresentationText = new fhirCsR5.Models.Element();
          _PresentationText.DeserializeJson(ref reader, options);
          break;

        case "referenceStrength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReferenceStrength = new List<IngredientSubstanceStrengthReferenceStrength>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.IngredientSubstanceStrengthReferenceStrength objReferenceStrength = new fhirCsR5.Models.IngredientSubstanceStrengthReferenceStrength();
            objReferenceStrength.DeserializeJson(ref reader, options);
            ReferenceStrength.Add(objReferenceStrength);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReferenceStrength.Count == 0)
          {
            ReferenceStrength = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The substance that comprises this ingredient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<IngredientSubstance>))]
  public class IngredientSubstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code or full resource that represents the ingredient substance.
    /// </summary>
    public CodeableReference Code { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
    /// </summary>
    public List<IngredientSubstanceStrength> Strength { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((Strength != null) && (Strength.Count != 0))
      {
        writer.WritePropertyName("strength");
        writer.WriteStartArray();

        foreach (IngredientSubstanceStrength valStrength in Strength)
        {
          valStrength.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableReference();
          Code.DeserializeJson(ref reader, options);
          break;

        case "strength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Strength = new List<IngredientSubstanceStrength>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.IngredientSubstanceStrength objStrength = new fhirCsR5.Models.IngredientSubstanceStrength();
            objStrength.DeserializeJson(ref reader, options);
            Strength.Add(objStrength);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Strength.Count == 0)
          {
            Strength = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An ingredient of a manufactured item or pharmaceutical product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<Ingredient>))]
  public class Ingredient : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Ingredient";
    /// <summary>
    /// If the ingredient is a known or suspected allergen.
    /// </summary>
    public bool? AllergenicIndicator { get; set; }
    /// <summary>
    /// Extension container element for AllergenicIndicator
    /// </summary>
    public Element _AllergenicIndicator { get; set; }
    /// <summary>
    /// The product which this ingredient is a constituent part of.
    /// </summary>
    public List<Reference> For { get; set; }
    /// <summary>
    /// A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: Antioxidant, Alkalizing Agent.
    /// </summary>
    public List<CodeableConcept> Function { get; set; }
    /// <summary>
    /// A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink.
    /// </summary>
    public CodeableConcept Group { get; set; }
    /// <summary>
    /// The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// An organization that manufactures this ingredient.
    /// </summary>
    public List<IngredientManufacturer> Manufacturer { get; set; }
    /// <summary>
    /// A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Allows filtering of ingredient that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The substance that comprises this ingredient.
    /// </summary>
    public IngredientSubstance Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((For != null) && (For.Count != 0))
      {
        writer.WritePropertyName("for");
        writer.WriteStartArray();

        foreach (Reference valFor in For)
        {
          valFor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if ((Function != null) && (Function.Count != 0))
      {
        writer.WritePropertyName("function");
        writer.WriteStartArray();

        foreach (CodeableConcept valFunction in Function)
        {
          valFunction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Group != null)
      {
        writer.WritePropertyName("group");
        Group.SerializeJson(writer, options);
      }

      if (AllergenicIndicator != null)
      {
        writer.WriteBoolean("allergenicIndicator", (bool)AllergenicIndicator!);
      }

      if (_AllergenicIndicator != null)
      {
        writer.WritePropertyName("_allergenicIndicator");
        _AllergenicIndicator.SerializeJson(writer, options);
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (IngredientManufacturer valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allergenicIndicator":
          AllergenicIndicator = reader.GetBoolean();
          break;

        case "_allergenicIndicator":
          _AllergenicIndicator = new fhirCsR5.Models.Element();
          _AllergenicIndicator.DeserializeJson(ref reader, options);
          break;

        case "for":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          For = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objFor = new fhirCsR5.Models.Reference();
            objFor.DeserializeJson(ref reader, options);
            For.Add(objFor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (For.Count == 0)
          {
            For = null;
          }

          break;

        case "function":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Function = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objFunction = new fhirCsR5.Models.CodeableConcept();
            objFunction.DeserializeJson(ref reader, options);
            Function.Add(objFunction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Function.Count == 0)
          {
            Function = null;
          }

          break;

        case "group":
          Group = new fhirCsR5.Models.CodeableConcept();
          Group.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR5.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<IngredientManufacturer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.IngredientManufacturer objManufacturer = new fhirCsR5.Models.IngredientManufacturer();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "role":
          Role = new fhirCsR5.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "substance":
          Substance = new fhirCsR5.Models.IngredientSubstance();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Ingredient.status field
  /// </summary>
  public static class IngredientStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
