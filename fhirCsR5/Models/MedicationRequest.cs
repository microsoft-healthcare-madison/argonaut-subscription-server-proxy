// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-snapshot1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Indicates how the medication is to be used by the patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationRequestDose>))]
  public class MedicationRequestDose : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "CompazineÂ® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed. In general, each prescribed drug will be a separate Medication Request. 
    /// When drug orders are grouped together at the time of order entry,  but each of the drugs can be manipulated independently e.g. changing the status of one order to "completed" or "cancelled", changing another order status to "on-hold", the method to "group" all of the medication requests together is to use  MedicationRequest.groupIdentifier element.  All of the orders grouped together in this manner will have the same groupIdentifier, and separately, each order in the group may have a unique identifier.  
    /// There are cases that require grouping of Medication orders together when it is necessary to specify optionality e.g. order two drugs at one time, but stating either of these drugs may be used to treat the patient.  The use of a RequestGroup should be used as a parent for the Medication orders that require this type of grouping. An example when it may be necessary to group medication orders together is when you specify timing relationships e.g. order drug "xyz" with dose 123, then taper the same drug to a different dose after some interval of time
    /// precedence:
    /// e.g. give drug "abc" followed by drug "def"
    /// e.g. give drug 30 minutes before some procedure was performed
    /// more generically this supports - hierarchical groups of actions, where each specific action references the action to be performed (in terms of a Request resource), and each group describes additional behavior, relationships, and applicable conditions between the actions in the overall group.
    /// Note that one should NOT use the List or Composition resource to accomplish the above requirements.  You may use List or Composition for other business requirements, but not to address the specific requirements of grouping medication orders.
    /// </summary>
    public List<Dosage> DosageInstruction { get; set; }
    /// <summary>
    /// The period over which the medication is to be taken.  Where there are multiple dosageInstruction lines (for example, tapering doses), this is the earliest date and the latest end date of the dosageInstructions.
    /// </summary>
    public string EffectiveDosePeriod { get; set; }
    /// <summary>
    /// Extension container element for EffectiveDosePeriod
    /// </summary>
    public Element _EffectiveDosePeriod { get; set; }
    /// <summary>
    /// The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
    /// </summary>
    public string RenderedDosageInstruction { get; set; }
    /// <summary>
    /// Extension container element for RenderedDosageInstruction
    /// </summary>
    public Element _RenderedDosageInstruction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(RenderedDosageInstruction))
      {
        writer.WriteString("renderedDosageInstruction", (string)RenderedDosageInstruction!);
      }

      if (_RenderedDosageInstruction != null)
      {
        writer.WritePropertyName("_renderedDosageInstruction");
        _RenderedDosageInstruction.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveDosePeriod))
      {
        writer.WriteString("effectiveDosePeriod", (string)EffectiveDosePeriod!);
      }

      if (_EffectiveDosePeriod != null)
      {
        writer.WritePropertyName("_effectiveDosePeriod");
        _EffectiveDosePeriod.SerializeJson(writer, options);
      }

      if ((DosageInstruction != null) && (DosageInstruction.Count != 0))
      {
        writer.WritePropertyName("dosageInstruction");
        writer.WriteStartArray();

        foreach (Dosage valDosageInstruction in DosageInstruction)
        {
          valDosageInstruction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dosageInstruction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DosageInstruction = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Dosage objDosageInstruction = new fhirCsR5.Models.Dosage();
            objDosageInstruction.DeserializeJson(ref reader, options);
            DosageInstruction.Add(objDosageInstruction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DosageInstruction.Count == 0)
          {
            DosageInstruction = null;
          }

          break;

        case "effectiveDosePeriod":
          EffectiveDosePeriod = reader.GetString();
          break;

        case "_effectiveDosePeriod":
          _EffectiveDosePeriod = new fhirCsR5.Models.Element();
          _EffectiveDosePeriod.DeserializeJson(ref reader, options);
          break;

        case "renderedDosageInstruction":
          RenderedDosageInstruction = reader.GetString();
          break;

        case "_renderedDosageInstruction":
          _RenderedDosageInstruction = new fhirCsR5.Models.Element();
          _RenderedDosageInstruction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// If populating this element, either the quantity or the duration must be included.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationRequestDispenseRequestInitialFill>))]
  public class MedicationRequestDispenseRequestInitialFill : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The length of time that the first dispense is expected to last.
    /// </summary>
    public Duration Duration { get; set; }
    /// <summary>
    /// The amount or quantity to provide as part of the first dispense.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (Duration != null)
      {
        writer.WritePropertyName("duration");
        Duration.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "duration":
          Duration = new fhirCsR5.Models.Duration();
          Duration.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR5.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationRequestDispenseRequest>))]
  public class MedicationRequestDispenseRequest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The minimum period of time that must occur between dispenses of the medication.
    /// </summary>
    public Duration DispenseInterval { get; set; }
    /// <summary>
    /// Indicates the intended performing Organization that will dispense the medication as specified by the prescriber.
    /// </summary>
    public Reference Dispenser { get; set; }
    /// <summary>
    /// Provides additional information to the dispenser, for example, counselling to be provided to the patient.
    /// </summary>
    public List<Annotation> DispenserInstruction { get; set; }
    /// <summary>
    /// Provides information about the type of adherence packaging to be supplied for the medication dispense.
    /// </summary>
    public CodeableConcept DoseAdministrationAid { get; set; }
    /// <summary>
    /// In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage). When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
    /// </summary>
    public Duration ExpectedSupplyDuration { get; set; }
    /// <summary>
    /// If populating this element, either the quantity or the duration must be included.
    /// </summary>
    public MedicationRequestDispenseRequestInitialFill InitialFill { get; set; }
    /// <summary>
    /// If displaying "number of authorized fills", add 1 to this number.
    /// </summary>
    public uint? NumberOfRepeatsAllowed { get; set; }
    /// <summary>
    /// The amount that is to be dispensed for one fill.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// It reflects the prescribers' perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.
    /// </summary>
    public Period ValidityPeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (InitialFill != null)
      {
        writer.WritePropertyName("initialFill");
        InitialFill.SerializeJson(writer, options);
      }

      if (DispenseInterval != null)
      {
        writer.WritePropertyName("dispenseInterval");
        DispenseInterval.SerializeJson(writer, options);
      }

      if (ValidityPeriod != null)
      {
        writer.WritePropertyName("validityPeriod");
        ValidityPeriod.SerializeJson(writer, options);
      }

      if (NumberOfRepeatsAllowed != null)
      {
        writer.WriteNumber("numberOfRepeatsAllowed", (uint)NumberOfRepeatsAllowed!);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (ExpectedSupplyDuration != null)
      {
        writer.WritePropertyName("expectedSupplyDuration");
        ExpectedSupplyDuration.SerializeJson(writer, options);
      }

      if (Dispenser != null)
      {
        writer.WritePropertyName("dispenser");
        Dispenser.SerializeJson(writer, options);
      }

      if ((DispenserInstruction != null) && (DispenserInstruction.Count != 0))
      {
        writer.WritePropertyName("dispenserInstruction");
        writer.WriteStartArray();

        foreach (Annotation valDispenserInstruction in DispenserInstruction)
        {
          valDispenserInstruction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DoseAdministrationAid != null)
      {
        writer.WritePropertyName("doseAdministrationAid");
        DoseAdministrationAid.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dispenseInterval":
          DispenseInterval = new fhirCsR5.Models.Duration();
          DispenseInterval.DeserializeJson(ref reader, options);
          break;

        case "dispenser":
          Dispenser = new fhirCsR5.Models.Reference();
          Dispenser.DeserializeJson(ref reader, options);
          break;

        case "dispenserInstruction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DispenserInstruction = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objDispenserInstruction = new fhirCsR5.Models.Annotation();
            objDispenserInstruction.DeserializeJson(ref reader, options);
            DispenserInstruction.Add(objDispenserInstruction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DispenserInstruction.Count == 0)
          {
            DispenserInstruction = null;
          }

          break;

        case "doseAdministrationAid":
          DoseAdministrationAid = new fhirCsR5.Models.CodeableConcept();
          DoseAdministrationAid.DeserializeJson(ref reader, options);
          break;

        case "expectedSupplyDuration":
          ExpectedSupplyDuration = new fhirCsR5.Models.Duration();
          ExpectedSupplyDuration.DeserializeJson(ref reader, options);
          break;

        case "initialFill":
          InitialFill = new fhirCsR5.Models.MedicationRequestDispenseRequestInitialFill();
          InitialFill.DeserializeJson(ref reader, options);
          break;

        case "numberOfRepeatsAllowed":
          NumberOfRepeatsAllowed = reader.GetUInt32();
          break;

        case "quantity":
          Quantity = new fhirCsR5.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "validityPeriod":
          ValidityPeriod = new fhirCsR5.Models.Period();
          ValidityPeriod.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationRequestSubstitution>))]
  public class MedicationRequestSubstitution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
    /// </summary>
    public bool? AllowedBoolean { get; set; }
    /// <summary>
    /// Extension container element for AllowedBoolean
    /// </summary>
    public Element _AllowedBoolean { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
    /// </summary>
    public CodeableConcept AllowedCodeableConcept { get; set; }
    /// <summary>
    /// Indicates the reason for the substitution, or why substitution must or must not be performed.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (AllowedBoolean != null)
      {
        writer.WriteBoolean("allowedBoolean", (bool)AllowedBoolean!);
      }

      if (_AllowedBoolean != null)
      {
        writer.WritePropertyName("_allowedBoolean");
        _AllowedBoolean.SerializeJson(writer, options);
      }

      if (AllowedCodeableConcept != null)
      {
        writer.WritePropertyName("allowedCodeableConcept");
        AllowedCodeableConcept.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowedBoolean":
          AllowedBoolean = reader.GetBoolean();
          break;

        case "_allowedBoolean":
          _AllowedBoolean = new fhirCsR5.Models.Element();
          _AllowedBoolean.DeserializeJson(ref reader, options);
          break;

        case "allowedCodeableConcept":
          AllowedCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          AllowedCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR5.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationRequest>))]
  public class MedicationRequest : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MedicationRequest";
    /// <summary>
    /// The date (and perhaps time) when the prescription was initially written or authored on.
    /// </summary>
    public string AuthoredOn { get; set; }
    /// <summary>
    /// Extension container element for AuthoredOn
    /// </summary>
    public Element _AuthoredOn { get; set; }
    /// <summary>
    /// A plan or request that is fulfilled in whole or in part by this medication request.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// The category can be used to include where the medication is expected to be consumed or other types of requests.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// This attribute should not be confused with the protocol of the medication.
    /// </summary>
    public CodeableConcept CourseOfTherapyType { get; set; }
    /// <summary>
    /// This element can include a detected issue that has been identified either by a decision support system or by a clinician and may include information on the steps that were taken to address the issue.
    /// </summary>
    public List<Reference> DetectedIssue { get; set; }
    /// <summary>
    /// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
    /// </summary>
    public MedicationRequestDispenseRequest DispenseRequest { get; set; }
    /// <summary>
    /// If do not perform is not specified, the request is a positive request e.g. "do perform".
    /// </summary>
    public bool? DoNotPerform { get; set; }
    /// <summary>
    /// Extension container element for DoNotPerform
    /// </summary>
    public Element _DoNotPerform { get; set; }
    /// <summary>
    /// Indicates how the medication is to be used by the patient.
    /// </summary>
    public MedicationRequestDose Dose { get; set; }
    /// <summary>
    /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter."    If there is a need to link to episodes of care they will be handled with an extension.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// This might not include provenances for all versions of the request â only those deemed ârelevantâ or important. This SHALL NOT include the provenance associated with this current version of the resource. (If that provenance is deemed to be a ârelevantâ change, it will need to be added as part of a later update. Until then, it can be queried directly as the provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
    /// </summary>
    public List<Reference> EventHistory { get; set; }
    /// <summary>
    /// A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
    /// </summary>
    public Identifier GroupIdentifier { get; set; }
    /// <summary>
    /// This is a business identifier, not a resource identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The person or organization who provided the information about this request, if the source is someone other than the requestor.  This is often used when the MedicationRequest is reported by another person.
    /// </summary>
    public Reference InformationSource { get; set; }
    /// <summary>
    /// The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
    /// </summary>
    public List<string> InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public List<Element> _InstantiatesCanonical { get; set; }
    /// <summary>
    /// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
    /// </summary>
    public List<string> InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public List<Element> _InstantiatesUri { get; set; }
    /// <summary>
    /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
    /// </summary>
    public List<Reference> Insurance { get; set; }
    /// <summary>
    /// It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.
    /// An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.
    /// This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the Medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource.
    /// </summary>
    public CodeableReference Medication { get; set; }
    /// <summary>
    /// Extra information about the prescription that could not be conveyed by the other attributes.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// If specified without indicating a performer, this indicates that the performer must be of the specified type. If specified with a performer then it indicates the requirements of the performer if the designated performer is not available.
    /// </summary>
    public CodeableConcept PerformerType { get; set; }
    /// <summary>
    /// Indicates how quickly the Medication Request should be addressed with respect to other requests.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// A link to a resource representing an earlier order related order or prescription.
    /// </summary>
    public Reference PriorPrescription { get; set; }
    /// <summary>
    /// This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
    /// </summary>
    public List<CodeableReference> Reason { get; set; }
    /// <summary>
    /// The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
    /// </summary>
    public Reference Recorder { get; set; }
    /// <summary>
    /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
    /// </summary>
    public bool? Reported { get; set; }
    /// <summary>
    /// Extension container element for Reported
    /// </summary>
    public Element _Reported { get; set; }
    /// <summary>
    /// The individual, organization, or device that initiated the request and has responsibility for its activation.
    /// </summary>
    public Reference Requester { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// Clinical decision support systems should take the status into account when determining which medications to include in their algorithms.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The date (and perhaps time) when the status was changed.
    /// </summary>
    public string StatusChanged { get; set; }
    /// <summary>
    /// Extension container element for StatusChanged
    /// </summary>
    public Element _StatusChanged { get; set; }
    /// <summary>
    /// This is generally only used for "exception" statuses such as "suspended" or "cancelled". The reason why the MedicationRequest was created at all is captured in reasonCode, not here.
    /// </summary>
    public CodeableConcept StatusReason { get; set; }
    /// <summary>
    /// The subject on a medication request is mandatory.  For the secondary use case where the actual subject is not provided, there still must be an anonymized subject specified.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
    /// </summary>
    public MedicationRequestSubstitution Substitution { get; set; }
    /// <summary>
    /// This attribute can be used to reference a MedicationUsage about the patients' medication use.
    /// </summary>
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesCanonical != null) && (InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("instantiatesCanonical");
        writer.WriteStartArray();

        foreach (string valInstantiatesCanonical in InstantiatesCanonical)
        {
          writer.WriteStringValue(valInstantiatesCanonical);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesCanonical != null) && (_InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("_instantiatesCanonical");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesCanonical in _InstantiatesCanonical)
        {
          val_InstantiatesCanonical.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesUri != null) && (InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("instantiatesUri");
        writer.WriteStartArray();

        foreach (string valInstantiatesUri in InstantiatesUri)
        {
          writer.WriteStringValue(valInstantiatesUri);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesUri != null) && (_InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("_instantiatesUri");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesUri in _InstantiatesUri)
        {
          val_InstantiatesUri.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PriorPrescription != null)
      {
        writer.WritePropertyName("priorPrescription");
        PriorPrescription.SerializeJson(writer, options);
      }

      if (GroupIdentifier != null)
      {
        writer.WritePropertyName("groupIdentifier");
        GroupIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (StatusReason != null)
      {
        writer.WritePropertyName("statusReason");
        StatusReason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StatusChanged))
      {
        writer.WriteString("statusChanged", (string)StatusChanged!);
      }

      if (_StatusChanged != null)
      {
        writer.WritePropertyName("_statusChanged");
        _StatusChanged.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Intent))
      {
        writer.WriteString("intent", (string)Intent!);
      }

      if (_Intent != null)
      {
        writer.WritePropertyName("_intent");
        _Intent.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (DoNotPerform != null)
      {
        writer.WriteBoolean("doNotPerform", (bool)DoNotPerform!);
      }

      if (_DoNotPerform != null)
      {
        writer.WritePropertyName("_doNotPerform");
        _DoNotPerform.SerializeJson(writer, options);
      }

      if (Medication != null)
      {
        writer.WritePropertyName("medication");
        Medication.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (InformationSource != null)
      {
        writer.WritePropertyName("informationSource");
        InformationSource.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if ((SupportingInformation != null) && (SupportingInformation.Count != 0))
      {
        writer.WritePropertyName("supportingInformation");
        writer.WriteStartArray();

        foreach (Reference valSupportingInformation in SupportingInformation)
        {
          valSupportingInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(AuthoredOn))
      {
        writer.WriteString("authoredOn", (string)AuthoredOn!);
      }

      if (_AuthoredOn != null)
      {
        writer.WritePropertyName("_authoredOn");
        _AuthoredOn.SerializeJson(writer, options);
      }

      if (Requester != null)
      {
        writer.WritePropertyName("requester");
        Requester.SerializeJson(writer, options);
      }

      if (Reported != null)
      {
        writer.WriteBoolean("reported", (bool)Reported!);
      }

      if (_Reported != null)
      {
        writer.WritePropertyName("_reported");
        _Reported.SerializeJson(writer, options);
      }

      if (PerformerType != null)
      {
        writer.WritePropertyName("performerType");
        PerformerType.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if (Recorder != null)
      {
        writer.WritePropertyName("recorder");
        Recorder.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableReference valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (CourseOfTherapyType != null)
      {
        writer.WritePropertyName("courseOfTherapyType");
        CourseOfTherapyType.SerializeJson(writer, options);
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (Reference valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Dose != null)
      {
        writer.WritePropertyName("dose");
        Dose.SerializeJson(writer, options);
      }

      if (DispenseRequest != null)
      {
        writer.WritePropertyName("dispenseRequest");
        DispenseRequest.SerializeJson(writer, options);
      }

      if (Substitution != null)
      {
        writer.WritePropertyName("substitution");
        Substitution.SerializeJson(writer, options);
      }

      if ((DetectedIssue != null) && (DetectedIssue.Count != 0))
      {
        writer.WritePropertyName("detectedIssue");
        writer.WriteStartArray();

        foreach (Reference valDetectedIssue in DetectedIssue)
        {
          valDetectedIssue.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((EventHistory != null) && (EventHistory.Count != 0))
      {
        writer.WritePropertyName("eventHistory");
        writer.WriteStartArray();

        foreach (Reference valEventHistory in EventHistory)
        {
          valEventHistory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authoredOn":
          AuthoredOn = reader.GetString();
          break;

        case "_authoredOn":
          _AuthoredOn = new fhirCsR5.Models.Element();
          _AuthoredOn.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCategory = new fhirCsR5.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "courseOfTherapyType":
          CourseOfTherapyType = new fhirCsR5.Models.CodeableConcept();
          CourseOfTherapyType.DeserializeJson(ref reader, options);
          break;

        case "detectedIssue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DetectedIssue = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objDetectedIssue = new fhirCsR5.Models.Reference();
            objDetectedIssue.DeserializeJson(ref reader, options);
            DetectedIssue.Add(objDetectedIssue);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DetectedIssue.Count == 0)
          {
            DetectedIssue = null;
          }

          break;

        case "dispenseRequest":
          DispenseRequest = new fhirCsR5.Models.MedicationRequestDispenseRequest();
          DispenseRequest.DeserializeJson(ref reader, options);
          break;

        case "doNotPerform":
          DoNotPerform = reader.GetBoolean();
          break;

        case "_doNotPerform":
          _DoNotPerform = new fhirCsR5.Models.Element();
          _DoNotPerform.DeserializeJson(ref reader, options);
          break;

        case "dose":
          Dose = new fhirCsR5.Models.MedicationRequestDose();
          Dose.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR5.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "eventHistory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          EventHistory = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objEventHistory = new fhirCsR5.Models.Reference();
            objEventHistory.DeserializeJson(ref reader, options);
            EventHistory.Add(objEventHistory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (EventHistory.Count == 0)
          {
            EventHistory = null;
          }

          break;

        case "groupIdentifier":
          GroupIdentifier = new fhirCsR5.Models.Identifier();
          GroupIdentifier.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "informationSource":
          InformationSource = new fhirCsR5.Models.Reference();
          InformationSource.DeserializeJson(ref reader, options);
          break;

        case "instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesCanonical = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesCanonical.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesCanonical.Count == 0)
          {
            InstantiatesCanonical = null;
          }

          break;

        case "_instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesCanonical = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_InstantiatesCanonical = new fhirCsR5.Models.Element();
            obj_InstantiatesCanonical.DeserializeJson(ref reader, options);
            _InstantiatesCanonical.Add(obj_InstantiatesCanonical);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesCanonical.Count == 0)
          {
            _InstantiatesCanonical = null;
          }

          break;

        case "instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesUri = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesUri.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesUri.Count == 0)
          {
            InstantiatesUri = null;
          }

          break;

        case "_instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesUri = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_InstantiatesUri = new fhirCsR5.Models.Element();
            obj_InstantiatesUri.DeserializeJson(ref reader, options);
            _InstantiatesUri.Add(obj_InstantiatesUri);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesUri.Count == 0)
          {
            _InstantiatesUri = null;
          }

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objInsurance = new fhirCsR5.Models.Reference();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new fhirCsR5.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "medication":
          Medication = new fhirCsR5.Models.CodeableReference();
          Medication.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "performer":
          Performer = new fhirCsR5.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "performerType":
          PerformerType = new fhirCsR5.Models.CodeableConcept();
          PerformerType.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR5.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "priorPrescription":
          PriorPrescription = new fhirCsR5.Models.Reference();
          PriorPrescription.DeserializeJson(ref reader, options);
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objReason = new fhirCsR5.Models.CodeableReference();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "recorder":
          Recorder = new fhirCsR5.Models.Reference();
          Recorder.DeserializeJson(ref reader, options);
          break;

        case "reported":
          Reported = reader.GetBoolean();
          break;

        case "_reported":
          _Reported = new fhirCsR5.Models.Element();
          _Reported.DeserializeJson(ref reader, options);
          break;

        case "requester":
          Requester = new fhirCsR5.Models.Reference();
          Requester.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusChanged":
          StatusChanged = reader.GetString();
          break;

        case "_statusChanged":
          _StatusChanged = new fhirCsR5.Models.Element();
          _StatusChanged.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          StatusReason = new fhirCsR5.Models.CodeableConcept();
          StatusReason.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "substitution":
          Substitution = new fhirCsR5.Models.MedicationRequestSubstitution();
          Substitution.DeserializeJson(ref reader, options);
          break;

        case "supportingInformation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInformation = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSupportingInformation = new fhirCsR5.Models.Reference();
            objSupportingInformation.DeserializeJson(ref reader, options);
            SupportingInformation.Add(objSupportingInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInformation.Count == 0)
          {
            SupportingInformation = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MedicationRequest.intent field
  /// </summary>
  public static class MedicationRequestIntentCodes {
    public const string PROPOSAL = "proposal";
    public const string PLAN = "plan";
    public const string ORDER = "order";
    public const string ORIGINAL_ORDER = "original-order";
    public const string REFLEX_ORDER = "reflex-order";
    public const string FILLER_ORDER = "filler-order";
    public const string INSTANCE_ORDER = "instance-order";
    public const string OPTION = "option";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposal",
      "plan",
      "order",
      "original-order",
      "reflex-order",
      "filler-order",
      "instance-order",
      "option",
    };
  }
  /// <summary>
  /// Code Values for the MedicationRequest.priority field
  /// </summary>
  public static class MedicationRequestPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
    public static HashSet<string> Values = new HashSet<string>() {
      "routine",
      "urgent",
      "asap",
      "stat",
    };
  }
  /// <summary>
  /// Code Values for the MedicationRequest.status field
  /// </summary>
  public static class MedicationRequestStatusCodes {
    public const string ACTIVE = "active";
    public const string ON_HOLD = "on-hold";
    public const string ENDED = "ended";
    public const string STOPPED = "stopped";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string DRAFT = "draft";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "active",
      "on-hold",
      "ended",
      "stopped",
      "completed",
      "cancelled",
      "entered-in-error",
      "draft",
      "unknown",
    };
  }
}
