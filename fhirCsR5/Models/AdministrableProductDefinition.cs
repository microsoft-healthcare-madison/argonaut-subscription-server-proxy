// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-snapshot1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Characteristics e.g. a products onset of action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdministrableProductDefinitionProperty>))]
  public class AdministrableProductDefinitionProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The status of characteristic e.g. assigned or pending.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// A code expressing the type of characteristic.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "status":
          Status = new fhirCsR5.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR5.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR5.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR5.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A species specific time during which consumption of animal product is not appropriate.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod>))]
  public class AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Extra information about the withdrawal period.
    /// </summary>
    public string SupportingInformation { get; set; }
    /// <summary>
    /// Extension container element for SupportingInformation
    /// </summary>
    public Element _SupportingInformation { get; set; }
    /// <summary>
    /// Coded expression for the type of tissue for which the withdrawal period applues, e.g. meat, milk.
    /// </summary>
    public CodeableConcept Tissue { get; set; }
    /// <summary>
    /// A value for the time.
    /// </summary>
    public Quantity Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Tissue != null)
      {
        writer.WritePropertyName("tissue");
        Tissue.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WritePropertyName("value");
        Value.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SupportingInformation))
      {
        writer.WriteString("supportingInformation", (string)SupportingInformation!);
      }

      if (_SupportingInformation != null)
      {
        writer.WritePropertyName("_supportingInformation");
        _SupportingInformation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "supportingInformation":
          SupportingInformation = reader.GetString();
          break;

        case "_supportingInformation":
          _SupportingInformation = new fhirCsR5.Models.Element();
          _SupportingInformation.DeserializeJson(ref reader, options);
          break;

        case "tissue":
          Tissue = new fhirCsR5.Models.CodeableConcept();
          Tissue.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = new fhirCsR5.Models.Quantity();
          Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A species for which this route applies.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdministrableProductDefinitionRouteOfAdministrationTargetSpecies>))]
  public class AdministrableProductDefinitionRouteOfAdministrationTargetSpecies : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coded expression for the species.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A species specific time during which consumption of animal product is not appropriate.
    /// </summary>
    public List<AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod> WithdrawalPeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((WithdrawalPeriod != null) && (WithdrawalPeriod.Count != 0))
      {
        writer.WritePropertyName("withdrawalPeriod");
        writer.WriteStartArray();

        foreach (AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod valWithdrawalPeriod in WithdrawalPeriod)
        {
          valWithdrawalPeriod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "withdrawalPeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          WithdrawalPeriod = new List<AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod objWithdrawalPeriod = new fhirCsR5.Models.AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod();
            objWithdrawalPeriod.DeserializeJson(ref reader, options);
            WithdrawalPeriod.Add(objWithdrawalPeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (WithdrawalPeriod.Count == 0)
          {
            WithdrawalPeriod = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdministrableProductDefinitionRouteOfAdministration>))]
  public class AdministrableProductDefinitionRouteOfAdministration : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coded expression for the route.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The first dose (dose quantity) administered can be specified for the product, using a numerical value and its unit of measurement.
    /// </summary>
    public Quantity FirstDose { get; set; }
    /// <summary>
    /// The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered.
    /// </summary>
    public Quantity MaxDosePerDay { get; set; }
    /// <summary>
    /// The maximum dose per treatment period that can be administered.
    /// </summary>
    public Ratio MaxDosePerTreatmentPeriod { get; set; }
    /// <summary>
    /// The maximum single dose that can be administered, can be specified using a numerical value and its unit of measurement.
    /// </summary>
    public Quantity MaxSingleDose { get; set; }
    /// <summary>
    /// The maximum treatment period during which an Investigational Medicinal Product can be administered.
    /// </summary>
    public Duration MaxTreatmentPeriod { get; set; }
    /// <summary>
    /// A species for which this route applies.
    /// </summary>
    public List<AdministrableProductDefinitionRouteOfAdministrationTargetSpecies> TargetSpecies { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (FirstDose != null)
      {
        writer.WritePropertyName("firstDose");
        FirstDose.SerializeJson(writer, options);
      }

      if (MaxSingleDose != null)
      {
        writer.WritePropertyName("maxSingleDose");
        MaxSingleDose.SerializeJson(writer, options);
      }

      if (MaxDosePerDay != null)
      {
        writer.WritePropertyName("maxDosePerDay");
        MaxDosePerDay.SerializeJson(writer, options);
      }

      if (MaxDosePerTreatmentPeriod != null)
      {
        writer.WritePropertyName("maxDosePerTreatmentPeriod");
        MaxDosePerTreatmentPeriod.SerializeJson(writer, options);
      }

      if (MaxTreatmentPeriod != null)
      {
        writer.WritePropertyName("maxTreatmentPeriod");
        MaxTreatmentPeriod.SerializeJson(writer, options);
      }

      if ((TargetSpecies != null) && (TargetSpecies.Count != 0))
      {
        writer.WritePropertyName("targetSpecies");
        writer.WriteStartArray();

        foreach (AdministrableProductDefinitionRouteOfAdministrationTargetSpecies valTargetSpecies in TargetSpecies)
        {
          valTargetSpecies.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "firstDose":
          FirstDose = new fhirCsR5.Models.Quantity();
          FirstDose.DeserializeJson(ref reader, options);
          break;

        case "maxDosePerDay":
          MaxDosePerDay = new fhirCsR5.Models.Quantity();
          MaxDosePerDay.DeserializeJson(ref reader, options);
          break;

        case "maxDosePerTreatmentPeriod":
          MaxDosePerTreatmentPeriod = new fhirCsR5.Models.Ratio();
          MaxDosePerTreatmentPeriod.DeserializeJson(ref reader, options);
          break;

        case "maxSingleDose":
          MaxSingleDose = new fhirCsR5.Models.Quantity();
          MaxSingleDose.DeserializeJson(ref reader, options);
          break;

        case "maxTreatmentPeriod":
          MaxTreatmentPeriod = new fhirCsR5.Models.Duration();
          MaxTreatmentPeriod.DeserializeJson(ref reader, options);
          break;

        case "targetSpecies":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TargetSpecies = new List<AdministrableProductDefinitionRouteOfAdministrationTargetSpecies>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdministrableProductDefinitionRouteOfAdministrationTargetSpecies objTargetSpecies = new fhirCsR5.Models.AdministrableProductDefinitionRouteOfAdministrationTargetSpecies();
            objTargetSpecies.DeserializeJson(ref reader, options);
            TargetSpecies.Add(objTargetSpecies);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TargetSpecies.Count == 0)
          {
            TargetSpecies = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AdministrableProductDefinition>))]
  public class AdministrableProductDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "AdministrableProductDefinition";
    /// <summary>
    /// The dose form of the final product after necessary reconstitution or processing. Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form was 'powder for solution for injection', the administrable dose form could be 'solution for injection' (once mixed with another item having manufactured form 'solvent for solution for injection').
    /// </summary>
    public CodeableConcept AdministrableDoseForm { get; set; }
    /// <summary>
    /// A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product. This is not intended for devices that are just co-packaged.
    /// </summary>
    public Reference Device { get; set; }
    /// <summary>
    /// The medicinal product that this is a prepared administrable form of. This element is not a reference to the item(s) that make up this administrable form (for which see AdministrableProductDefinition.producedFrom). It is medicinal product as a whole, which may have several components (as well as packaging, devices etc.), that are given to the patient in this final administrable form. A single medicinal product may have several different administrable products (e.g. a tablet and a cream), and these could have different administrable forms (e.g. tablet as oral solid, or tablet crushed).
    /// </summary>
    public List<Reference> FormOf { get; set; }
    /// <summary>
    /// An identifier for the administrable product.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton (via AdministrableProductDefinition.producedFrom) to state which component items are used to make this, or using by incoming references from the Ingredient resource, to state in detail which substances exist within this. This element allows a basic coded ingredient to be used.
    /// </summary>
    public List<CodeableConcept> Ingredient { get; set; }
    /// <summary>
    /// The constituent manufactured item(s) that this administrable product is produced from. Either a single item, or several that are mixed before administration (e.g. a power item and a solvent item, to make a consumable solution). Note the items this is produced from are not raw ingredients (see AdministrableProductDefinition.ingredient), but manufactured medication items (ManufacturedItemDefinitions), which may be combined or prepared and transformed for patient use. The constituent items that this administrable form is produced from are all part of the product (for which see AdministrableProductDefinition.formOf).
    /// </summary>
    public List<Reference> ProducedFrom { get; set; }
    /// <summary>
    /// Characteristics e.g. a products onset of action.
    /// </summary>
    public List<AdministrableProductDefinitionProperty> Property { get; set; }
    /// <summary>
    /// The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route.
    /// </summary>
    public List<AdministrableProductDefinitionRouteOfAdministration> RouteOfAdministration { get; set; }
    /// <summary>
    /// Allows filtering of administrable products that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in 'contains 5 ml per vial').
    /// </summary>
    public CodeableConcept UnitOfPresentation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((FormOf != null) && (FormOf.Count != 0))
      {
        writer.WritePropertyName("formOf");
        writer.WriteStartArray();

        foreach (Reference valFormOf in FormOf)
        {
          valFormOf.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AdministrableDoseForm != null)
      {
        writer.WritePropertyName("administrableDoseForm");
        AdministrableDoseForm.SerializeJson(writer, options);
      }

      if (UnitOfPresentation != null)
      {
        writer.WritePropertyName("unitOfPresentation");
        UnitOfPresentation.SerializeJson(writer, options);
      }

      if ((ProducedFrom != null) && (ProducedFrom.Count != 0))
      {
        writer.WritePropertyName("producedFrom");
        writer.WriteStartArray();

        foreach (Reference valProducedFrom in ProducedFrom)
        {
          valProducedFrom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Ingredient != null) && (Ingredient.Count != 0))
      {
        writer.WritePropertyName("ingredient");
        writer.WriteStartArray();

        foreach (CodeableConcept valIngredient in Ingredient)
        {
          valIngredient.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Device != null)
      {
        writer.WritePropertyName("device");
        Device.SerializeJson(writer, options);
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (AdministrableProductDefinitionProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RouteOfAdministration != null) && (RouteOfAdministration.Count != 0))
      {
        writer.WritePropertyName("routeOfAdministration");
        writer.WriteStartArray();

        foreach (AdministrableProductDefinitionRouteOfAdministration valRouteOfAdministration in RouteOfAdministration)
        {
          valRouteOfAdministration.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "administrableDoseForm":
          AdministrableDoseForm = new fhirCsR5.Models.CodeableConcept();
          AdministrableDoseForm.DeserializeJson(ref reader, options);
          break;

        case "device":
          Device = new fhirCsR5.Models.Reference();
          Device.DeserializeJson(ref reader, options);
          break;

        case "formOf":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FormOf = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objFormOf = new fhirCsR5.Models.Reference();
            objFormOf.DeserializeJson(ref reader, options);
            FormOf.Add(objFormOf);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FormOf.Count == 0)
          {
            FormOf = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "ingredient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Ingredient = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objIngredient = new fhirCsR5.Models.CodeableConcept();
            objIngredient.DeserializeJson(ref reader, options);
            Ingredient.Add(objIngredient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Ingredient.Count == 0)
          {
            Ingredient = null;
          }

          break;

        case "producedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProducedFrom = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objProducedFrom = new fhirCsR5.Models.Reference();
            objProducedFrom.DeserializeJson(ref reader, options);
            ProducedFrom.Add(objProducedFrom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProducedFrom.Count == 0)
          {
            ProducedFrom = null;
          }

          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<AdministrableProductDefinitionProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdministrableProductDefinitionProperty objProperty = new fhirCsR5.Models.AdministrableProductDefinitionProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "routeOfAdministration":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RouteOfAdministration = new List<AdministrableProductDefinitionRouteOfAdministration>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AdministrableProductDefinitionRouteOfAdministration objRouteOfAdministration = new fhirCsR5.Models.AdministrableProductDefinitionRouteOfAdministration();
            objRouteOfAdministration.DeserializeJson(ref reader, options);
            RouteOfAdministration.Add(objRouteOfAdministration);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RouteOfAdministration.Count == 0)
          {
            RouteOfAdministration = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "unitOfPresentation":
          UnitOfPresentation = new fhirCsR5.Models.CodeableConcept();
          UnitOfPresentation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the AdministrableProductDefinition.status field
  /// </summary>
  public static class AdministrableProductDefinitionStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
