// <auto-generated />
// Built from: hl7.fhir.r5.core version: 3.0.1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Associated or related medications. For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeRelatedMedicationKnowledge>))]
  public class MedicationKnowledgeRelatedMedicationKnowledge : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Associated documentation about the associated medication knowledge.
    /// </summary>
    public List<Reference> Reference { get; set; }
    /// <summary>
    /// The category of the associated medication knowledge reference.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Reference != null) && (Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();

        foreach (Reference valReference in Reference)
        {
          valReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objReference = new fhirCsR5.Models.Reference();
            objReference.DeserializeJson(ref reader, options);
            Reference.Add(objReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reference.Count == 0)
          {
            Reference = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Associated documentation about the medication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeMonograph>))]
  public class MedicationKnowledgeMonograph : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Associated documentation about the medication.
    /// </summary>
    public Reference Source { get; set; }
    /// <summary>
    /// The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          Source = new fhirCsR5.Models.Reference();
          Source.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The price of the medication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeCost>))]
  public class MedicationKnowledgeCost : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication.
    /// </summary>
    public Money CostMoney { get; set; }
    /// <summary>
    /// The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication.
    /// </summary>
    public CodeableConcept CostCodeableConcept { get; set; }
    /// <summary>
    /// The date range for which the cost information of the medication is effective.
    /// </summary>
    public List<Period> EffectiveDate { get; set; }
    /// <summary>
    /// The source or owner that assigns the price to the medication.
    /// </summary>
    public string Source { get; set; }
    /// <summary>
    /// Extension container element for Source
    /// </summary>
    public Element _Source { get; set; }
    /// <summary>
    /// The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((EffectiveDate != null) && (EffectiveDate.Count != 0))
      {
        writer.WritePropertyName("effectiveDate");
        writer.WriteStartArray();

        foreach (Period valEffectiveDate in EffectiveDate)
        {
          valEffectiveDate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Source))
      {
        writer.WriteString("source", (string)Source!);
      }

      if (_Source != null)
      {
        writer.WritePropertyName("_source");
        _Source.SerializeJson(writer, options);
      }

      if (CostMoney != null)
      {
        writer.WritePropertyName("costMoney");
        CostMoney.SerializeJson(writer, options);
      }

      if (CostCodeableConcept != null)
      {
        writer.WritePropertyName("costCodeableConcept");
        CostCodeableConcept.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "costMoney":
          CostMoney = new fhirCsR5.Models.Money();
          CostMoney.DeserializeJson(ref reader, options);
          break;

        case "costCodeableConcept":
          CostCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          CostCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "effectiveDate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          EffectiveDate = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Period objEffectiveDate = new fhirCsR5.Models.Period();
            objEffectiveDate.DeserializeJson(ref reader, options);
            EffectiveDate.Add(objEffectiveDate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (EffectiveDate.Count == 0)
          {
            EffectiveDate = null;
          }

          break;

        case "source":
          Source = reader.GetString();
          break;

        case "_source":
          _Source = new fhirCsR5.Models.Element();
          _Source.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The program under which the medication is reviewed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeMonitoringProgram>))]
  public class MedicationKnowledgeMonitoringProgram : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Name of the reviewing program.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Type of program under which the medication is monitored.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Dosage for the medication for the specific guidelines.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage>))]
  public class MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Dosage for the medication for the specific guidelines.
    /// </summary>
    public List<Dosage> Dosage { get; set; }
    /// <summary>
    /// The type or category of dosage for a given medication (for example, prophylaxis, maintenance, therapeutic, etc.).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Dosage != null) && (Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();

        foreach (Dosage valDosage in Dosage)
        {
          valDosage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Dosage = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Dosage objDosage = new fhirCsR5.Models.Dosage();
            objDosage.DeserializeJson(ref reader, options);
            Dosage.Add(objDosage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Dosage.Count == 0)
          {
            Dosage = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic>))]
  public class MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The categorization of the specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The specific characteristic (e.g. height, weight, gender, etc.).
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The specific characteristic (e.g. height, weight, gender, etc.).
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The specific characteristic (e.g. height, weight, gender, etc.).
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR5.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The guidelines for the dosage of the medication for the indication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeIndicationGuidelineDosingGuideline>))]
  public class MedicationKnowledgeIndicationGuidelineDosingGuideline : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The type of the treatment that the guideline applies to, for example, long term therapy, first line treatment, etc.
    /// </summary>
    public CodeableConcept AdministrationTreatment { get; set; }
    /// <summary>
    /// Dosage for the medication for the specific guidelines.
    /// </summary>
    public List<MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage> Dosage { get; set; }
    /// <summary>
    /// Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
    /// </summary>
    public List<MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic> PatientCharacteristic { get; set; }
    /// <summary>
    /// The overall intention of the treatment, for example, prophylactic, supporative, curative, etc.
    /// </summary>
    public CodeableConcept TreatmentIntent { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (TreatmentIntent != null)
      {
        writer.WritePropertyName("treatmentIntent");
        TreatmentIntent.SerializeJson(writer, options);
      }

      if ((Dosage != null) && (Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage valDosage in Dosage)
        {
          valDosage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AdministrationTreatment != null)
      {
        writer.WritePropertyName("administrationTreatment");
        AdministrationTreatment.SerializeJson(writer, options);
      }

      if ((PatientCharacteristic != null) && (PatientCharacteristic.Count != 0))
      {
        writer.WritePropertyName("patientCharacteristic");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic valPatientCharacteristic in PatientCharacteristic)
        {
          valPatientCharacteristic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "administrationTreatment":
          AdministrationTreatment = new fhirCsR5.Models.CodeableConcept();
          AdministrationTreatment.DeserializeJson(ref reader, options);
          break;

        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Dosage = new List<MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage objDosage = new fhirCsR5.Models.MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage();
            objDosage.DeserializeJson(ref reader, options);
            Dosage.Add(objDosage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Dosage.Count == 0)
          {
            Dosage = null;
          }

          break;

        case "patientCharacteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PatientCharacteristic = new List<MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic objPatientCharacteristic = new fhirCsR5.Models.MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic();
            objPatientCharacteristic.DeserializeJson(ref reader, options);
            PatientCharacteristic.Add(objPatientCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PatientCharacteristic.Count == 0)
          {
            PatientCharacteristic = null;
          }

          break;

        case "treatmentIntent":
          TreatmentIntent = new fhirCsR5.Models.CodeableConcept();
          TreatmentIntent.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Guidelines or protocols that are applicable for the administration of the medication based on indication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeIndicationGuideline>))]
  public class MedicationKnowledgeIndicationGuideline : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The guidelines for the dosage of the medication for the indication.
    /// </summary>
    public List<MedicationKnowledgeIndicationGuidelineDosingGuideline> DosingGuideline { get; set; }
    /// <summary>
    /// Indication or reason for use of the medication that applies to the specific administration guideline.
    /// </summary>
    public List<CodeableReference> Indication { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Indication != null) && (Indication.Count != 0))
      {
        writer.WritePropertyName("indication");
        writer.WriteStartArray();

        foreach (CodeableReference valIndication in Indication)
        {
          valIndication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((DosingGuideline != null) && (DosingGuideline.Count != 0))
      {
        writer.WritePropertyName("dosingGuideline");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeIndicationGuidelineDosingGuideline valDosingGuideline in DosingGuideline)
        {
          valDosingGuideline.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dosingGuideline":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DosingGuideline = new List<MedicationKnowledgeIndicationGuidelineDosingGuideline>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeIndicationGuidelineDosingGuideline objDosingGuideline = new fhirCsR5.Models.MedicationKnowledgeIndicationGuidelineDosingGuideline();
            objDosingGuideline.DeserializeJson(ref reader, options);
            DosingGuideline.Add(objDosingGuideline);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DosingGuideline.Count == 0)
          {
            DosingGuideline = null;
          }

          break;

        case "indication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Indication = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objIndication = new fhirCsR5.Models.CodeableReference();
            objIndication.DeserializeJson(ref reader, options);
            Indication.Add(objIndication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Indication.Count == 0)
          {
            Indication = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Categorization of the medication within a formulary or classification system.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeMedicineClassification>))]
  public class MedicationKnowledgeMedicineClassification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
    /// </summary>
    public List<CodeableConcept> Classification { get; set; }
    /// <summary>
    /// Either a textual source of the classification or a reference to an online source.
    /// </summary>
    public string SourceString { get; set; }
    /// <summary>
    /// Extension container element for SourceString
    /// </summary>
    public Element _SourceString { get; set; }
    /// <summary>
    /// Either a textual source of the classification or a reference to an online source.
    /// </summary>
    public string SourceUri { get; set; }
    /// <summary>
    /// Extension container element for SourceUri
    /// </summary>
    public Element _SourceUri { get; set; }
    /// <summary>
    /// The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceString))
      {
        writer.WriteString("sourceString", (string)SourceString!);
      }

      if (_SourceString != null)
      {
        writer.WritePropertyName("_sourceString");
        _SourceString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceUri))
      {
        writer.WriteString("sourceUri", (string)SourceUri!);
      }

      if (_SourceUri != null)
      {
        writer.WritePropertyName("_sourceUri");
        _SourceUri.SerializeJson(writer, options);
      }

      if ((Classification != null) && (Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassification in Classification)
        {
          valClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objClassification = new fhirCsR5.Models.CodeableConcept();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "sourceString":
          SourceString = reader.GetString();
          break;

        case "_sourceString":
          _SourceString = new fhirCsR5.Models.Element();
          _SourceString.DeserializeJson(ref reader, options);
          break;

        case "sourceUri":
          SourceUri = reader.GetString();
          break;

        case "_sourceUri":
          _SourceUri = new fhirCsR5.Models.Element();
          _SourceUri.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information that only applies to packages (not products).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgePackaging>))]
  public class MedicationKnowledgePackaging : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The cost of the packaged medication.
    /// </summary>
    public List<MedicationKnowledgeCost> Cost { get; set; }
    /// <summary>
    /// A reference to a PackagedProductDefinition that provides the details of the product that is in the packaging and is being priced.
    /// </summary>
    public Reference PackagedProduct { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Cost != null) && (Cost.Count != 0))
      {
        writer.WritePropertyName("cost");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeCost valCost in Cost)
        {
          valCost.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PackagedProduct != null)
      {
        writer.WritePropertyName("packagedProduct");
        PackagedProduct.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Cost = new List<MedicationKnowledgeCost>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeCost objCost = new fhirCsR5.Models.MedicationKnowledgeCost();
            objCost.DeserializeJson(ref reader, options);
            Cost.Add(objCost);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Cost.Count == 0)
          {
            Cost = null;
          }

          break;

        case "packagedProduct":
          PackagedProduct = new fhirCsR5.Models.Reference();
          PackagedProduct.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeRegulatorySubstitution>))]
  public class MedicationKnowledgeRegulatorySubstitution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specifies if regulation allows for changes in the medication when dispensing.
    /// </summary>
    public bool Allowed { get; set; }
    /// <summary>
    /// Extension container element for Allowed
    /// </summary>
    public Element _Allowed { get; set; }
    /// <summary>
    /// Specifies the type of substitution allowed.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      writer.WriteBoolean("allowed", Allowed);

      if (_Allowed != null)
      {
        writer.WritePropertyName("_allowed");
        _Allowed.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowed":
          Allowed = reader.GetBoolean();
          break;

        case "_allowed":
          _Allowed = new fhirCsR5.Models.Element();
          _Allowed.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The maximum number of units of the medication that can be dispensed in a period.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeRegulatoryMaxDispense>))]
  public class MedicationKnowledgeRegulatoryMaxDispense : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The period that applies to the maximum number of units.
    /// </summary>
    public Duration Period { get; set; }
    /// <summary>
    /// The maximum number of units of the medication that can be dispensed.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "period":
          Period = new fhirCsR5.Models.Duration();
          Period.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR5.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Regulatory information about a medication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeRegulatory>))]
  public class MedicationKnowledgeRegulatory : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The maximum number of units of the medication that can be dispensed in a period.
    /// </summary>
    public MedicationKnowledgeRegulatoryMaxDispense MaxDispense { get; set; }
    /// <summary>
    /// The authority that is specifying the regulations.
    /// </summary>
    public Reference RegulatoryAuthority { get; set; }
    /// <summary>
    /// Specifies the schedule of a medication in jurisdiction.
    /// </summary>
    public List<CodeableConcept> Schedule { get; set; }
    /// <summary>
    /// Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
    /// </summary>
    public List<MedicationKnowledgeRegulatorySubstitution> Substitution { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (RegulatoryAuthority != null)
      {
        writer.WritePropertyName("regulatoryAuthority");
        RegulatoryAuthority.SerializeJson(writer, options);
      }

      if ((Substitution != null) && (Substitution.Count != 0))
      {
        writer.WritePropertyName("substitution");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeRegulatorySubstitution valSubstitution in Substitution)
        {
          valSubstitution.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Schedule != null) && (Schedule.Count != 0))
      {
        writer.WritePropertyName("schedule");
        writer.WriteStartArray();

        foreach (CodeableConcept valSchedule in Schedule)
        {
          valSchedule.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MaxDispense != null)
      {
        writer.WritePropertyName("maxDispense");
        MaxDispense.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "maxDispense":
          MaxDispense = new fhirCsR5.Models.MedicationKnowledgeRegulatoryMaxDispense();
          MaxDispense.DeserializeJson(ref reader, options);
          break;

        case "regulatoryAuthority":
          RegulatoryAuthority = new fhirCsR5.Models.Reference();
          RegulatoryAuthority.DeserializeJson(ref reader, options);
          break;

        case "schedule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Schedule = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objSchedule = new fhirCsR5.Models.CodeableConcept();
            objSchedule.DeserializeJson(ref reader, options);
            Schedule.Add(objSchedule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Schedule.Count == 0)
          {
            Schedule = null;
          }

          break;

        case "substitution":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Substitution = new List<MedicationKnowledgeRegulatorySubstitution>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeRegulatorySubstitution objSubstitution = new fhirCsR5.Models.MedicationKnowledgeRegulatorySubstitution();
            objSubstitution.DeserializeJson(ref reader, options);
            Substitution.Add(objSubstitution);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Substitution.Count == 0)
          {
            Substitution = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Identifies a particular constituent of interest in the product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeDefinitionalIngredient>))]
  public class MedicationKnowledgeDefinitionalIngredient : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A reference to the resource that provides information about the ingredient.
    /// </summary>
    public CodeableReference Item { get; set; }
    /// <summary>
    /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
    /// </summary>
    public Ratio StrengthRatio { get; set; }
    /// <summary>
    /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
    /// </summary>
    public CodeableConcept StrengthCodeableConcept { get; set; }
    /// <summary>
    /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
    /// </summary>
    public Quantity StrengthQuantity { get; set; }
    /// <summary>
    /// Indication of whether this ingredient affects the therapeutic action of the drug.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Item != null)
      {
        writer.WritePropertyName("item");
        Item.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (StrengthRatio != null)
      {
        writer.WritePropertyName("strengthRatio");
        StrengthRatio.SerializeJson(writer, options);
      }

      if (StrengthCodeableConcept != null)
      {
        writer.WritePropertyName("strengthCodeableConcept");
        StrengthCodeableConcept.SerializeJson(writer, options);
      }

      if (StrengthQuantity != null)
      {
        writer.WritePropertyName("strengthQuantity");
        StrengthQuantity.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "item":
          Item = new fhirCsR5.Models.CodeableReference();
          Item.DeserializeJson(ref reader, options);
          break;

        case "strengthRatio":
          StrengthRatio = new fhirCsR5.Models.Ratio();
          StrengthRatio.DeserializeJson(ref reader, options);
          break;

        case "strengthCodeableConcept":
          StrengthCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          StrengthCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "strengthQuantity":
          StrengthQuantity = new fhirCsR5.Models.Quantity();
          StrengthQuantity.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeDefinitionalDrugCharacteristic>))]
  public class MedicationKnowledgeDefinitionalDrugCharacteristic : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public byte[] ValueBase64Binary { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueBase64Binary != null)
      {
        writer.WriteString("valueBase64Binary", System.Convert.ToBase64String(ValueBase64Binary));
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR5.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          ValueBase64Binary = System.Convert.FromBase64String(reader.GetString());
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR5.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Along with the link to a Medicinal Product Definition resource, this information provides common definitional elements that are needed to understand the specific medication that is being described.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledgeDefinitional>))]
  public class MedicationKnowledgeDefinitional : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Associated definitions for this medication.
    /// </summary>
    public List<Reference> Definition { get; set; }
    /// <summary>
    /// When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
    /// </summary>
    public CodeableConcept DoseForm { get; set; }
    /// <summary>
    /// Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
    /// </summary>
    public List<MedicationKnowledgeDefinitionalDrugCharacteristic> DrugCharacteristic { get; set; }
    /// <summary>
    /// Identifies a particular constituent of interest in the product.
    /// </summary>
    public List<MedicationKnowledgeDefinitionalIngredient> Ingredient { get; set; }
    /// <summary>
    /// The intended or approved route of administration.
    /// </summary>
    public List<CodeableConcept> IntendedRoute { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Definition != null) && (Definition.Count != 0))
      {
        writer.WritePropertyName("definition");
        writer.WriteStartArray();

        foreach (Reference valDefinition in Definition)
        {
          valDefinition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DoseForm != null)
      {
        writer.WritePropertyName("doseForm");
        DoseForm.SerializeJson(writer, options);
      }

      if ((IntendedRoute != null) && (IntendedRoute.Count != 0))
      {
        writer.WritePropertyName("intendedRoute");
        writer.WriteStartArray();

        foreach (CodeableConcept valIntendedRoute in IntendedRoute)
        {
          valIntendedRoute.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Ingredient != null) && (Ingredient.Count != 0))
      {
        writer.WritePropertyName("ingredient");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeDefinitionalIngredient valIngredient in Ingredient)
        {
          valIngredient.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((DrugCharacteristic != null) && (DrugCharacteristic.Count != 0))
      {
        writer.WritePropertyName("drugCharacteristic");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeDefinitionalDrugCharacteristic valDrugCharacteristic in DrugCharacteristic)
        {
          valDrugCharacteristic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Definition = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objDefinition = new fhirCsR5.Models.Reference();
            objDefinition.DeserializeJson(ref reader, options);
            Definition.Add(objDefinition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Definition.Count == 0)
          {
            Definition = null;
          }

          break;

        case "doseForm":
          DoseForm = new fhirCsR5.Models.CodeableConcept();
          DoseForm.DeserializeJson(ref reader, options);
          break;

        case "drugCharacteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DrugCharacteristic = new List<MedicationKnowledgeDefinitionalDrugCharacteristic>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeDefinitionalDrugCharacteristic objDrugCharacteristic = new fhirCsR5.Models.MedicationKnowledgeDefinitionalDrugCharacteristic();
            objDrugCharacteristic.DeserializeJson(ref reader, options);
            DrugCharacteristic.Add(objDrugCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DrugCharacteristic.Count == 0)
          {
            DrugCharacteristic = null;
          }

          break;

        case "ingredient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Ingredient = new List<MedicationKnowledgeDefinitionalIngredient>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeDefinitionalIngredient objIngredient = new fhirCsR5.Models.MedicationKnowledgeDefinitionalIngredient();
            objIngredient.DeserializeJson(ref reader, options);
            Ingredient.Add(objIngredient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Ingredient.Count == 0)
          {
            Ingredient = null;
          }

          break;

        case "intendedRoute":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IntendedRoute = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objIntendedRoute = new fhirCsR5.Models.CodeableConcept();
            objIntendedRoute.DeserializeJson(ref reader, options);
            IntendedRoute.Add(objIntendedRoute);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IntendedRoute.Count == 0)
          {
            IntendedRoute = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about a medication that is used to support knowledge.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MedicationKnowledge>))]
  public class MedicationKnowledge : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MedicationKnowledge";
    /// <summary>
    /// Links to associated medications that could be prescribed, dispensed or administered.
    /// </summary>
    public List<Reference> AssociatedMedication { get; set; }
    /// <summary>
    /// The creator or owner of the knowledge or information about the medication.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
    /// </summary>
    public List<Reference> ClinicalUseIssue { get; set; }
    /// <summary>
    /// Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The price of the medication.
    /// </summary>
    public List<MedicationKnowledgeCost> Cost { get; set; }
    /// <summary>
    /// Along with the link to a Medicinal Product Definition resource, this information provides common definitional elements that are needed to understand the specific medication that is being described.
    /// </summary>
    public MedicationKnowledgeDefinitional Definitional { get; set; }
    /// <summary>
    /// This is a business identifier, not a resource identifier (see discussion).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Guidelines or protocols that are applicable for the administration of the medication based on indication.
    /// </summary>
    public List<MedicationKnowledgeIndicationGuideline> IndicationGuideline { get; set; }
    /// <summary>
    /// The codes could have varying granularity from a country or group of countries down to a specific district.
    /// </summary>
    public List<CodeableConcept> IntendedJurisdiction { get; set; }
    /// <summary>
    /// Categorization of the medication within a formulary or classification system.
    /// </summary>
    public List<MedicationKnowledgeMedicineClassification> MedicineClassification { get; set; }
    /// <summary>
    /// The program under which the medication is reviewed.
    /// </summary>
    public List<MedicationKnowledgeMonitoringProgram> MonitoringProgram { get; set; }
    /// <summary>
    /// Associated documentation about the medication.
    /// </summary>
    public List<MedicationKnowledgeMonograph> Monograph { get; set; }
    /// <summary>
    /// All of the names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
    /// </summary>
    public List<string> Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public List<Element> _Name { get; set; }
    /// <summary>
    /// Information that only applies to packages (not products).
    /// </summary>
    public List<MedicationKnowledgePackaging> Packaging { get; set; }
    /// <summary>
    /// The instructions for preparing the medication.
    /// </summary>
    public string PreparationInstruction { get; set; }
    /// <summary>
    /// Extension container element for PreparationInstruction
    /// </summary>
    public Element _PreparationInstruction { get; set; }
    /// <summary>
    /// Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
    /// </summary>
    public List<CodeableConcept> ProductType { get; set; }
    /// <summary>
    /// Regulatory information about a medication.
    /// </summary>
    public List<MedicationKnowledgeRegulatory> Regulatory { get; set; }
    /// <summary>
    /// Associated or related medications. For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor.
    /// </summary>
    public List<MedicationKnowledgeRelatedMedicationKnowledge> RelatedMedicationKnowledge { get; set; }
    /// <summary>
    /// This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if ((IntendedJurisdiction != null) && (IntendedJurisdiction.Count != 0))
      {
        writer.WritePropertyName("intendedJurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valIntendedJurisdiction in IntendedJurisdiction)
        {
          valIntendedJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Name != null) && (Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();

        foreach (string valName in Name)
        {
          writer.WriteStringValue(valName);
        }

        writer.WriteEndArray();
      }

      if ((_Name != null) && (_Name.Count != 0))
      {
        writer.WritePropertyName("_name");
        writer.WriteStartArray();

        foreach (Element val_Name in _Name)
        {
          val_Name.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedMedicationKnowledge != null) && (RelatedMedicationKnowledge.Count != 0))
      {
        writer.WritePropertyName("relatedMedicationKnowledge");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeRelatedMedicationKnowledge valRelatedMedicationKnowledge in RelatedMedicationKnowledge)
        {
          valRelatedMedicationKnowledge.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AssociatedMedication != null) && (AssociatedMedication.Count != 0))
      {
        writer.WritePropertyName("associatedMedication");
        writer.WriteStartArray();

        foreach (Reference valAssociatedMedication in AssociatedMedication)
        {
          valAssociatedMedication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProductType != null) && (ProductType.Count != 0))
      {
        writer.WritePropertyName("productType");
        writer.WriteStartArray();

        foreach (CodeableConcept valProductType in ProductType)
        {
          valProductType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Monograph != null) && (Monograph.Count != 0))
      {
        writer.WritePropertyName("monograph");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeMonograph valMonograph in Monograph)
        {
          valMonograph.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(PreparationInstruction))
      {
        writer.WriteString("preparationInstruction", (string)PreparationInstruction!);
      }

      if (_PreparationInstruction != null)
      {
        writer.WritePropertyName("_preparationInstruction");
        _PreparationInstruction.SerializeJson(writer, options);
      }

      if ((Cost != null) && (Cost.Count != 0))
      {
        writer.WritePropertyName("cost");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeCost valCost in Cost)
        {
          valCost.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MonitoringProgram != null) && (MonitoringProgram.Count != 0))
      {
        writer.WritePropertyName("monitoringProgram");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeMonitoringProgram valMonitoringProgram in MonitoringProgram)
        {
          valMonitoringProgram.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((IndicationGuideline != null) && (IndicationGuideline.Count != 0))
      {
        writer.WritePropertyName("indicationGuideline");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeIndicationGuideline valIndicationGuideline in IndicationGuideline)
        {
          valIndicationGuideline.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MedicineClassification != null) && (MedicineClassification.Count != 0))
      {
        writer.WritePropertyName("medicineClassification");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeMedicineClassification valMedicineClassification in MedicineClassification)
        {
          valMedicineClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Packaging != null) && (Packaging.Count != 0))
      {
        writer.WritePropertyName("packaging");
        writer.WriteStartArray();

        foreach (MedicationKnowledgePackaging valPackaging in Packaging)
        {
          valPackaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ClinicalUseIssue != null) && (ClinicalUseIssue.Count != 0))
      {
        writer.WritePropertyName("clinicalUseIssue");
        writer.WriteStartArray();

        foreach (Reference valClinicalUseIssue in ClinicalUseIssue)
        {
          valClinicalUseIssue.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Regulatory != null) && (Regulatory.Count != 0))
      {
        writer.WritePropertyName("regulatory");
        writer.WriteStartArray();

        foreach (MedicationKnowledgeRegulatory valRegulatory in Regulatory)
        {
          valRegulatory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Definitional != null)
      {
        writer.WritePropertyName("definitional");
        Definitional.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "associatedMedication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AssociatedMedication = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objAssociatedMedication = new fhirCsR5.Models.Reference();
            objAssociatedMedication.DeserializeJson(ref reader, options);
            AssociatedMedication.Add(objAssociatedMedication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AssociatedMedication.Count == 0)
          {
            AssociatedMedication = null;
          }

          break;

        case "author":
          Author = new fhirCsR5.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "clinicalUseIssue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ClinicalUseIssue = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objClinicalUseIssue = new fhirCsR5.Models.Reference();
            objClinicalUseIssue.DeserializeJson(ref reader, options);
            ClinicalUseIssue.Add(objClinicalUseIssue);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ClinicalUseIssue.Count == 0)
          {
            ClinicalUseIssue = null;
          }

          break;

        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "cost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Cost = new List<MedicationKnowledgeCost>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeCost objCost = new fhirCsR5.Models.MedicationKnowledgeCost();
            objCost.DeserializeJson(ref reader, options);
            Cost.Add(objCost);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Cost.Count == 0)
          {
            Cost = null;
          }

          break;

        case "definitional":
          Definitional = new fhirCsR5.Models.MedicationKnowledgeDefinitional();
          Definitional.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "indicationGuideline":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IndicationGuideline = new List<MedicationKnowledgeIndicationGuideline>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeIndicationGuideline objIndicationGuideline = new fhirCsR5.Models.MedicationKnowledgeIndicationGuideline();
            objIndicationGuideline.DeserializeJson(ref reader, options);
            IndicationGuideline.Add(objIndicationGuideline);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IndicationGuideline.Count == 0)
          {
            IndicationGuideline = null;
          }

          break;

        case "intendedJurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IntendedJurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objIntendedJurisdiction = new fhirCsR5.Models.CodeableConcept();
            objIntendedJurisdiction.DeserializeJson(ref reader, options);
            IntendedJurisdiction.Add(objIntendedJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IntendedJurisdiction.Count == 0)
          {
            IntendedJurisdiction = null;
          }

          break;

        case "medicineClassification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MedicineClassification = new List<MedicationKnowledgeMedicineClassification>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeMedicineClassification objMedicineClassification = new fhirCsR5.Models.MedicationKnowledgeMedicineClassification();
            objMedicineClassification.DeserializeJson(ref reader, options);
            MedicineClassification.Add(objMedicineClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MedicineClassification.Count == 0)
          {
            MedicineClassification = null;
          }

          break;

        case "monitoringProgram":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MonitoringProgram = new List<MedicationKnowledgeMonitoringProgram>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeMonitoringProgram objMonitoringProgram = new fhirCsR5.Models.MedicationKnowledgeMonitoringProgram();
            objMonitoringProgram.DeserializeJson(ref reader, options);
            MonitoringProgram.Add(objMonitoringProgram);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MonitoringProgram.Count == 0)
          {
            MonitoringProgram = null;
          }

          break;

        case "monograph":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Monograph = new List<MedicationKnowledgeMonograph>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeMonograph objMonograph = new fhirCsR5.Models.MedicationKnowledgeMonograph();
            objMonograph.DeserializeJson(ref reader, options);
            Monograph.Add(objMonograph);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Monograph.Count == 0)
          {
            Monograph = null;
          }

          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Name = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Name.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Name.Count == 0)
          {
            Name = null;
          }

          break;

        case "_name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Name = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Name = new fhirCsR5.Models.Element();
            obj_Name.DeserializeJson(ref reader, options);
            _Name.Add(obj_Name);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Name.Count == 0)
          {
            _Name = null;
          }

          break;

        case "packaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Packaging = new List<MedicationKnowledgePackaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgePackaging objPackaging = new fhirCsR5.Models.MedicationKnowledgePackaging();
            objPackaging.DeserializeJson(ref reader, options);
            Packaging.Add(objPackaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Packaging.Count == 0)
          {
            Packaging = null;
          }

          break;

        case "preparationInstruction":
          PreparationInstruction = reader.GetString();
          break;

        case "_preparationInstruction":
          _PreparationInstruction = new fhirCsR5.Models.Element();
          _PreparationInstruction.DeserializeJson(ref reader, options);
          break;

        case "productType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProductType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objProductType = new fhirCsR5.Models.CodeableConcept();
            objProductType.DeserializeJson(ref reader, options);
            ProductType.Add(objProductType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProductType.Count == 0)
          {
            ProductType = null;
          }

          break;

        case "regulatory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Regulatory = new List<MedicationKnowledgeRegulatory>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeRegulatory objRegulatory = new fhirCsR5.Models.MedicationKnowledgeRegulatory();
            objRegulatory.DeserializeJson(ref reader, options);
            Regulatory.Add(objRegulatory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Regulatory.Count == 0)
          {
            Regulatory = null;
          }

          break;

        case "relatedMedicationKnowledge":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedMedicationKnowledge = new List<MedicationKnowledgeRelatedMedicationKnowledge>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MedicationKnowledgeRelatedMedicationKnowledge objRelatedMedicationKnowledge = new fhirCsR5.Models.MedicationKnowledgeRelatedMedicationKnowledge();
            objRelatedMedicationKnowledge.DeserializeJson(ref reader, options);
            RelatedMedicationKnowledge.Add(objRelatedMedicationKnowledge);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedMedicationKnowledge.Count == 0)
          {
            RelatedMedicationKnowledge = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MedicationKnowledge.status field
  /// </summary>
  public static class MedicationKnowledgeStatusCodes {
    public const string ACTIVE = "active";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string INACTIVE = "inactive";
    public static HashSet<string> Values = new HashSet<string>() {
      "active",
      "entered-in-error",
      "inactive",
    };
  }
}
