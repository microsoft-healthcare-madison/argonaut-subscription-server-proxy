// <auto-generated />
// Built from: hl7.fhir.r5.core version: 3.0.1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Indicates what should be done and within what timeframe.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionGoalTarget>))]
  public class PlanDefinitionGoalTarget : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
    /// </summary>
    public Quantity DetailQuantity { get; set; }
    /// <summary>
    /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
    /// </summary>
    public Range DetailRange { get; set; }
    /// <summary>
    /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
    /// </summary>
    public CodeableConcept DetailCodeableConcept { get; set; }
    /// <summary>
    /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
    /// </summary>
    public string DetailString { get; set; }
    /// <summary>
    /// Extension container element for DetailString
    /// </summary>
    public Element _DetailString { get; set; }
    /// <summary>
    /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
    /// </summary>
    public bool? DetailBoolean { get; set; }
    /// <summary>
    /// Extension container element for DetailBoolean
    /// </summary>
    public Element _DetailBoolean { get; set; }
    /// <summary>
    /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
    /// </summary>
    public int? DetailInteger { get; set; }
    /// <summary>
    /// Extension container element for DetailInteger
    /// </summary>
    public Element _DetailInteger { get; set; }
    /// <summary>
    /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
    /// </summary>
    public Ratio DetailRatio { get; set; }
    /// <summary>
    /// Indicates the timeframe after the start of the goal in which the goal should be met.
    /// </summary>
    public Duration Due { get; set; }
    /// <summary>
    /// The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
    /// </summary>
    public CodeableConcept Measure { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Measure != null)
      {
        writer.WritePropertyName("measure");
        Measure.SerializeJson(writer, options);
      }

      if (DetailQuantity != null)
      {
        writer.WritePropertyName("detailQuantity");
        DetailQuantity.SerializeJson(writer, options);
      }

      if (DetailRange != null)
      {
        writer.WritePropertyName("detailRange");
        DetailRange.SerializeJson(writer, options);
      }

      if (DetailCodeableConcept != null)
      {
        writer.WritePropertyName("detailCodeableConcept");
        DetailCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DetailString))
      {
        writer.WriteString("detailString", (string)DetailString!);
      }

      if (_DetailString != null)
      {
        writer.WritePropertyName("_detailString");
        _DetailString.SerializeJson(writer, options);
      }

      if (DetailBoolean != null)
      {
        writer.WriteBoolean("detailBoolean", (bool)DetailBoolean!);
      }

      if (_DetailBoolean != null)
      {
        writer.WritePropertyName("_detailBoolean");
        _DetailBoolean.SerializeJson(writer, options);
      }

      if (DetailInteger != null)
      {
        writer.WriteNumber("detailInteger", (int)DetailInteger!);
      }

      if (_DetailInteger != null)
      {
        writer.WritePropertyName("_detailInteger");
        _DetailInteger.SerializeJson(writer, options);
      }

      if (DetailRatio != null)
      {
        writer.WritePropertyName("detailRatio");
        DetailRatio.SerializeJson(writer, options);
      }

      if (Due != null)
      {
        writer.WritePropertyName("due");
        Due.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detailQuantity":
          DetailQuantity = new fhirCsR5.Models.Quantity();
          DetailQuantity.DeserializeJson(ref reader, options);
          break;

        case "detailRange":
          DetailRange = new fhirCsR5.Models.Range();
          DetailRange.DeserializeJson(ref reader, options);
          break;

        case "detailCodeableConcept":
          DetailCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          DetailCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "detailString":
          DetailString = reader.GetString();
          break;

        case "_detailString":
          _DetailString = new fhirCsR5.Models.Element();
          _DetailString.DeserializeJson(ref reader, options);
          break;

        case "detailBoolean":
          DetailBoolean = reader.GetBoolean();
          break;

        case "_detailBoolean":
          _DetailBoolean = new fhirCsR5.Models.Element();
          _DetailBoolean.DeserializeJson(ref reader, options);
          break;

        case "detailInteger":
          DetailInteger = reader.GetInt32();
          break;

        case "_detailInteger":
          _DetailInteger = new fhirCsR5.Models.Element();
          _DetailInteger.DeserializeJson(ref reader, options);
          break;

        case "detailRatio":
          DetailRatio = new fhirCsR5.Models.Ratio();
          DetailRatio.DeserializeJson(ref reader, options);
          break;

        case "due":
          Due = new fhirCsR5.Models.Duration();
          Due.DeserializeJson(ref reader, options);
          break;

        case "measure":
          Measure = new fhirCsR5.Models.CodeableConcept();
          Measure.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionGoal>))]
  public class PlanDefinitionGoal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifies problems, conditions, issues, or concerns the goal is intended to address.
    /// </summary>
    public List<CodeableConcept> Addresses { get; set; }
    /// <summary>
    /// Indicates a category the goal falls within.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// If no code is available, use CodeableConcept.text.
    /// </summary>
    public CodeableConcept Description { get; set; }
    /// <summary>
    /// Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
    /// </summary>
    public List<RelatedArtifact> Documentation { get; set; }
    /// <summary>
    /// Identifies the expected level of importance associated with reaching/sustaining the defined goal.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// The event after which the goal should begin being pursued.
    /// </summary>
    public CodeableConcept Start { get; set; }
    /// <summary>
    /// Indicates what should be done and within what timeframe.
    /// </summary>
    public List<PlanDefinitionGoalTarget> Target { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Description != null)
      {
        writer.WritePropertyName("description");
        Description.SerializeJson(writer, options);
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if (Start != null)
      {
        writer.WritePropertyName("start");
        Start.SerializeJson(writer, options);
      }

      if ((Addresses != null) && (Addresses.Count != 0))
      {
        writer.WritePropertyName("addresses");
        writer.WriteStartArray();

        foreach (CodeableConcept valAddresses in Addresses)
        {
          valAddresses.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Documentation != null) && (Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();

        foreach (RelatedArtifact valDocumentation in Documentation)
        {
          valDocumentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Target != null) && (Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();

        foreach (PlanDefinitionGoalTarget valTarget in Target)
        {
          valTarget.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "addresses":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Addresses = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objAddresses = new fhirCsR5.Models.CodeableConcept();
            objAddresses.DeserializeJson(ref reader, options);
            Addresses.Add(objAddresses);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Addresses.Count == 0)
          {
            Addresses = null;
          }

          break;

        case "category":
          Category = new fhirCsR5.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = new fhirCsR5.Models.CodeableConcept();
          Description.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objDocumentation = new fhirCsR5.Models.RelatedArtifact();
            objDocumentation.DeserializeJson(ref reader, options);
            Documentation.Add(objDocumentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Documentation.Count == 0)
          {
            Documentation = null;
          }

          break;

        case "priority":
          Priority = new fhirCsR5.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "start":
          Start = new fhirCsR5.Models.CodeableConcept();
          Start.DeserializeJson(ref reader, options);
          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<PlanDefinitionGoalTarget>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionGoalTarget objTarget = new fhirCsR5.Models.PlanDefinitionGoalTarget();
            objTarget.DeserializeJson(ref reader, options);
            Target.Add(objTarget);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The characteristics of the candidates that could serve as the actor.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActorOption>))]
  public class PlanDefinitionActorOption : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The role the participant should play in performing the described action.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// The type of participant in the action.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
    /// </summary>
    public Reference TypeReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (TypeReference != null)
      {
        writer.WritePropertyName("typeReference");
        TypeReference.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "role":
          Role = new fhirCsR5.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "typeReference":
          TypeReference = new fhirCsR5.Models.Reference();
          TypeReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.actor.option.type field
  /// </summary>
  public static class PlanDefinitionActorOptionTypeCodes {
    public const string CARETEAM = "careteam";
    public const string DEVICE = "device";
    public const string GROUP = "group";
    public const string HEALTHCARESERVICE = "healthcareservice";
    public const string LOCATION = "location";
    public const string ORGANIZATION = "organization";
    public const string PATIENT = "patient";
    public const string PRACTITIONER = "practitioner";
    public const string PRACTITIONERROLE = "practitionerrole";
    public const string RELATEDPERSON = "relatedperson";
    public static HashSet<string> Values = new HashSet<string>() {
      "careteam",
      "device",
      "group",
      "healthcareservice",
      "location",
      "organization",
      "patient",
      "practitioner",
      "practitionerrole",
      "relatedperson",
    };
  }
  /// <summary>
  /// Actors represent the individuals or groups involved in the execution of the defined set of activities.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActor>))]
  public class PlanDefinitionActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A description of how the actor fits into the overall actions of the plan definition.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The characteristics of the candidates that could serve as the actor.
    /// </summary>
    public List<PlanDefinitionActorOption> Option { get; set; }
    /// <summary>
    /// A descriptive label for the actor.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Option != null) && (Option.Count != 0))
      {
        writer.WritePropertyName("option");
        writer.WriteStartArray();

        foreach (PlanDefinitionActorOption valOption in Option)
        {
          valOption.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "option":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Option = new List<PlanDefinitionActorOption>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActorOption objOption = new fhirCsR5.Models.PlanDefinitionActorOption();
            objOption.DeserializeJson(ref reader, options);
            Option.Add(objOption);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Option.Count == 0)
          {
            Option = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActionCondition>))]
  public class PlanDefinitionActionCondition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public Expression Expression { get; set; }
    /// <summary>
    /// Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if (Expression != null)
      {
        writer.WritePropertyName("expression");
        Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "expression":
          Expression = new fhirCsR5.Models.Expression();
          Expression.DeserializeJson(ref reader, options);
          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR5.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.condition.kind field
  /// </summary>
  public static class PlanDefinitionActionConditionKindCodes {
    public const string APPLICABILITY = "applicability";
    public const string START = "start";
    public const string STOP = "stop";
    public static HashSet<string> Values = new HashSet<string>() {
      "applicability",
      "start",
      "stop",
    };
  }
  /// <summary>
  /// Defines input data requirements for the action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActionInput>))]
  public class PlanDefinitionActionInput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The relatedData element allows indicating that an input to a parent action is an input to specific child actions. It also allows the output of one action to be identified as the input to a different action
    /// </summary>
    public string RelatedData { get; set; }
    /// <summary>
    /// Extension container element for RelatedData
    /// </summary>
    public Element _RelatedData { get; set; }
    /// <summary>
    /// Defines the data that is to be provided as input to the action.
    /// </summary>
    public DataRequirement Requirement { get; set; }
    /// <summary>
    /// A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Requirement != null)
      {
        writer.WritePropertyName("requirement");
        Requirement.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RelatedData))
      {
        writer.WriteString("relatedData", (string)RelatedData!);
      }

      if (_RelatedData != null)
      {
        writer.WritePropertyName("_relatedData");
        _RelatedData.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relatedData":
          RelatedData = reader.GetString();
          break;

        case "_relatedData":
          _RelatedData = new fhirCsR5.Models.Element();
          _RelatedData.DeserializeJson(ref reader, options);
          break;

        case "requirement":
          Requirement = new fhirCsR5.Models.DataRequirement();
          Requirement.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Defines the outputs of the action, if any.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActionOutput>))]
  public class PlanDefinitionActionOutput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The relatedData element allows indicating that the output of child action is also the output of a parent action. It also allows the input of one action to be identified as the output of a different action
    /// </summary>
    public string RelatedData { get; set; }
    /// <summary>
    /// Extension container element for RelatedData
    /// </summary>
    public Element _RelatedData { get; set; }
    /// <summary>
    /// Defines the data that results as output from the action.
    /// </summary>
    public DataRequirement Requirement { get; set; }
    /// <summary>
    /// A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Requirement != null)
      {
        writer.WritePropertyName("requirement");
        Requirement.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RelatedData))
      {
        writer.WriteString("relatedData", (string)RelatedData!);
      }

      if (_RelatedData != null)
      {
        writer.WritePropertyName("_relatedData");
        _RelatedData.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relatedData":
          RelatedData = reader.GetString();
          break;

        case "_relatedData":
          _RelatedData = new fhirCsR5.Models.Element();
          _RelatedData.DeserializeJson(ref reader, options);
          break;

        case "requirement":
          Requirement = new fhirCsR5.Models.DataRequirement();
          Requirement.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActionRelatedAction>))]
  public class PlanDefinitionActionRelatedAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Duration OffsetDuration { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Range OffsetRange { get; set; }
    /// <summary>
    /// The relationship of this action to the related action.
    /// </summary>
    public string Relationship { get; set; }
    /// <summary>
    /// Extension container element for Relationship
    /// </summary>
    public Element _Relationship { get; set; }
    /// <summary>
    /// The element id of the target related action.
    /// </summary>
    public string TargetId { get; set; }
    /// <summary>
    /// Extension container element for TargetId
    /// </summary>
    public Element _TargetId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(TargetId))
      {
        writer.WriteString("targetId", (string)TargetId!);
      }

      if (_TargetId != null)
      {
        writer.WritePropertyName("_targetId");
        _TargetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Relationship))
      {
        writer.WriteString("relationship", (string)Relationship!);
      }

      if (_Relationship != null)
      {
        writer.WritePropertyName("_relationship");
        _Relationship.SerializeJson(writer, options);
      }

      if (OffsetDuration != null)
      {
        writer.WritePropertyName("offsetDuration");
        OffsetDuration.SerializeJson(writer, options);
      }

      if (OffsetRange != null)
      {
        writer.WritePropertyName("offsetRange");
        OffsetRange.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "offsetDuration":
          OffsetDuration = new fhirCsR5.Models.Duration();
          OffsetDuration.DeserializeJson(ref reader, options);
          break;

        case "offsetRange":
          OffsetRange = new fhirCsR5.Models.Range();
          OffsetRange.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = reader.GetString();
          break;

        case "_relationship":
          _Relationship = new fhirCsR5.Models.Element();
          _Relationship.DeserializeJson(ref reader, options);
          break;

        case "targetId":
          TargetId = reader.GetString();
          break;

        case "_targetId":
          _TargetId = new fhirCsR5.Models.Element();
          _TargetId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.relatedAction.relationship field
  /// </summary>
  public static class PlanDefinitionActionRelatedActionRelationshipCodes {
    public const string BEFORE_START = "before-start";
    public const string BEFORE = "before";
    public const string BEFORE_END = "before-end";
    public const string CONCURRENT_WITH_START = "concurrent-with-start";
    public const string CONCURRENT = "concurrent";
    public const string CONCURRENT_WITH_END = "concurrent-with-end";
    public const string AFTER_START = "after-start";
    public const string AFTER = "after";
    public const string AFTER_END = "after-end";
    public static HashSet<string> Values = new HashSet<string>() {
      "before-start",
      "before",
      "before-end",
      "concurrent-with-start",
      "concurrent",
      "concurrent-with-end",
      "after-start",
      "after",
      "after-end",
    };
  }
  /// <summary>
  /// Indicates who should participate in performing the action described.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActionParticipant>))]
  public class PlanDefinitionActionParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A reference to the id element of the actor who will participate in this action.
    /// </summary>
    public string ActorId { get; set; }
    /// <summary>
    /// Extension container element for ActorId
    /// </summary>
    public Element _ActorId { get; set; }
    /// <summary>
    /// Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
    /// </summary>
    public CodeableConcept Function { get; set; }
    /// <summary>
    /// The role the participant should play in performing the described action.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// The type of participant in the action.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
    /// </summary>
    public Reference TypeReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ActorId))
      {
        writer.WriteString("actorId", (string)ActorId!);
      }

      if (_ActorId != null)
      {
        writer.WritePropertyName("_actorId");
        _ActorId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (TypeReference != null)
      {
        writer.WritePropertyName("typeReference");
        TypeReference.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Function != null)
      {
        writer.WritePropertyName("function");
        Function.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actorId":
          ActorId = reader.GetString();
          break;

        case "_actorId":
          _ActorId = new fhirCsR5.Models.Element();
          _ActorId.DeserializeJson(ref reader, options);
          break;

        case "function":
          Function = new fhirCsR5.Models.CodeableConcept();
          Function.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR5.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "typeReference":
          TypeReference = new fhirCsR5.Models.Reference();
          TypeReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.participant.type field
  /// </summary>
  public static class PlanDefinitionActionParticipantTypeCodes {
    public const string CARETEAM = "careteam";
    public const string DEVICE = "device";
    public const string GROUP = "group";
    public const string HEALTHCARESERVICE = "healthcareservice";
    public const string LOCATION = "location";
    public const string ORGANIZATION = "organization";
    public const string PATIENT = "patient";
    public const string PRACTITIONER = "practitioner";
    public const string PRACTITIONERROLE = "practitionerrole";
    public const string RELATEDPERSON = "relatedperson";
    public static HashSet<string> Values = new HashSet<string>() {
      "careteam",
      "device",
      "group",
      "healthcareservice",
      "location",
      "organization",
      "patient",
      "practitioner",
      "practitionerrole",
      "relatedperson",
    };
  }
  /// <summary>
  /// Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionActionDynamicValue>))]
  public class PlanDefinitionActionDynamicValue : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public Expression Expression { get; set; }
    /// <summary>
    /// To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (Expression != null)
      {
        writer.WritePropertyName("expression");
        Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "expression":
          Expression = new fhirCsR5.Models.Expression();
          Expression.DeserializeJson(ref reader, options);
          break;

        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR5.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinitionAction>))]
  public class PlanDefinitionAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
    /// </summary>
    public List<PlanDefinitionAction> Action { get; set; }
    /// <summary>
    /// Defines whether the action can be selected multiple times.
    /// </summary>
    public string CardinalityBehavior { get; set; }
    /// <summary>
    /// Extension container element for CardinalityBehavior
    /// </summary>
    public Element _CardinalityBehavior { get; set; }
    /// <summary>
    /// A code that provides a meaning, grouping, or classification for the action or action group. For example, a section may have a LOINC code for the section of a documentation template. In pharmaceutical quality, an action (Test) such as pH could be classified as a physical property.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
    /// </summary>
    public List<PlanDefinitionActionCondition> Condition { get; set; }
    /// <summary>
    /// Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
    /// </summary>
    public string DefinitionCanonical { get; set; }
    /// <summary>
    /// Extension container element for DefinitionCanonical
    /// </summary>
    public Element _DefinitionCanonical { get; set; }
    /// <summary>
    /// Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
    /// </summary>
    public string DefinitionUri { get; set; }
    /// <summary>
    /// Extension container element for DefinitionUri
    /// </summary>
    public Element _DefinitionUri { get; set; }
    /// <summary>
    /// A brief description of the action used to provide a summary to display to the user.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
    /// </summary>
    public List<RelatedArtifact> Documentation { get; set; }
    /// <summary>
    /// Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
    /// </summary>
    public List<PlanDefinitionActionDynamicValue> DynamicValue { get; set; }
    /// <summary>
    /// Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. In pharmaceutical quality, a goal represents acceptance criteria (Goal) for a given action (Test), so the goalId would be the unique id of a defined goal element establishing the acceptance criteria for the action.
    /// </summary>
    public List<string> GoalId { get; set; }
    /// <summary>
    /// Extension container element for GoalId
    /// </summary>
    public List<Element> _GoalId { get; set; }
    /// <summary>
    /// Defines the grouping behavior for the action and its children.
    /// </summary>
    public string GroupingBehavior { get; set; }
    /// <summary>
    /// Extension container element for GroupingBehavior
    /// </summary>
    public Element _GroupingBehavior { get; set; }
    /// <summary>
    /// Defines input data requirements for the action.
    /// </summary>
    public List<PlanDefinitionActionInput> Input { get; set; }
    /// <summary>
    /// An identifier that is unique within the PlanDefinition to allow linkage within the realized CarePlan and/or RequestGroup.
    /// </summary>
    public string LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public Element _LinkId { get; set; }
    /// <summary>
    /// May reference a specific clinical location or may just identify a type of location.
    /// </summary>
    public CodeableReference Location { get; set; }
    /// <summary>
    /// Defines the outputs of the action, if any.
    /// </summary>
    public List<PlanDefinitionActionOutput> Output { get; set; }
    /// <summary>
    /// Indicates who should participate in performing the action described.
    /// </summary>
    public List<PlanDefinitionActionParticipant> Participant { get; set; }
    /// <summary>
    /// Defines whether the action should usually be preselected.
    /// </summary>
    public string PrecheckBehavior { get; set; }
    /// <summary>
    /// Extension container element for PrecheckBehavior
    /// </summary>
    public Element _PrecheckBehavior { get; set; }
    /// <summary>
    /// A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
    /// </summary>
    public string Prefix { get; set; }
    /// <summary>
    /// Extension container element for Prefix
    /// </summary>
    public Element _Prefix { get; set; }
    /// <summary>
    /// Indicates how quickly the action should be addressed with respect to other actions.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.
    /// </summary>
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
    /// </summary>
    public List<PlanDefinitionActionRelatedAction> RelatedAction { get; set; }
    /// <summary>
    /// Defines the required behavior for the action.
    /// </summary>
    public string RequiredBehavior { get; set; }
    /// <summary>
    /// Extension container element for RequiredBehavior
    /// </summary>
    public Element _RequiredBehavior { get; set; }
    /// <summary>
    /// Defines the selection behavior for the action and its children.
    /// </summary>
    public string SelectionBehavior { get; set; }
    /// <summary>
    /// Extension container element for SelectionBehavior
    /// </summary>
    public Element _SelectionBehavior { get; set; }
    /// <summary>
    /// The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
    /// In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
    /// </summary>
    public CodeableConcept SubjectCodeableConcept { get; set; }
    /// <summary>
    /// The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
    /// In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
    /// </summary>
    public Reference SubjectReference { get; set; }
    /// <summary>
    /// The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
    /// In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
    /// </summary>
    public string SubjectCanonical { get; set; }
    /// <summary>
    /// Extension container element for SubjectCanonical
    /// </summary>
    public Element _SubjectCanonical { get; set; }
    /// <summary>
    /// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
    /// </summary>
    public string TextEquivalent { get; set; }
    /// <summary>
    /// Extension container element for TextEquivalent
    /// </summary>
    public Element _TextEquivalent { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestGroup, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
    /// </summary>
    public Age TimingAge { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestGroup, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
    /// </summary>
    public Duration TimingDuration { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestGroup, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
    /// </summary>
    public Range TimingRange { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestGroup, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
    /// </summary>
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
    /// </summary>
    public string Transform { get; set; }
    /// <summary>
    /// Extension container element for Transform
    /// </summary>
    public Element _Transform { get; set; }
    /// <summary>
    /// A description of when the action should be triggered.
    /// </summary>
    public List<TriggerDefinition> Trigger { get; set; }
    /// <summary>
    /// The type of action to perform (create, update, remove).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(LinkId))
      {
        writer.WriteString("linkId", (string)LinkId!);
      }

      if (_LinkId != null)
      {
        writer.WritePropertyName("_linkId");
        _LinkId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Prefix))
      {
        writer.WriteString("prefix", (string)Prefix!);
      }

      if (_Prefix != null)
      {
        writer.WritePropertyName("_prefix");
        _Prefix.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TextEquivalent))
      {
        writer.WriteString("textEquivalent", (string)TextEquivalent!);
      }

      if (_TextEquivalent != null)
      {
        writer.WritePropertyName("_textEquivalent");
        _TextEquivalent.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableConcept valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Documentation != null) && (Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();

        foreach (RelatedArtifact valDocumentation in Documentation)
        {
          valDocumentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((GoalId != null) && (GoalId.Count != 0))
      {
        writer.WritePropertyName("goalId");
        writer.WriteStartArray();

        foreach (string valGoalId in GoalId)
        {
          writer.WriteStringValue(valGoalId);
        }

        writer.WriteEndArray();
      }

      if ((_GoalId != null) && (_GoalId.Count != 0))
      {
        writer.WritePropertyName("_goalId");
        writer.WriteStartArray();

        foreach (Element val_GoalId in _GoalId)
        {
          val_GoalId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (SubjectCodeableConcept != null)
      {
        writer.WritePropertyName("subjectCodeableConcept");
        SubjectCodeableConcept.SerializeJson(writer, options);
      }

      if (SubjectReference != null)
      {
        writer.WritePropertyName("subjectReference");
        SubjectReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SubjectCanonical))
      {
        writer.WriteString("subjectCanonical", (string)SubjectCanonical!);
      }

      if (_SubjectCanonical != null)
      {
        writer.WritePropertyName("_subjectCanonical");
        _SubjectCanonical.SerializeJson(writer, options);
      }

      if ((Trigger != null) && (Trigger.Count != 0))
      {
        writer.WritePropertyName("trigger");
        writer.WriteStartArray();

        foreach (TriggerDefinition valTrigger in Trigger)
        {
          valTrigger.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionCondition valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Input != null) && (Input.Count != 0))
      {
        writer.WritePropertyName("input");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionInput valInput in Input)
        {
          valInput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Output != null) && (Output.Count != 0))
      {
        writer.WritePropertyName("output");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionOutput valOutput in Output)
        {
          valOutput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedAction != null) && (RelatedAction.Count != 0))
      {
        writer.WritePropertyName("relatedAction");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionRelatedAction valRelatedAction in RelatedAction)
        {
          valRelatedAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (TimingAge != null)
      {
        writer.WritePropertyName("timingAge");
        TimingAge.SerializeJson(writer, options);
      }

      if (TimingDuration != null)
      {
        writer.WritePropertyName("timingDuration");
        TimingDuration.SerializeJson(writer, options);
      }

      if (TimingRange != null)
      {
        writer.WritePropertyName("timingRange");
        TimingRange.SerializeJson(writer, options);
      }

      if (TimingTiming != null)
      {
        writer.WritePropertyName("timingTiming");
        TimingTiming.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(GroupingBehavior))
      {
        writer.WriteString("groupingBehavior", (string)GroupingBehavior!);
      }

      if (_GroupingBehavior != null)
      {
        writer.WritePropertyName("_groupingBehavior");
        _GroupingBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SelectionBehavior))
      {
        writer.WriteString("selectionBehavior", (string)SelectionBehavior!);
      }

      if (_SelectionBehavior != null)
      {
        writer.WritePropertyName("_selectionBehavior");
        _SelectionBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RequiredBehavior))
      {
        writer.WriteString("requiredBehavior", (string)RequiredBehavior!);
      }

      if (_RequiredBehavior != null)
      {
        writer.WritePropertyName("_requiredBehavior");
        _RequiredBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PrecheckBehavior))
      {
        writer.WriteString("precheckBehavior", (string)PrecheckBehavior!);
      }

      if (_PrecheckBehavior != null)
      {
        writer.WritePropertyName("_precheckBehavior");
        _PrecheckBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CardinalityBehavior))
      {
        writer.WriteString("cardinalityBehavior", (string)CardinalityBehavior!);
      }

      if (_CardinalityBehavior != null)
      {
        writer.WritePropertyName("_cardinalityBehavior");
        _CardinalityBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DefinitionCanonical))
      {
        writer.WriteString("definitionCanonical", (string)DefinitionCanonical!);
      }

      if (_DefinitionCanonical != null)
      {
        writer.WritePropertyName("_definitionCanonical");
        _DefinitionCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DefinitionUri))
      {
        writer.WriteString("definitionUri", (string)DefinitionUri!);
      }

      if (_DefinitionUri != null)
      {
        writer.WritePropertyName("_definitionUri");
        _DefinitionUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Transform))
      {
        writer.WriteString("transform", (string)Transform!);
      }

      if (_Transform != null)
      {
        writer.WritePropertyName("_transform");
        _Transform.SerializeJson(writer, options);
      }

      if ((DynamicValue != null) && (DynamicValue.Count != 0))
      {
        writer.WritePropertyName("dynamicValue");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionDynamicValue valDynamicValue in DynamicValue)
        {
          valDynamicValue.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (PlanDefinitionAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<PlanDefinitionAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionAction objAction = new fhirCsR5.Models.PlanDefinitionAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "cardinalityBehavior":
          CardinalityBehavior = reader.GetString();
          break;

        case "_cardinalityBehavior":
          _CardinalityBehavior = new fhirCsR5.Models.Element();
          _CardinalityBehavior.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<PlanDefinitionActionCondition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActionCondition objCondition = new fhirCsR5.Models.PlanDefinitionActionCondition();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "definitionCanonical":
          DefinitionCanonical = reader.GetString();
          break;

        case "_definitionCanonical":
          _DefinitionCanonical = new fhirCsR5.Models.Element();
          _DefinitionCanonical.DeserializeJson(ref reader, options);
          break;

        case "definitionUri":
          DefinitionUri = reader.GetString();
          break;

        case "_definitionUri":
          _DefinitionUri = new fhirCsR5.Models.Element();
          _DefinitionUri.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objDocumentation = new fhirCsR5.Models.RelatedArtifact();
            objDocumentation.DeserializeJson(ref reader, options);
            Documentation.Add(objDocumentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Documentation.Count == 0)
          {
            Documentation = null;
          }

          break;

        case "dynamicValue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DynamicValue = new List<PlanDefinitionActionDynamicValue>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActionDynamicValue objDynamicValue = new fhirCsR5.Models.PlanDefinitionActionDynamicValue();
            objDynamicValue.DeserializeJson(ref reader, options);
            DynamicValue.Add(objDynamicValue);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DynamicValue.Count == 0)
          {
            DynamicValue = null;
          }

          break;

        case "goalId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          GoalId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            GoalId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (GoalId.Count == 0)
          {
            GoalId = null;
          }

          break;

        case "_goalId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _GoalId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_GoalId = new fhirCsR5.Models.Element();
            obj_GoalId.DeserializeJson(ref reader, options);
            _GoalId.Add(obj_GoalId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_GoalId.Count == 0)
          {
            _GoalId = null;
          }

          break;

        case "groupingBehavior":
          GroupingBehavior = reader.GetString();
          break;

        case "_groupingBehavior":
          _GroupingBehavior = new fhirCsR5.Models.Element();
          _GroupingBehavior.DeserializeJson(ref reader, options);
          break;

        case "input":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Input = new List<PlanDefinitionActionInput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActionInput objInput = new fhirCsR5.Models.PlanDefinitionActionInput();
            objInput.DeserializeJson(ref reader, options);
            Input.Add(objInput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Input.Count == 0)
          {
            Input = null;
          }

          break;

        case "linkId":
          LinkId = reader.GetString();
          break;

        case "_linkId":
          _LinkId = new fhirCsR5.Models.Element();
          _LinkId.DeserializeJson(ref reader, options);
          break;

        case "location":
          Location = new fhirCsR5.Models.CodeableReference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "output":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Output = new List<PlanDefinitionActionOutput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActionOutput objOutput = new fhirCsR5.Models.PlanDefinitionActionOutput();
            objOutput.DeserializeJson(ref reader, options);
            Output.Add(objOutput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Output.Count == 0)
          {
            Output = null;
          }

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<PlanDefinitionActionParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActionParticipant objParticipant = new fhirCsR5.Models.PlanDefinitionActionParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "precheckBehavior":
          PrecheckBehavior = reader.GetString();
          break;

        case "_precheckBehavior":
          _PrecheckBehavior = new fhirCsR5.Models.Element();
          _PrecheckBehavior.DeserializeJson(ref reader, options);
          break;

        case "prefix":
          Prefix = reader.GetString();
          break;

        case "_prefix":
          _Prefix = new fhirCsR5.Models.Element();
          _Prefix.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR5.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objReason = new fhirCsR5.Models.CodeableConcept();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "relatedAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedAction = new List<PlanDefinitionActionRelatedAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActionRelatedAction objRelatedAction = new fhirCsR5.Models.PlanDefinitionActionRelatedAction();
            objRelatedAction.DeserializeJson(ref reader, options);
            RelatedAction.Add(objRelatedAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedAction.Count == 0)
          {
            RelatedAction = null;
          }

          break;

        case "requiredBehavior":
          RequiredBehavior = reader.GetString();
          break;

        case "_requiredBehavior":
          _RequiredBehavior = new fhirCsR5.Models.Element();
          _RequiredBehavior.DeserializeJson(ref reader, options);
          break;

        case "selectionBehavior":
          SelectionBehavior = reader.GetString();
          break;

        case "_selectionBehavior":
          _SelectionBehavior = new fhirCsR5.Models.Element();
          _SelectionBehavior.DeserializeJson(ref reader, options);
          break;

        case "subjectCodeableConcept":
          SubjectCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          SubjectCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "subjectReference":
          SubjectReference = new fhirCsR5.Models.Reference();
          SubjectReference.DeserializeJson(ref reader, options);
          break;

        case "subjectCanonical":
          SubjectCanonical = reader.GetString();
          break;

        case "_subjectCanonical":
          _SubjectCanonical = new fhirCsR5.Models.Element();
          _SubjectCanonical.DeserializeJson(ref reader, options);
          break;

        case "textEquivalent":
          TextEquivalent = reader.GetString();
          break;

        case "_textEquivalent":
          _TextEquivalent = new fhirCsR5.Models.Element();
          _TextEquivalent.DeserializeJson(ref reader, options);
          break;

        case "timingAge":
          TimingAge = new fhirCsR5.Models.Age();
          TimingAge.DeserializeJson(ref reader, options);
          break;

        case "timingDuration":
          TimingDuration = new fhirCsR5.Models.Duration();
          TimingDuration.DeserializeJson(ref reader, options);
          break;

        case "timingRange":
          TimingRange = new fhirCsR5.Models.Range();
          TimingRange.DeserializeJson(ref reader, options);
          break;

        case "timingTiming":
          TimingTiming = new fhirCsR5.Models.Timing();
          TimingTiming.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "transform":
          Transform = reader.GetString();
          break;

        case "_transform":
          _Transform = new fhirCsR5.Models.Element();
          _Transform.DeserializeJson(ref reader, options);
          break;

        case "trigger":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Trigger = new List<TriggerDefinition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.TriggerDefinition objTrigger = new fhirCsR5.Models.TriggerDefinition();
            objTrigger.DeserializeJson(ref reader, options);
            Trigger.Add(objTrigger);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Trigger.Count == 0)
          {
            Trigger = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.cardinalityBehavior field
  /// </summary>
  public static class PlanDefinitionActionCardinalityBehaviorCodes {
    public const string SINGLE = "single";
    public const string MULTIPLE = "multiple";
    public static HashSet<string> Values = new HashSet<string>() {
      "single",
      "multiple",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.groupingBehavior field
  /// </summary>
  public static class PlanDefinitionActionGroupingBehaviorCodes {
    public const string VISUAL_GROUP = "visual-group";
    public const string LOGICAL_GROUP = "logical-group";
    public const string SENTENCE_GROUP = "sentence-group";
    public static HashSet<string> Values = new HashSet<string>() {
      "visual-group",
      "logical-group",
      "sentence-group",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.precheckBehavior field
  /// </summary>
  public static class PlanDefinitionActionPrecheckBehaviorCodes {
    public const string YES = "yes";
    public const string NO = "no";
    public static HashSet<string> Values = new HashSet<string>() {
      "yes",
      "no",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.priority field
  /// </summary>
  public static class PlanDefinitionActionPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
    public static HashSet<string> Values = new HashSet<string>() {
      "routine",
      "urgent",
      "asap",
      "stat",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.requiredBehavior field
  /// </summary>
  public static class PlanDefinitionActionRequiredBehaviorCodes {
    public const string MUST = "must";
    public const string COULD = "could";
    public const string MUST_UNLESS_DOCUMENTED = "must-unless-documented";
    public static HashSet<string> Values = new HashSet<string>() {
      "must",
      "could",
      "must-unless-documented",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.selectionBehavior field
  /// </summary>
  public static class PlanDefinitionActionSelectionBehaviorCodes {
    public const string ANY = "any";
    public const string ALL = "all";
    public const string ALL_OR_NONE = "all-or-none";
    public const string EXACTLY_ONE = "exactly-one";
    public const string AT_MOST_ONE = "at-most-one";
    public const string ONE_OR_MORE = "one-or-more";
    public static HashSet<string> Values = new HashSet<string>() {
      "any",
      "all",
      "all-or-none",
      "exactly-one",
      "at-most-one",
      "one-or-more",
    };
  }
  /// <summary>
  /// This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PlanDefinition>))]
  public class PlanDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "PlanDefinition";
    /// <summary>
    /// Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
    /// </summary>
    public List<PlanDefinitionAction> Action { get; set; }
    /// <summary>
    /// Actors represent the individuals or groups involved in the execution of the defined set of activities.
    /// </summary>
    public List<PlanDefinitionActor> Actor { get; set; }
    /// <summary>
    /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// An individiual or organization primarily involved in the creation and maintenance of the content.
    /// </summary>
    public List<ContactDetail> Author { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the plan definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the plan definition is presumed to be the predominant language in the place the plan definition was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// An individual or organization primarily responsible for internal coherence of the content.
    /// </summary>
    public List<ContactDetail> Editor { get; set; }
    /// <summary>
    /// The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// An individual or organization responsible for officially endorsing the content for use in some setting.
    /// </summary>
    public List<ContactDetail> Endorser { get; set; }
    /// <summary>
    /// Allows filtering of plan definitions that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
    /// </summary>
    public List<PlanDefinitionGoal> Goal { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this plan definition outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// If specified, this date follows the original approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// A reference to a Library resource containing any formal logic used by the plan definition.
    /// </summary>
    public List<string> Library { get; set; }
    /// <summary>
    /// Extension container element for Library
    /// </summary>
    public List<Element> _Library { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the plan definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Each related artifact is either an attachment, or a reference to another resource, but not both.
    /// </summary>
    public List<RelatedArtifact> RelatedArtifact { get; set; }
    /// <summary>
    /// An individual or organization primarily responsible for review of some aspect of the content.
    /// </summary>
    public List<ContactDetail> Reviewer { get; set; }
    /// <summary>
    /// Allows filtering of plan definitions that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
    /// </summary>
    public CodeableConcept SubjectCodeableConcept { get; set; }
    /// <summary>
    /// A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
    /// </summary>
    public Reference SubjectReference { get; set; }
    /// <summary>
    /// A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
    /// </summary>
    public string SubjectCanonical { get; set; }
    /// <summary>
    /// Extension container element for SubjectCanonical
    /// </summary>
    public Element _SubjectCanonical { get; set; }
    /// <summary>
    /// An explanatory or alternate title for the plan definition giving additional information about its content.
    /// </summary>
    public string Subtitle { get; set; }
    /// <summary>
    /// Extension container element for Subtitle
    /// </summary>
    public Element _Subtitle { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
    /// </summary>
    public List<CodeableConcept> Topic { get; set; }
    /// <summary>
    /// A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// A detailed description of how the plan definition is used from a clinical perspective.
    /// </summary>
    public string Usage { get; set; }
    /// <summary>
    /// Extension container element for Usage
    /// </summary>
    public Element _Usage { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Subtitle))
      {
        writer.WriteString("subtitle", (string)Subtitle!);
      }

      if (_Subtitle != null)
      {
        writer.WritePropertyName("_subtitle");
        _Subtitle.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (SubjectCodeableConcept != null)
      {
        writer.WritePropertyName("subjectCodeableConcept");
        SubjectCodeableConcept.SerializeJson(writer, options);
      }

      if (SubjectReference != null)
      {
        writer.WritePropertyName("subjectReference");
        SubjectReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SubjectCanonical))
      {
        writer.WriteString("subjectCanonical", (string)SubjectCanonical!);
      }

      if (_SubjectCanonical != null)
      {
        writer.WritePropertyName("_subjectCanonical");
        _SubjectCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Usage))
      {
        writer.WriteString("usage", (string)Usage!);
      }

      if (_Usage != null)
      {
        writer.WritePropertyName("_usage");
        _Usage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((Topic != null) && (Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();

        foreach (CodeableConcept valTopic in Topic)
        {
          valTopic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Author != null) && (Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();

        foreach (ContactDetail valAuthor in Author)
        {
          valAuthor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Editor != null) && (Editor.Count != 0))
      {
        writer.WritePropertyName("editor");
        writer.WriteStartArray();

        foreach (ContactDetail valEditor in Editor)
        {
          valEditor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Reviewer != null) && (Reviewer.Count != 0))
      {
        writer.WritePropertyName("reviewer");
        writer.WriteStartArray();

        foreach (ContactDetail valReviewer in Reviewer)
        {
          valReviewer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Endorser != null) && (Endorser.Count != 0))
      {
        writer.WritePropertyName("endorser");
        writer.WriteStartArray();

        foreach (ContactDetail valEndorser in Endorser)
        {
          valEndorser.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedArtifact != null) && (RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();

        foreach (RelatedArtifact valRelatedArtifact in RelatedArtifact)
        {
          valRelatedArtifact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Library != null) && (Library.Count != 0))
      {
        writer.WritePropertyName("library");
        writer.WriteStartArray();

        foreach (string valLibrary in Library)
        {
          writer.WriteStringValue(valLibrary);
        }

        writer.WriteEndArray();
      }

      if ((_Library != null) && (_Library.Count != 0))
      {
        writer.WritePropertyName("_library");
        writer.WriteStartArray();

        foreach (Element val_Library in _Library)
        {
          val_Library.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (PlanDefinitionGoal valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (PlanDefinitionActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (PlanDefinitionAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<PlanDefinitionAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionAction objAction = new fhirCsR5.Models.PlanDefinitionAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<PlanDefinitionActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionActor objActor = new fhirCsR5.Models.PlanDefinitionActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR5.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objAuthor = new fhirCsR5.Models.ContactDetail();
            objAuthor.DeserializeJson(ref reader, options);
            Author.Add(objAuthor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Author.Count == 0)
          {
            Author = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objContact = new fhirCsR5.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR5.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objEditor = new fhirCsR5.Models.ContactDetail();
            objEditor.DeserializeJson(ref reader, options);
            Editor.Add(objEditor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Editor.Count == 0)
          {
            Editor = null;
          }

          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR5.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objEndorser = new fhirCsR5.Models.ContactDetail();
            objEndorser.DeserializeJson(ref reader, options);
            Endorser.Add(objEndorser);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endorser.Count == 0)
          {
            Endorser = null;
          }

          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR5.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<PlanDefinitionGoal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PlanDefinitionGoal objGoal = new fhirCsR5.Models.PlanDefinitionGoal();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objJurisdiction = new fhirCsR5.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR5.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Library = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Library.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Library.Count == 0)
          {
            Library = null;
          }

          break;

        case "_library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Library = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Library = new fhirCsR5.Models.Element();
            obj_Library.DeserializeJson(ref reader, options);
            _Library.Add(obj_Library);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Library.Count == 0)
          {
            _Library = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR5.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR5.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objRelatedArtifact = new fhirCsR5.Models.RelatedArtifact();
            objRelatedArtifact.DeserializeJson(ref reader, options);
            RelatedArtifact.Add(objRelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedArtifact.Count == 0)
          {
            RelatedArtifact = null;
          }

          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objReviewer = new fhirCsR5.Models.ContactDetail();
            objReviewer.DeserializeJson(ref reader, options);
            Reviewer.Add(objReviewer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reviewer.Count == 0)
          {
            Reviewer = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subjectCodeableConcept":
          SubjectCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          SubjectCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "subjectReference":
          SubjectReference = new fhirCsR5.Models.Reference();
          SubjectReference.DeserializeJson(ref reader, options);
          break;

        case "subjectCanonical":
          SubjectCanonical = reader.GetString();
          break;

        case "_subjectCanonical":
          _SubjectCanonical = new fhirCsR5.Models.Element();
          _SubjectCanonical.DeserializeJson(ref reader, options);
          break;

        case "subtitle":
          Subtitle = reader.GetString();
          break;

        case "_subtitle":
          _Subtitle = new fhirCsR5.Models.Element();
          _Subtitle.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objTopic = new fhirCsR5.Models.CodeableConcept();
            objTopic.DeserializeJson(ref reader, options);
            Topic.Add(objTopic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Topic.Count == 0)
          {
            Topic = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "usage":
          Usage = reader.GetString();
          break;

        case "_usage":
          _Usage = new fhirCsR5.Models.Element();
          _Usage.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.status field
  /// </summary>
  public static class PlanDefinitionStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
