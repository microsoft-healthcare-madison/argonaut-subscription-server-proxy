// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-snapshot1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SpecimenDefinitionTypeTestedContainerAdditive>))]
  public class SpecimenDefinitionTypeTestedContainerAdditive : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
    /// </summary>
    public CodeableConcept AdditiveCodeableConcept { get; set; }
    /// <summary>
    /// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
    /// </summary>
    public Reference AdditiveReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (AdditiveCodeableConcept != null)
      {
        writer.WritePropertyName("additiveCodeableConcept");
        AdditiveCodeableConcept.SerializeJson(writer, options);
      }

      if (AdditiveReference != null)
      {
        writer.WritePropertyName("additiveReference");
        AdditiveReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additiveCodeableConcept":
          AdditiveCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          AdditiveCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "additiveReference":
          AdditiveReference = new fhirCsR5.Models.Reference();
          AdditiveReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The specimen's container.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SpecimenDefinitionTypeTestedContainer>))]
  public class SpecimenDefinitionTypeTestedContainer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
    /// </summary>
    public List<SpecimenDefinitionTypeTestedContainerAdditive> Additive { get; set; }
    /// <summary>
    /// Color of container cap.
    /// </summary>
    public CodeableConcept Cap { get; set; }
    /// <summary>
    /// The capacity (volume or other measure) of this kind of container.
    /// </summary>
    public Quantity Capacity { get; set; }
    /// <summary>
    /// The textual description of the kind of container.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Examples: glass, plastic, metal.
    /// </summary>
    public CodeableConcept Material { get; set; }
    /// <summary>
    /// The minimum volume to be conditioned in the container.
    /// </summary>
    public Quantity MinimumVolumeQuantity { get; set; }
    /// <summary>
    /// The minimum volume to be conditioned in the container.
    /// </summary>
    public string MinimumVolumeString { get; set; }
    /// <summary>
    /// Extension container element for MinimumVolumeString
    /// </summary>
    public Element _MinimumVolumeString { get; set; }
    /// <summary>
    /// Special processing that should be applied to the container for this kind of specimen.
    /// </summary>
    public string Preparation { get; set; }
    /// <summary>
    /// Extension container element for Preparation
    /// </summary>
    public Element _Preparation { get; set; }
    /// <summary>
    /// The type of container used to contain this kind of specimen.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Material != null)
      {
        writer.WritePropertyName("material");
        Material.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Cap != null)
      {
        writer.WritePropertyName("cap");
        Cap.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Capacity != null)
      {
        writer.WritePropertyName("capacity");
        Capacity.SerializeJson(writer, options);
      }

      if (MinimumVolumeQuantity != null)
      {
        writer.WritePropertyName("minimumVolumeQuantity");
        MinimumVolumeQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MinimumVolumeString))
      {
        writer.WriteString("minimumVolumeString", (string)MinimumVolumeString!);
      }

      if (_MinimumVolumeString != null)
      {
        writer.WritePropertyName("_minimumVolumeString");
        _MinimumVolumeString.SerializeJson(writer, options);
      }

      if ((Additive != null) && (Additive.Count != 0))
      {
        writer.WritePropertyName("additive");
        writer.WriteStartArray();

        foreach (SpecimenDefinitionTypeTestedContainerAdditive valAdditive in Additive)
        {
          valAdditive.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Preparation))
      {
        writer.WriteString("preparation", (string)Preparation!);
      }

      if (_Preparation != null)
      {
        writer.WritePropertyName("_preparation");
        _Preparation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additive":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Additive = new List<SpecimenDefinitionTypeTestedContainerAdditive>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SpecimenDefinitionTypeTestedContainerAdditive objAdditive = new fhirCsR5.Models.SpecimenDefinitionTypeTestedContainerAdditive();
            objAdditive.DeserializeJson(ref reader, options);
            Additive.Add(objAdditive);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Additive.Count == 0)
          {
            Additive = null;
          }

          break;

        case "cap":
          Cap = new fhirCsR5.Models.CodeableConcept();
          Cap.DeserializeJson(ref reader, options);
          break;

        case "capacity":
          Capacity = new fhirCsR5.Models.Quantity();
          Capacity.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "material":
          Material = new fhirCsR5.Models.CodeableConcept();
          Material.DeserializeJson(ref reader, options);
          break;

        case "minimumVolumeQuantity":
          MinimumVolumeQuantity = new fhirCsR5.Models.Quantity();
          MinimumVolumeQuantity.DeserializeJson(ref reader, options);
          break;

        case "minimumVolumeString":
          MinimumVolumeString = reader.GetString();
          break;

        case "_minimumVolumeString":
          _MinimumVolumeString = new fhirCsR5.Models.Element();
          _MinimumVolumeString.DeserializeJson(ref reader, options);
          break;

        case "preparation":
          Preparation = reader.GetString();
          break;

        case "_preparation":
          _Preparation = new fhirCsR5.Models.Element();
          _Preparation.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SpecimenDefinitionTypeTestedHandling>))]
  public class SpecimenDefinitionTypeTestedHandling : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
    /// </summary>
    public string Instruction { get; set; }
    /// <summary>
    /// Extension container element for Instruction
    /// </summary>
    public Element _Instruction { get; set; }
    /// <summary>
    /// The maximum time interval of preservation of the specimen with these conditions.
    /// </summary>
    public Duration MaxDuration { get; set; }
    /// <summary>
    /// It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
    /// </summary>
    public CodeableConcept TemperatureQualifier { get; set; }
    /// <summary>
    /// The temperature interval for this set of handling instructions.
    /// </summary>
    public Range TemperatureRange { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (TemperatureQualifier != null)
      {
        writer.WritePropertyName("temperatureQualifier");
        TemperatureQualifier.SerializeJson(writer, options);
      }

      if (TemperatureRange != null)
      {
        writer.WritePropertyName("temperatureRange");
        TemperatureRange.SerializeJson(writer, options);
      }

      if (MaxDuration != null)
      {
        writer.WritePropertyName("maxDuration");
        MaxDuration.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Instruction))
      {
        writer.WriteString("instruction", (string)Instruction!);
      }

      if (_Instruction != null)
      {
        writer.WritePropertyName("_instruction");
        _Instruction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "instruction":
          Instruction = reader.GetString();
          break;

        case "_instruction":
          _Instruction = new fhirCsR5.Models.Element();
          _Instruction.DeserializeJson(ref reader, options);
          break;

        case "maxDuration":
          MaxDuration = new fhirCsR5.Models.Duration();
          MaxDuration.DeserializeJson(ref reader, options);
          break;

        case "temperatureQualifier":
          TemperatureQualifier = new fhirCsR5.Models.CodeableConcept();
          TemperatureQualifier.DeserializeJson(ref reader, options);
          break;

        case "temperatureRange":
          TemperatureRange = new fhirCsR5.Models.Range();
          TemperatureRange.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specimen conditioned in a container as expected by the testing laboratory.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SpecimenDefinitionTypeTested>))]
  public class SpecimenDefinitionTypeTested : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specimen's container.
    /// </summary>
    public SpecimenDefinitionTypeTestedContainer Container { get; set; }
    /// <summary>
    /// Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
    /// </summary>
    public List<SpecimenDefinitionTypeTestedHandling> Handling { get; set; }
    /// <summary>
    /// Primary of secondary specimen.
    /// </summary>
    public bool? IsDerived { get; set; }
    /// <summary>
    /// Extension container element for IsDerived
    /// </summary>
    public Element _IsDerived { get; set; }
    /// <summary>
    /// The preference for this type of conditioned specimen.
    /// </summary>
    public string Preference { get; set; }
    /// <summary>
    /// Extension container element for Preference
    /// </summary>
    public Element _Preference { get; set; }
    /// <summary>
    /// Criterion for rejection of the specimen in its container by the laboratory.
    /// </summary>
    public List<CodeableConcept> RejectionCriterion { get; set; }
    /// <summary>
    /// Requirements for delivery and special handling of this kind of conditioned specimen.
    /// </summary>
    public string Requirement { get; set; }
    /// <summary>
    /// Extension container element for Requirement
    /// </summary>
    public Element _Requirement { get; set; }
    /// <summary>
    /// The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
    /// </summary>
    public Duration RetentionTime { get; set; }
    /// <summary>
    /// Specimen can be used by only one test or panel if the value is "true".
    /// </summary>
    public bool? SingleUse { get; set; }
    /// <summary>
    /// Extension container element for SingleUse
    /// </summary>
    public Element _SingleUse { get; set; }
    /// <summary>
    /// Where the specimen will be tested: e.g., lab, sector, device or any combination of these.
    /// </summary>
    public List<CodeableConcept> TestingDestination { get; set; }
    /// <summary>
    /// The kind of specimen conditioned for testing expected by lab.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (IsDerived != null)
      {
        writer.WriteBoolean("isDerived", (bool)IsDerived!);
      }

      if (_IsDerived != null)
      {
        writer.WritePropertyName("_isDerived");
        _IsDerived.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Preference))
      {
        writer.WriteString("preference", (string)Preference!);
      }

      if (_Preference != null)
      {
        writer.WritePropertyName("_preference");
        _Preference.SerializeJson(writer, options);
      }

      if (Container != null)
      {
        writer.WritePropertyName("container");
        Container.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Requirement))
      {
        writer.WriteString("requirement", (string)Requirement!);
      }

      if (_Requirement != null)
      {
        writer.WritePropertyName("_requirement");
        _Requirement.SerializeJson(writer, options);
      }

      if (RetentionTime != null)
      {
        writer.WritePropertyName("retentionTime");
        RetentionTime.SerializeJson(writer, options);
      }

      if (SingleUse != null)
      {
        writer.WriteBoolean("singleUse", (bool)SingleUse!);
      }

      if (_SingleUse != null)
      {
        writer.WritePropertyName("_singleUse");
        _SingleUse.SerializeJson(writer, options);
      }

      if ((RejectionCriterion != null) && (RejectionCriterion.Count != 0))
      {
        writer.WritePropertyName("rejectionCriterion");
        writer.WriteStartArray();

        foreach (CodeableConcept valRejectionCriterion in RejectionCriterion)
        {
          valRejectionCriterion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Handling != null) && (Handling.Count != 0))
      {
        writer.WritePropertyName("handling");
        writer.WriteStartArray();

        foreach (SpecimenDefinitionTypeTestedHandling valHandling in Handling)
        {
          valHandling.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((TestingDestination != null) && (TestingDestination.Count != 0))
      {
        writer.WritePropertyName("testingDestination");
        writer.WriteStartArray();

        foreach (CodeableConcept valTestingDestination in TestingDestination)
        {
          valTestingDestination.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "container":
          Container = new fhirCsR5.Models.SpecimenDefinitionTypeTestedContainer();
          Container.DeserializeJson(ref reader, options);
          break;

        case "handling":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Handling = new List<SpecimenDefinitionTypeTestedHandling>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SpecimenDefinitionTypeTestedHandling objHandling = new fhirCsR5.Models.SpecimenDefinitionTypeTestedHandling();
            objHandling.DeserializeJson(ref reader, options);
            Handling.Add(objHandling);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Handling.Count == 0)
          {
            Handling = null;
          }

          break;

        case "isDerived":
          IsDerived = reader.GetBoolean();
          break;

        case "_isDerived":
          _IsDerived = new fhirCsR5.Models.Element();
          _IsDerived.DeserializeJson(ref reader, options);
          break;

        case "preference":
          Preference = reader.GetString();
          break;

        case "_preference":
          _Preference = new fhirCsR5.Models.Element();
          _Preference.DeserializeJson(ref reader, options);
          break;

        case "rejectionCriterion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RejectionCriterion = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objRejectionCriterion = new fhirCsR5.Models.CodeableConcept();
            objRejectionCriterion.DeserializeJson(ref reader, options);
            RejectionCriterion.Add(objRejectionCriterion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RejectionCriterion.Count == 0)
          {
            RejectionCriterion = null;
          }

          break;

        case "requirement":
          Requirement = reader.GetString();
          break;

        case "_requirement":
          _Requirement = new fhirCsR5.Models.Element();
          _Requirement.DeserializeJson(ref reader, options);
          break;

        case "retentionTime":
          RetentionTime = new fhirCsR5.Models.Duration();
          RetentionTime.DeserializeJson(ref reader, options);
          break;

        case "singleUse":
          SingleUse = reader.GetBoolean();
          break;

        case "_singleUse":
          _SingleUse = new fhirCsR5.Models.Element();
          _SingleUse.DeserializeJson(ref reader, options);
          break;

        case "testingDestination":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TestingDestination = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objTestingDestination = new fhirCsR5.Models.CodeableConcept();
            objTestingDestination.DeserializeJson(ref reader, options);
            TestingDestination.Add(objTestingDestination);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TestingDestination.Count == 0)
          {
            TestingDestination = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the SpecimenDefinition.typeTested.preference field
  /// </summary>
  public static class SpecimenDefinitionTypeTestedPreferenceCodes {
    public const string PREFERRED = "preferred";
    public const string ALTERNATE = "alternate";
    public static HashSet<string> Values = new HashSet<string>() {
      "preferred",
      "alternate",
    };
  }
  /// <summary>
  /// A kind of specimen with associated set of requirements.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SpecimenDefinition>))]
  public class SpecimenDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "SpecimenDefinition";
    /// <summary>
    /// The date may be more recent than the approval date because of minor changes / editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// The action to be performed for collecting the specimen.
    /// </summary>
    public List<CodeableConcept> Collection { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// Copyright statement relating to the SpecimenDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SpecimenDefinition.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The canonical URL pointing to another FHIR-defined SpecimenDefinition that is adhered to in whole or in part by this definition.
    /// </summary>
    public List<string> DerivedFromCanonical { get; set; }
    /// <summary>
    /// Extension container element for DerivedFromCanonical
    /// </summary>
    public List<Element> _DerivedFromCanonical { get; set; }
    /// <summary>
    /// The URL pointing to an externally-defined type of specimen, guideline or other definition that is adhered to in whole or in part by this definition.
    /// </summary>
    public List<string> DerivedFromUri { get; set; }
    /// <summary>
    /// Extension container element for DerivedFromUri
    /// </summary>
    public List<Element> _DerivedFromUri { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the SpecimenDefinition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The effective period for a SpecimenDefinition determines when the content is applicable for usage and is independent of publication and review dates.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Allows filtering of SpecimenDefinition that are appropriate for use vs. not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// A business identifier assigned to this SpecimenDefinition.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// A jurisdiction in which the SpecimenDefinition is intended to be used.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// If specified, this is usually after the approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// Preparation of the patient for specimen collection.
    /// </summary>
    public List<CodeableConcept> PatientPreparation { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the SpecimenDefinition. May also allow for contact.
    /// </summary>
    public Reference Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the SpecimenDefinition. Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this SpecimenDefinition.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// A nominal state-transition diagram can be found in the [[definition.html#statemachine | Definition pattern]] documentation
    /// Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Examples: person, animal, device, water ….
    /// </summary>
    public CodeableConcept SubjectCodeableConcept { get; set; }
    /// <summary>
    /// Examples: person, animal, device, water ….
    /// </summary>
    public Reference SubjectReference { get; set; }
    /// <summary>
    /// Time aspect of specimen collection (duration or offset).
    /// </summary>
    public string TimeAspect { get; set; }
    /// <summary>
    /// Extension container element for TimeAspect
    /// </summary>
    public Element _TimeAspect { get; set; }
    /// <summary>
    /// A short, descriptive, user-friendly title for the SpecimenDefinition.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// The kind of material to be collected.
    /// </summary>
    public CodeableConcept TypeCollected { get; set; }
    /// <summary>
    /// Specimen conditioned in a container as expected by the testing laboratory.
    /// </summary>
    public List<SpecimenDefinitionTypeTested> TypeTested { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred. This is the URI that will be used when making canonical references to this resource.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be multiple different instances of a SpecimenDefinition that have the same identifier but different versions.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if ((DerivedFromCanonical != null) && (DerivedFromCanonical.Count != 0))
      {
        writer.WritePropertyName("derivedFromCanonical");
        writer.WriteStartArray();

        foreach (string valDerivedFromCanonical in DerivedFromCanonical)
        {
          writer.WriteStringValue(valDerivedFromCanonical);
        }

        writer.WriteEndArray();
      }

      if ((_DerivedFromCanonical != null) && (_DerivedFromCanonical.Count != 0))
      {
        writer.WritePropertyName("_derivedFromCanonical");
        writer.WriteStartArray();

        foreach (Element val_DerivedFromCanonical in _DerivedFromCanonical)
        {
          val_DerivedFromCanonical.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((DerivedFromUri != null) && (DerivedFromUri.Count != 0))
      {
        writer.WritePropertyName("derivedFromUri");
        writer.WriteStartArray();

        foreach (string valDerivedFromUri in DerivedFromUri)
        {
          writer.WriteStringValue(valDerivedFromUri);
        }

        writer.WriteEndArray();
      }

      if ((_DerivedFromUri != null) && (_DerivedFromUri.Count != 0))
      {
        writer.WritePropertyName("_derivedFromUri");
        writer.WriteStartArray();

        foreach (Element val_DerivedFromUri in _DerivedFromUri)
        {
          val_DerivedFromUri.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (SubjectCodeableConcept != null)
      {
        writer.WritePropertyName("subjectCodeableConcept");
        SubjectCodeableConcept.SerializeJson(writer, options);
      }

      if (SubjectReference != null)
      {
        writer.WritePropertyName("subjectReference");
        SubjectReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Publisher != null)
      {
        writer.WritePropertyName("publisher");
        Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if (TypeCollected != null)
      {
        writer.WritePropertyName("typeCollected");
        TypeCollected.SerializeJson(writer, options);
      }

      if ((PatientPreparation != null) && (PatientPreparation.Count != 0))
      {
        writer.WritePropertyName("patientPreparation");
        writer.WriteStartArray();

        foreach (CodeableConcept valPatientPreparation in PatientPreparation)
        {
          valPatientPreparation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(TimeAspect))
      {
        writer.WriteString("timeAspect", (string)TimeAspect!);
      }

      if (_TimeAspect != null)
      {
        writer.WritePropertyName("_timeAspect");
        _TimeAspect.SerializeJson(writer, options);
      }

      if ((Collection != null) && (Collection.Count != 0))
      {
        writer.WritePropertyName("collection");
        writer.WriteStartArray();

        foreach (CodeableConcept valCollection in Collection)
        {
          valCollection.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((TypeTested != null) && (TypeTested.Count != 0))
      {
        writer.WritePropertyName("typeTested");
        writer.WriteStartArray();

        foreach (SpecimenDefinitionTypeTested valTypeTested in TypeTested)
        {
          valTypeTested.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR5.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "collection":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Collection = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCollection = new fhirCsR5.Models.CodeableConcept();
            objCollection.DeserializeJson(ref reader, options);
            Collection.Add(objCollection);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Collection.Count == 0)
          {
            Collection = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objContact = new fhirCsR5.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR5.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "derivedFromCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DerivedFromCanonical = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DerivedFromCanonical.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DerivedFromCanonical.Count == 0)
          {
            DerivedFromCanonical = null;
          }

          break;

        case "_derivedFromCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _DerivedFromCanonical = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_DerivedFromCanonical = new fhirCsR5.Models.Element();
            obj_DerivedFromCanonical.DeserializeJson(ref reader, options);
            _DerivedFromCanonical.Add(obj_DerivedFromCanonical);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_DerivedFromCanonical.Count == 0)
          {
            _DerivedFromCanonical = null;
          }

          break;

        case "derivedFromUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DerivedFromUri = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DerivedFromUri.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DerivedFromUri.Count == 0)
          {
            DerivedFromUri = null;
          }

          break;

        case "_derivedFromUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _DerivedFromUri = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_DerivedFromUri = new fhirCsR5.Models.Element();
            obj_DerivedFromUri.DeserializeJson(ref reader, options);
            _DerivedFromUri.Add(obj_DerivedFromUri);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_DerivedFromUri.Count == 0)
          {
            _DerivedFromUri = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR5.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR5.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR5.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objJurisdiction = new fhirCsR5.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR5.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "patientPreparation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PatientPreparation = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objPatientPreparation = new fhirCsR5.Models.CodeableConcept();
            objPatientPreparation.DeserializeJson(ref reader, options);
            PatientPreparation.Add(objPatientPreparation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PatientPreparation.Count == 0)
          {
            PatientPreparation = null;
          }

          break;

        case "publisher":
          Publisher = new fhirCsR5.Models.Reference();
          Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR5.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subjectCodeableConcept":
          SubjectCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          SubjectCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "subjectReference":
          SubjectReference = new fhirCsR5.Models.Reference();
          SubjectReference.DeserializeJson(ref reader, options);
          break;

        case "timeAspect":
          TimeAspect = reader.GetString();
          break;

        case "_timeAspect":
          _TimeAspect = new fhirCsR5.Models.Element();
          _TimeAspect.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "typeCollected":
          TypeCollected = new fhirCsR5.Models.CodeableConcept();
          TypeCollected.DeserializeJson(ref reader, options);
          break;

        case "typeTested":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TypeTested = new List<SpecimenDefinitionTypeTested>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SpecimenDefinitionTypeTested objTypeTested = new fhirCsR5.Models.SpecimenDefinitionTypeTested();
            objTypeTested.DeserializeJson(ref reader, options);
            TypeTested.Add(objTypeTested);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TypeTested.Count == 0)
          {
            TypeTested = null;
          }

          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the SpecimenDefinition.status field
  /// </summary>
  public static class SpecimenDefinitionStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
