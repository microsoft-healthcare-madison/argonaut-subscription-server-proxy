// <auto-generated />
// Built from: hl7.fhir.r5.core version: 3.0.1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventOutcome>))]
  public class AuditEventOutcome : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// A human readable description of the error issue SHOULD be placed in details.text.
    /// </summary>
    public List<CodeableConcept> Detail { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (CodeableConcept valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objDetail = new fhirCsR5.Models.CodeableConcept();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
  /// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity. 
  /// When a network are used in an event being recorded, there should be distinct agent elements for the known actors using the network. The agent with a network detail would be the responsible agent for use of that network.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventAgent>))]
  public class AuditEventAgent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Use AuditEvent.agent.authorization when you know that is specific to the agent, otherwise use AuditEvent.authorization. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
    /// </summary>
    public List<CodeableConcept> Authorization { get; set; }
    /// <summary>
    /// Where the agent location is known, the agent location when the event occurred.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
    /// </summary>
    public Reference NetworkReference { get; set; }
    /// <summary>
    /// When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
    /// </summary>
    public string NetworkUri { get; set; }
    /// <summary>
    /// Extension container element for NetworkUri
    /// </summary>
    public Element _NetworkUri { get; set; }
    /// <summary>
    /// When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
    /// </summary>
    public string NetworkString { get; set; }
    /// <summary>
    /// Extension container element for NetworkString
    /// </summary>
    public Element _NetworkString { get; set; }
    /// <summary>
    /// For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
    /// </summary>
    public List<string> Policy { get; set; }
    /// <summary>
    /// Extension container element for Policy
    /// </summary>
    public List<Element> _Policy { get; set; }
    /// <summary>
    /// There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
    /// </summary>
    public bool? Requestor { get; set; }
    /// <summary>
    /// Extension container element for Requestor
    /// </summary>
    public Element _Requestor { get; set; }
    /// <summary>
    /// For example: Chief-of-Radiology, Nurse, Physician, Medical-Student, etc.
    /// </summary>
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// For example: assembler, author, prescriber, signer, investigator, etc.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Where a User ID is available it will go into who.identifier. Where a name of the user (human readable) it will go into who.display.
    /// </summary>
    public Reference Who { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Role != null) && (Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();

        foreach (CodeableConcept valRole in Role)
        {
          valRole.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Who != null)
      {
        writer.WritePropertyName("who");
        Who.SerializeJson(writer, options);
      }

      if (Requestor != null)
      {
        writer.WriteBoolean("requestor", (bool)Requestor!);
      }

      if (_Requestor != null)
      {
        writer.WritePropertyName("_requestor");
        _Requestor.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Policy != null) && (Policy.Count != 0))
      {
        writer.WritePropertyName("policy");
        writer.WriteStartArray();

        foreach (string valPolicy in Policy)
        {
          writer.WriteStringValue(valPolicy);
        }

        writer.WriteEndArray();
      }

      if ((_Policy != null) && (_Policy.Count != 0))
      {
        writer.WritePropertyName("_policy");
        writer.WriteStartArray();

        foreach (Element val_Policy in _Policy)
        {
          val_Policy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (NetworkReference != null)
      {
        writer.WritePropertyName("networkReference");
        NetworkReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(NetworkUri))
      {
        writer.WriteString("networkUri", (string)NetworkUri!);
      }

      if (_NetworkUri != null)
      {
        writer.WritePropertyName("_networkUri");
        _NetworkUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(NetworkString))
      {
        writer.WriteString("networkString", (string)NetworkString!);
      }

      if (_NetworkString != null)
      {
        writer.WritePropertyName("_networkString");
        _NetworkString.SerializeJson(writer, options);
      }

      if ((Authorization != null) && (Authorization.Count != 0))
      {
        writer.WritePropertyName("authorization");
        writer.WriteStartArray();

        foreach (CodeableConcept valAuthorization in Authorization)
        {
          valAuthorization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authorization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Authorization = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objAuthorization = new fhirCsR5.Models.CodeableConcept();
            objAuthorization.DeserializeJson(ref reader, options);
            Authorization.Add(objAuthorization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Authorization.Count == 0)
          {
            Authorization = null;
          }

          break;

        case "location":
          Location = new fhirCsR5.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "networkReference":
          NetworkReference = new fhirCsR5.Models.Reference();
          NetworkReference.DeserializeJson(ref reader, options);
          break;

        case "networkUri":
          NetworkUri = reader.GetString();
          break;

        case "_networkUri":
          _NetworkUri = new fhirCsR5.Models.Element();
          _NetworkUri.DeserializeJson(ref reader, options);
          break;

        case "networkString":
          NetworkString = reader.GetString();
          break;

        case "_networkString":
          _NetworkString = new fhirCsR5.Models.Element();
          _NetworkString.DeserializeJson(ref reader, options);
          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Policy = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Policy.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Policy.Count == 0)
          {
            Policy = null;
          }

          break;

        case "_policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Policy = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Policy = new fhirCsR5.Models.Element();
            obj_Policy.DeserializeJson(ref reader, options);
            _Policy.Add(obj_Policy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Policy.Count == 0)
          {
            _Policy = null;
          }

          break;

        case "requestor":
          Requestor = reader.GetBoolean();
          break;

        case "_requestor":
          _Requestor = new fhirCsR5.Models.Element();
          _Requestor.DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objRole = new fhirCsR5.Models.CodeableConcept();
            objRole.DeserializeJson(ref reader, options);
            Role.Add(objRole);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Role.Count == 0)
          {
            Role = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "who":
          Who = new fhirCsR5.Models.Reference();
          Who.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Events are reported by the actor that detected them. This may be one of the participating actors, but may also be different. The actor may be a human such as a medical-records clerk disclosing data manually, that clerk would be the source for the record of disclosure.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventSource>))]
  public class AuditEventSource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifier of the source where the event was detected.
    /// </summary>
    public Reference Observer { get; set; }
    /// <summary>
    /// Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
    /// </summary>
    public Reference Site { get; set; }
    /// <summary>
    /// Code specifying the type of source where event originated.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Site != null)
      {
        writer.WritePropertyName("site");
        Site.SerializeJson(writer, options);
      }

      if (Observer != null)
      {
        writer.WritePropertyName("observer");
        Observer.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "observer":
          Observer = new fhirCsR5.Models.Reference();
          Observer.DeserializeJson(ref reader, options);
          break;

        case "site":
          Site = new fhirCsR5.Models.Reference();
          Site.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objType = new fhirCsR5.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Tagged value pairs for conveying additional information about the entity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventEntityDetail>))]
  public class AuditEventEntityDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The type of extra detail provided in the value.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Extension container element for ValueInteger
    /// </summary>
    public Element _ValueInteger { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public string ValueTime { get; set; }
    /// <summary>
    /// Extension container element for ValueTime
    /// </summary>
    public Element _ValueTime { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public string ValueDateTime { get; set; }
    /// <summary>
    /// Extension container element for ValueDateTime
    /// </summary>
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public Period ValuePeriod { get; set; }
    /// <summary>
    /// The  value of the extra detail.
    /// </summary>
    public byte[] ValueBase64Binary { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (_ValueInteger != null)
      {
        writer.WritePropertyName("_valueInteger");
        _ValueInteger.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueRatio != null)
      {
        writer.WritePropertyName("valueRatio");
        ValueRatio.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueTime))
      {
        writer.WriteString("valueTime", (string)ValueTime!);
      }

      if (_ValueTime != null)
      {
        writer.WritePropertyName("_valueTime");
        _ValueTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDateTime))
      {
        writer.WriteString("valueDateTime", (string)ValueDateTime!);
      }

      if (_ValueDateTime != null)
      {
        writer.WritePropertyName("_valueDateTime");
        _ValueDateTime.SerializeJson(writer, options);
      }

      if (ValuePeriod != null)
      {
        writer.WritePropertyName("valuePeriod");
        ValuePeriod.SerializeJson(writer, options);
      }

      if (ValueBase64Binary != null)
      {
        writer.WriteString("valueBase64Binary", System.Convert.ToBase64String(ValueBase64Binary));
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR5.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR5.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "_valueInteger":
          _ValueInteger = new fhirCsR5.Models.Element();
          _ValueInteger.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR5.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueRatio":
          ValueRatio = new fhirCsR5.Models.Ratio();
          ValueRatio.DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          ValueTime = reader.GetString();
          break;

        case "_valueTime":
          _ValueTime = new fhirCsR5.Models.Element();
          _ValueTime.DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          ValueDateTime = reader.GetString();
          break;

        case "_valueDateTime":
          _ValueDateTime = new fhirCsR5.Models.Element();
          _ValueDateTime.DeserializeJson(ref reader, options);
          break;

        case "valuePeriod":
          ValuePeriod = new fhirCsR5.Models.Period();
          ValuePeriod.DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          ValueBase64Binary = System.Convert.FromBase64String(reader.GetString());
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEventEntity>))]
  public class AuditEventEntity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A usecase where one AuditEvent.entity.agent is used where the Entity that was used in the creation/updating of a target resource, is not in the context of the same custodianship as the target resource, and thus the meaning of AuditEvent.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the provenance of that Entity's use in the context of this AuditEvent activity.
    /// </summary>
    public List<AuditEventAgent> Agent { get; set; }
    /// <summary>
    /// Tagged value pairs for conveying additional information about the entity.
    /// </summary>
    public List<AuditEventEntityDetail> Detail { get; set; }
    /// <summary>
    /// The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example, if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
    /// The DICOM AuditMessage schema does not support both .name and .query being populated.
    /// </summary>
    public byte[] Query { get; set; }
    /// <summary>
    /// Code representing the role the entity played in the event being audited.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Copied from entity meta security tags.
    /// </summary>
    public List<CodeableConcept> SecurityLabel { get; set; }
    /// <summary>
    /// Use .what.display when all you have is a string (e.g. ParticipantObjectName).
    /// </summary>
    public Reference What { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (What != null)
      {
        writer.WritePropertyName("what");
        What.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (CodeableConcept valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Query != null)
      {
        writer.WriteString("query", System.Convert.ToBase64String(Query));
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (AuditEventEntityDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Agent != null) && (Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();

        foreach (AuditEventAgent valAgent in Agent)
        {
          valAgent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Agent = new List<AuditEventAgent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AuditEventAgent objAgent = new fhirCsR5.Models.AuditEventAgent();
            objAgent.DeserializeJson(ref reader, options);
            Agent.Add(objAgent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Agent.Count == 0)
          {
            Agent = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<AuditEventEntityDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AuditEventEntityDetail objDetail = new fhirCsR5.Models.AuditEventEntityDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "query":
          Query = System.Convert.FromBase64String(reader.GetString());
          break;

        case "role":
          Role = new fhirCsR5.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objSecurityLabel = new fhirCsR5.Models.CodeableConcept();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "what":
          What = new fhirCsR5.Models.Reference();
          What.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AuditEvent>))]
  public class AuditEvent : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "AuditEvent";
    /// <summary>
    /// Indicator for type of action performed during the event that generated the audit.
    /// </summary>
    public string Action { get; set; }
    /// <summary>
    /// Extension container element for Action
    /// </summary>
    public Element _Action { get; set; }
    /// <summary>
    /// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
    /// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity. 
    /// When a network are used in an event being recorded, there should be distinct agent elements for the known actors using the network. The agent with a network detail would be the responsible agent for use of that network.
    /// </summary>
    public List<AuditEventAgent> Agent { get; set; }
    /// <summary>
    /// Use AuditEvent.agent.authorization when you know that it is specific to the agent, otherwise use AuditEvent.authorization. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
    /// </summary>
    public List<CodeableConcept> Authorization { get; set; }
    /// <summary>
    /// Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// Classification of the type of event.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Describes what happened. The most specific code for the event.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
    /// </summary>
    public List<AuditEventEntity> Entity { get; set; }
    /// <summary>
    /// The time or period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
    /// </summary>
    public Period OccurredPeriod { get; set; }
    /// <summary>
    /// The time or period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
    /// </summary>
    public string OccurredDateTime { get; set; }
    /// <summary>
    /// Extension container element for OccurredDateTime
    /// </summary>
    public Element _OccurredDateTime { get; set; }
    /// <summary>
    /// In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
    /// </summary>
    public AuditEventOutcome Outcome { get; set; }
    /// <summary>
    /// In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
    /// </summary>
    public string Recorded { get; set; }
    /// <summary>
    /// Extension container element for Recorded
    /// </summary>
    public Element _Recorded { get; set; }
    /// <summary>
    /// ATNA will map this to the SYSLOG PRI element.
    /// </summary>
    public string Severity { get; set; }
    /// <summary>
    /// Extension container element for Severity
    /// </summary>
    public Element _Severity { get; set; }
    /// <summary>
    /// Events are reported by the actor that detected them. This may be one of the participating actors, but may also be different. The actor may be a human such as a medical-records clerk disclosing data manually, that clerk would be the source for the record of disclosure.
    /// </summary>
    public AuditEventSource Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Action))
      {
        writer.WriteString("action", (string)Action!);
      }

      if (_Action != null)
      {
        writer.WritePropertyName("_action");
        _Action.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Severity))
      {
        writer.WriteString("severity", (string)Severity!);
      }

      if (_Severity != null)
      {
        writer.WritePropertyName("_severity");
        _Severity.SerializeJson(writer, options);
      }

      if (OccurredPeriod != null)
      {
        writer.WritePropertyName("occurredPeriod");
        OccurredPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OccurredDateTime))
      {
        writer.WriteString("occurredDateTime", (string)OccurredDateTime!);
      }

      if (_OccurredDateTime != null)
      {
        writer.WritePropertyName("_occurredDateTime");
        _OccurredDateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Recorded))
      {
        writer.WriteString("recorded", (string)Recorded!);
      }

      if (_Recorded != null)
      {
        writer.WritePropertyName("_recorded");
        _Recorded.SerializeJson(writer, options);
      }

      if (Outcome != null)
      {
        writer.WritePropertyName("outcome");
        Outcome.SerializeJson(writer, options);
      }

      if ((Authorization != null) && (Authorization.Count != 0))
      {
        writer.WritePropertyName("authorization");
        writer.WriteStartArray();

        foreach (CodeableConcept valAuthorization in Authorization)
        {
          valAuthorization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if ((Agent != null) && (Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();

        foreach (AuditEventAgent valAgent in Agent)
        {
          valAgent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if ((Entity != null) && (Entity.Count != 0))
      {
        writer.WritePropertyName("entity");
        writer.WriteStartArray();

        foreach (AuditEventEntity valEntity in Entity)
        {
          valEntity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          Action = reader.GetString();
          break;

        case "_action":
          _Action = new fhirCsR5.Models.Element();
          _Action.DeserializeJson(ref reader, options);
          break;

        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Agent = new List<AuditEventAgent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AuditEventAgent objAgent = new fhirCsR5.Models.AuditEventAgent();
            objAgent.DeserializeJson(ref reader, options);
            Agent.Add(objAgent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Agent.Count == 0)
          {
            Agent = null;
          }

          break;

        case "authorization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Authorization = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objAuthorization = new fhirCsR5.Models.CodeableConcept();
            objAuthorization.DeserializeJson(ref reader, options);
            Authorization.Add(objAuthorization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Authorization.Count == 0)
          {
            Authorization = null;
          }

          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCategory = new fhirCsR5.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR5.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "entity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Entity = new List<AuditEventEntity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AuditEventEntity objEntity = new fhirCsR5.Models.AuditEventEntity();
            objEntity.DeserializeJson(ref reader, options);
            Entity.Add(objEntity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Entity.Count == 0)
          {
            Entity = null;
          }

          break;

        case "occurredPeriod":
          OccurredPeriod = new fhirCsR5.Models.Period();
          OccurredPeriod.DeserializeJson(ref reader, options);
          break;

        case "occurredDateTime":
          OccurredDateTime = reader.GetString();
          break;

        case "_occurredDateTime":
          _OccurredDateTime = new fhirCsR5.Models.Element();
          _OccurredDateTime.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = new fhirCsR5.Models.AuditEventOutcome();
          Outcome.DeserializeJson(ref reader, options);
          break;

        case "recorded":
          Recorded = reader.GetString();
          break;

        case "_recorded":
          _Recorded = new fhirCsR5.Models.Element();
          _Recorded.DeserializeJson(ref reader, options);
          break;

        case "severity":
          Severity = reader.GetString();
          break;

        case "_severity":
          _Severity = new fhirCsR5.Models.Element();
          _Severity.DeserializeJson(ref reader, options);
          break;

        case "source":
          Source = new fhirCsR5.Models.AuditEventSource();
          Source.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the AuditEvent.severity field
  /// </summary>
  public static class AuditEventSeverityCodes {
    public const string EMERGENCY = "emergency";
    public const string ALERT = "alert";
    public const string CRITICAL = "critical";
    public const string ERROR = "error";
    public const string WARNING = "warning";
    public const string NOTICE = "notice";
    public const string INFORMATIONAL = "informational";
    public const string DEBUG = "debug";
    public static HashSet<string> Values = new HashSet<string>() {
      "emergency",
      "alert",
      "critical",
      "error",
      "warning",
      "notice",
      "informational",
      "debug",
    };
  }
}
