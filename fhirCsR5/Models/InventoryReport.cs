// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-snapshot1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// The item or items in this listing.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<InventoryReportInventoryListingItems>))]
  public class InventoryReportInventoryListingItems : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The category of the item or items.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The expiry date of the item or items.
    /// </summary>
    public string Expiry { get; set; }
    /// <summary>
    /// Extension container element for Expiry
    /// </summary>
    public Element _Expiry { get; set; }
    /// <summary>
    /// The code or reference to the item type.
    /// </summary>
    public CodeableReference Item { get; set; }
    /// <summary>
    /// The lot number of the item or items.
    /// </summary>
    public string Lot { get; set; }
    /// <summary>
    /// Extension container element for Lot
    /// </summary>
    public Element _Lot { get; set; }
    /// <summary>
    /// The manufacturingDate of the item or items.
    /// </summary>
    public string ManufacturingDate { get; set; }
    /// <summary>
    /// Extension container element for ManufacturingDate
    /// </summary>
    public Element _ManufacturingDate { get; set; }
    /// <summary>
    /// The quantity of the item or items.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The serial number of the item.
    /// </summary>
    public string Serial { get; set; }
    /// <summary>
    /// Extension container element for Serial
    /// </summary>
    public Element _Serial { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (Item != null)
      {
        writer.WritePropertyName("item");
        Item.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Lot))
      {
        writer.WriteString("lot", (string)Lot!);
      }

      if (_Lot != null)
      {
        writer.WritePropertyName("_lot");
        _Lot.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Serial))
      {
        writer.WriteString("serial", (string)Serial!);
      }

      if (_Serial != null)
      {
        writer.WritePropertyName("_serial");
        _Serial.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Expiry))
      {
        writer.WriteString("expiry", (string)Expiry!);
      }

      if (_Expiry != null)
      {
        writer.WritePropertyName("_expiry");
        _Expiry.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ManufacturingDate))
      {
        writer.WriteString("manufacturingDate", (string)ManufacturingDate!);
      }

      if (_ManufacturingDate != null)
      {
        writer.WritePropertyName("_manufacturingDate");
        _ManufacturingDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR5.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "expiry":
          Expiry = reader.GetString();
          break;

        case "_expiry":
          _Expiry = new fhirCsR5.Models.Element();
          _Expiry.DeserializeJson(ref reader, options);
          break;

        case "item":
          Item = new fhirCsR5.Models.CodeableReference();
          Item.DeserializeJson(ref reader, options);
          break;

        case "lot":
          Lot = reader.GetString();
          break;

        case "_lot":
          _Lot = new fhirCsR5.Models.Element();
          _Lot.DeserializeJson(ref reader, options);
          break;

        case "manufacturingDate":
          ManufacturingDate = reader.GetString();
          break;

        case "_manufacturingDate":
          _ManufacturingDate = new fhirCsR5.Models.Element();
          _ManufacturingDate.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR5.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "serial":
          Serial = reader.GetString();
          break;

        case "_serial":
          _Serial = new fhirCsR5.Models.Element();
          _Serial.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An inventory listing section (grouped by any of the attributes).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<InventoryReportInventoryListing>))]
  public class InventoryReportInventoryListing : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The date and time when the items were counted.
    /// </summary>
    public string CountingDateTime { get; set; }
    /// <summary>
    /// Extension container element for CountingDateTime
    /// </summary>
    public Element _CountingDateTime { get; set; }
    /// <summary>
    /// The item or items in this listing.
    /// </summary>
    public List<InventoryReportInventoryListingItems> Items { get; set; }
    /// <summary>
    /// The status of the items.
    /// </summary>
    public CodeableConcept ItemStatus { get; set; }
    /// <summary>
    /// Location of the inventory items.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if (ItemStatus != null)
      {
        writer.WritePropertyName("itemStatus");
        ItemStatus.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CountingDateTime))
      {
        writer.WriteString("countingDateTime", (string)CountingDateTime!);
      }

      if (_CountingDateTime != null)
      {
        writer.WritePropertyName("_countingDateTime");
        _CountingDateTime.SerializeJson(writer, options);
      }

      if ((Items != null) && (Items.Count != 0))
      {
        writer.WritePropertyName("items");
        writer.WriteStartArray();

        foreach (InventoryReportInventoryListingItems valItems in Items)
        {
          valItems.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "countingDateTime":
          CountingDateTime = reader.GetString();
          break;

        case "_countingDateTime":
          _CountingDateTime = new fhirCsR5.Models.Element();
          _CountingDateTime.DeserializeJson(ref reader, options);
          break;

        case "items":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Items = new List<InventoryReportInventoryListingItems>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.InventoryReportInventoryListingItems objItems = new fhirCsR5.Models.InventoryReportInventoryListingItems();
            objItems.DeserializeJson(ref reader, options);
            Items.Add(objItems);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Items.Count == 0)
          {
            Items = null;
          }

          break;

        case "itemStatus":
          ItemStatus = new fhirCsR5.Models.CodeableConcept();
          ItemStatus.DeserializeJson(ref reader, options);
          break;

        case "location":
          Location = new fhirCsR5.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A report of inventory or stock items.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<InventoryReport>))]
  public class InventoryReport : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "InventoryReport";
    /// <summary>
    /// Whether the report is about the current inventory count (snapshot) or a differential change in inventory (change).
    /// </summary>
    public string CountType { get; set; }
    /// <summary>
    /// Extension container element for CountType
    /// </summary>
    public Element _CountType { get; set; }
    /// <summary>
    /// Identifiers for the InventoryReport.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// An inventory listing section (grouped by any of the attributes).
    /// </summary>
    public List<InventoryReportInventoryListing> InventoryListing { get; set; }
    /// <summary>
    /// A note associated with the InventoryReport.
    /// </summary>
    public Annotation Note { get; set; }
    /// <summary>
    /// What type of operation is being performed - addition or subtraction.
    /// </summary>
    public CodeableConcept OperationType { get; set; }
    /// <summary>
    /// The reason for this count - regular count, ad-hoc count, new arrivals, etc.
    /// </summary>
    public CodeableConcept OperationTypeReason { get; set; }
    /// <summary>
    /// When the report has been submitted.
    /// </summary>
    public string ReportedDateTime { get; set; }
    /// <summary>
    /// Extension container element for ReportedDateTime
    /// </summary>
    public Element _ReportedDateTime { get; set; }
    /// <summary>
    /// Who submits the report.
    /// </summary>
    public Reference Reporter { get; set; }
    /// <summary>
    /// The period the report refers to.
    /// </summary>
    public Period ReportingPeriod { get; set; }
    /// <summary>
    /// The status of the inventory check or notification - whether this is draft (e.g. the report is still pending some updates) or active.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CountType))
      {
        writer.WriteString("countType", (string)CountType!);
      }

      if (_CountType != null)
      {
        writer.WritePropertyName("_countType");
        _CountType.SerializeJson(writer, options);
      }

      if (OperationType != null)
      {
        writer.WritePropertyName("operationType");
        OperationType.SerializeJson(writer, options);
      }

      if (OperationTypeReason != null)
      {
        writer.WritePropertyName("operationTypeReason");
        OperationTypeReason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReportedDateTime))
      {
        writer.WriteString("reportedDateTime", (string)ReportedDateTime!);
      }

      if (_ReportedDateTime != null)
      {
        writer.WritePropertyName("_reportedDateTime");
        _ReportedDateTime.SerializeJson(writer, options);
      }

      if (Reporter != null)
      {
        writer.WritePropertyName("reporter");
        Reporter.SerializeJson(writer, options);
      }

      if (ReportingPeriod != null)
      {
        writer.WritePropertyName("reportingPeriod");
        ReportingPeriod.SerializeJson(writer, options);
      }

      if ((InventoryListing != null) && (InventoryListing.Count != 0))
      {
        writer.WritePropertyName("inventoryListing");
        writer.WriteStartArray();

        foreach (InventoryReportInventoryListing valInventoryListing in InventoryListing)
        {
          valInventoryListing.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Note != null)
      {
        writer.WritePropertyName("note");
        Note.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "countType":
          CountType = reader.GetString();
          break;

        case "_countType":
          _CountType = new fhirCsR5.Models.Element();
          _CountType.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "inventoryListing":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InventoryListing = new List<InventoryReportInventoryListing>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.InventoryReportInventoryListing objInventoryListing = new fhirCsR5.Models.InventoryReportInventoryListing();
            objInventoryListing.DeserializeJson(ref reader, options);
            InventoryListing.Add(objInventoryListing);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InventoryListing.Count == 0)
          {
            InventoryListing = null;
          }

          break;

        case "note":
          Note = new fhirCsR5.Models.Annotation();
          Note.DeserializeJson(ref reader, options);
          break;

        case "operationType":
          OperationType = new fhirCsR5.Models.CodeableConcept();
          OperationType.DeserializeJson(ref reader, options);
          break;

        case "operationTypeReason":
          OperationTypeReason = new fhirCsR5.Models.CodeableConcept();
          OperationTypeReason.DeserializeJson(ref reader, options);
          break;

        case "reportedDateTime":
          ReportedDateTime = reader.GetString();
          break;

        case "_reportedDateTime":
          _ReportedDateTime = new fhirCsR5.Models.Element();
          _ReportedDateTime.DeserializeJson(ref reader, options);
          break;

        case "reporter":
          Reporter = new fhirCsR5.Models.Reference();
          Reporter.DeserializeJson(ref reader, options);
          break;

        case "reportingPeriod":
          ReportingPeriod = new fhirCsR5.Models.Period();
          ReportingPeriod.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the InventoryReport.countType field
  /// </summary>
  public static class InventoryReportCountTypeCodes {
    public const string SNAPSHOT = "snapshot";
    public const string DIFFERENCE = "difference";
    public static HashSet<string> Values = new HashSet<string>() {
      "snapshot",
      "difference",
    };
  }
  /// <summary>
  /// Code Values for the InventoryReport.status field
  /// </summary>
  public static class InventoryReportStatusCodes {
    public const string DRAFT = "draft";
    public const string REQUESTED = "requested";
    public const string ACTIVE = "active";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "requested",
      "active",
      "entered-in-error",
    };
  }
}
