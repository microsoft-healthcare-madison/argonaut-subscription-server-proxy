// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-snapshot1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// The organization that assigns the identifier algorithm.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionUdiDeviceIdentifierMarketDistribution>))]
  public class DeviceDefinitionUdiDeviceIdentifierMarketDistribution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Begin and end dates for the commercial distribution of the device.
    /// </summary>
    public Period MarketPeriod { get; set; }
    /// <summary>
    /// National state or territory to which the marketDistribution recers, typically where the device is commercialized.
    /// </summary>
    public string SubJurisdiction { get; set; }
    /// <summary>
    /// Extension container element for SubJurisdiction
    /// </summary>
    public Element _SubJurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (MarketPeriod != null)
      {
        writer.WritePropertyName("marketPeriod");
        MarketPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SubJurisdiction))
      {
        writer.WriteString("subJurisdiction", (string)SubJurisdiction!);
      }

      if (_SubJurisdiction != null)
      {
        writer.WritePropertyName("_subJurisdiction");
        _SubJurisdiction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "marketPeriod":
          MarketPeriod = new fhirCsR5.Models.Period();
          MarketPeriod.DeserializeJson(ref reader, options);
          break;

        case "subJurisdiction":
          SubJurisdiction = reader.GetString();
          break;

        case "_subJurisdiction":
          _SubJurisdiction = new fhirCsR5.Models.Element();
          _SubJurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionUdiDeviceIdentifier>))]
  public class DeviceDefinitionUdiDeviceIdentifier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier.
    /// </summary>
    public string DeviceIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DeviceIdentifier
    /// </summary>
    public Element _DeviceIdentifier { get; set; }
    /// <summary>
    /// The organization that assigns the identifier algorithm.
    /// </summary>
    public string Issuer { get; set; }
    /// <summary>
    /// Extension container element for Issuer
    /// </summary>
    public Element _Issuer { get; set; }
    /// <summary>
    /// The jurisdiction to which the deviceIdentifier applies.
    /// </summary>
    public string Jurisdiction { get; set; }
    /// <summary>
    /// Extension container element for Jurisdiction
    /// </summary>
    public Element _Jurisdiction { get; set; }
    /// <summary>
    /// The organization that assigns the identifier algorithm.
    /// </summary>
    public List<DeviceDefinitionUdiDeviceIdentifierMarketDistribution> MarketDistribution { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(DeviceIdentifier))
      {
        writer.WriteString("deviceIdentifier", (string)DeviceIdentifier!);
      }

      if (_DeviceIdentifier != null)
      {
        writer.WritePropertyName("_deviceIdentifier");
        _DeviceIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issuer))
      {
        writer.WriteString("issuer", (string)Issuer!);
      }

      if (_Issuer != null)
      {
        writer.WritePropertyName("_issuer");
        _Issuer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Jurisdiction))
      {
        writer.WriteString("jurisdiction", (string)Jurisdiction!);
      }

      if (_Jurisdiction != null)
      {
        writer.WritePropertyName("_jurisdiction");
        _Jurisdiction.SerializeJson(writer, options);
      }

      if ((MarketDistribution != null) && (MarketDistribution.Count != 0))
      {
        writer.WritePropertyName("marketDistribution");
        writer.WriteStartArray();

        foreach (DeviceDefinitionUdiDeviceIdentifierMarketDistribution valMarketDistribution in MarketDistribution)
        {
          valMarketDistribution.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          DeviceIdentifier = reader.GetString();
          break;

        case "_deviceIdentifier":
          _DeviceIdentifier = new fhirCsR5.Models.Element();
          _DeviceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "issuer":
          Issuer = reader.GetString();
          break;

        case "_issuer":
          _Issuer = new fhirCsR5.Models.Element();
          _Issuer.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = reader.GetString();
          break;

        case "_jurisdiction":
          _Jurisdiction = new fhirCsR5.Models.Element();
          _Jurisdiction.DeserializeJson(ref reader, options);
          break;

        case "marketDistribution":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MarketDistribution = new List<DeviceDefinitionUdiDeviceIdentifierMarketDistribution>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionUdiDeviceIdentifierMarketDistribution objMarketDistribution = new fhirCsR5.Models.DeviceDefinitionUdiDeviceIdentifierMarketDistribution();
            objMarketDistribution.DeserializeJson(ref reader, options);
            MarketDistribution.Add(objMarketDistribution);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MarketDistribution.Count == 0)
          {
            MarketDistribution = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The name or names of the device as given by the manufacturer.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionDeviceName>))]
  public class DeviceDefinitionDeviceName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The type of deviceName.
    /// RegisteredName | UserFriendlyName | PatientReportedName.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the DeviceDefinition.deviceName.type field
  /// </summary>
  public static class DeviceDefinitionDeviceNameTypeCodes {
    public const string REGISTERED_NAME = "registered-name";
    public const string USER_FRIENDLY_NAME = "user-friendly-name";
    public const string PATIENT_REPORTED_NAME = "patient-reported-name";
    public static HashSet<string> Values = new HashSet<string>() {
      "registered-name",
      "user-friendly-name",
      "patient-reported-name",
    };
  }
  /// <summary>
  /// In this element various classifications can be used, such as GMDN, EMDN, SNOMED CT, risk classes, national product codes.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionClassification>))]
  public class DeviceDefinitionClassification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Further information qualifying this classification of the device model.
    /// </summary>
    public List<RelatedArtifact> Justification { get; set; }
    /// <summary>
    /// A classification or risk class of the device model.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Justification != null) && (Justification.Count != 0))
      {
        writer.WritePropertyName("justification");
        writer.WriteStartArray();

        foreach (RelatedArtifact valJustification in Justification)
        {
          valJustification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "justification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Justification = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objJustification = new fhirCsR5.Models.RelatedArtifact();
            objJustification.DeserializeJson(ref reader, options);
            Justification.Add(objJustification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Justification.Count == 0)
          {
            Justification = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A device that is part (for example a component) of the present device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionHasPart>))]
  public class DeviceDefinitionHasPart : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Number of instances of the component device in the current device.
    /// </summary>
    public int? Count { get; set; }
    /// <summary>
    /// Extension container element for Count
    /// </summary>
    public Element _Count { get; set; }
    /// <summary>
    /// Reference to the device that is part of the current device.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (Count != null)
      {
        writer.WriteNumber("count", (int)Count!);
      }

      if (_Count != null)
      {
        writer.WritePropertyName("_count");
        _Count.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "count":
          Count = reader.GetInt32();
          break;

        case "_count":
          _Count = new fhirCsR5.Models.Element();
          _Count.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR5.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An organization that distributes the packaged device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionPackagingDistributor>))]
  public class DeviceDefinitionPackagingDistributor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Distributor's human-readable name.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Distributor as an Organization resource.
    /// </summary>
    public List<Reference> OrganizationReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((OrganizationReference != null) && (OrganizationReference.Count != 0))
      {
        writer.WritePropertyName("organizationReference");
        writer.WriteStartArray();

        foreach (Reference valOrganizationReference in OrganizationReference)
        {
          valOrganizationReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "organizationReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OrganizationReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objOrganizationReference = new fhirCsR5.Models.Reference();
            objOrganizationReference.DeserializeJson(ref reader, options);
            OrganizationReference.Add(objOrganizationReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OrganizationReference.Count == 0)
          {
            OrganizationReference = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The organization that assigns the identifier algorithm.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionPackagingUdiDeviceIdentifierMarketDistribution>))]
  public class DeviceDefinitionPackagingUdiDeviceIdentifierMarketDistribution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Begin and end dates for the commercial distribution of the device.
    /// </summary>
    public Period MarketPeriod { get; set; }
    /// <summary>
    /// National state or territory to which the marketDistribution refers, typically where the device is commercialized.
    /// </summary>
    public string SubJurisdiction { get; set; }
    /// <summary>
    /// Extension container element for SubJurisdiction
    /// </summary>
    public Element _SubJurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (MarketPeriod != null)
      {
        writer.WritePropertyName("marketPeriod");
        MarketPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SubJurisdiction))
      {
        writer.WriteString("subJurisdiction", (string)SubJurisdiction!);
      }

      if (_SubJurisdiction != null)
      {
        writer.WritePropertyName("_subJurisdiction");
        _SubJurisdiction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "marketPeriod":
          MarketPeriod = new fhirCsR5.Models.Period();
          MarketPeriod.DeserializeJson(ref reader, options);
          break;

        case "subJurisdiction":
          SubJurisdiction = reader.GetString();
          break;

        case "_subJurisdiction":
          _SubJurisdiction = new fhirCsR5.Models.Element();
          _SubJurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Unique Device Identifier (UDI) Barcode string on the packaging.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionPackagingUdiDeviceIdentifier>))]
  public class DeviceDefinitionPackagingUdiDeviceIdentifier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifier to be associated with every instance for issuer and jurisdiction.
    /// </summary>
    public string DeviceIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DeviceIdentifier
    /// </summary>
    public Element _DeviceIdentifier { get; set; }
    /// <summary>
    /// The organization that assigns the identifier algorithm.
    /// </summary>
    public string Issuer { get; set; }
    /// <summary>
    /// Extension container element for Issuer
    /// </summary>
    public Element _Issuer { get; set; }
    /// <summary>
    /// The jurisdiction to which the deviceIdentifier applies.
    /// </summary>
    public string Jurisdiction { get; set; }
    /// <summary>
    /// Extension container element for Jurisdiction
    /// </summary>
    public Element _Jurisdiction { get; set; }
    /// <summary>
    /// The organization that assigns the identifier algorithm.
    /// </summary>
    public DeviceDefinitionPackagingUdiDeviceIdentifierMarketDistribution MarketDistribution { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(DeviceIdentifier))
      {
        writer.WriteString("deviceIdentifier", (string)DeviceIdentifier!);
      }

      if (_DeviceIdentifier != null)
      {
        writer.WritePropertyName("_deviceIdentifier");
        _DeviceIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issuer))
      {
        writer.WriteString("issuer", (string)Issuer!);
      }

      if (_Issuer != null)
      {
        writer.WritePropertyName("_issuer");
        _Issuer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Jurisdiction))
      {
        writer.WriteString("jurisdiction", (string)Jurisdiction!);
      }

      if (_Jurisdiction != null)
      {
        writer.WritePropertyName("_jurisdiction");
        _Jurisdiction.SerializeJson(writer, options);
      }

      if (MarketDistribution != null)
      {
        writer.WritePropertyName("marketDistribution");
        MarketDistribution.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          DeviceIdentifier = reader.GetString();
          break;

        case "_deviceIdentifier":
          _DeviceIdentifier = new fhirCsR5.Models.Element();
          _DeviceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "issuer":
          Issuer = reader.GetString();
          break;

        case "_issuer":
          _Issuer = new fhirCsR5.Models.Element();
          _Issuer.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = reader.GetString();
          break;

        case "_jurisdiction":
          _Jurisdiction = new fhirCsR5.Models.Element();
          _Jurisdiction.DeserializeJson(ref reader, options);
          break;

        case "marketDistribution":
          MarketDistribution = new fhirCsR5.Models.DeviceDefinitionPackagingUdiDeviceIdentifierMarketDistribution();
          MarketDistribution.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about the packaging of the device, i.e. how the device is packaged.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionPackaging>))]
  public class DeviceDefinitionPackaging : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The number of items contained in the package (devices or sub-packages).
    /// </summary>
    public int? Count { get; set; }
    /// <summary>
    /// Extension container element for Count
    /// </summary>
    public Element _Count { get; set; }
    /// <summary>
    /// An organization that distributes the packaged device.
    /// </summary>
    public List<DeviceDefinitionPackagingDistributor> Distributor { get; set; }
    /// <summary>
    /// The business identifier of the packaged medication.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Allows packages within packages.
    /// </summary>
    public List<DeviceDefinitionPackaging> Packaging { get; set; }
    /// <summary>
    /// A code that defines the specific type of packaging.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string on the packaging.
    /// </summary>
    public List<DeviceDefinitionPackagingUdiDeviceIdentifier> UdiDeviceIdentifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Count != null)
      {
        writer.WriteNumber("count", (int)Count!);
      }

      if (_Count != null)
      {
        writer.WritePropertyName("_count");
        _Count.SerializeJson(writer, options);
      }

      if ((Distributor != null) && (Distributor.Count != 0))
      {
        writer.WritePropertyName("distributor");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackagingDistributor valDistributor in Distributor)
        {
          valDistributor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UdiDeviceIdentifier != null) && (UdiDeviceIdentifier.Count != 0))
      {
        writer.WritePropertyName("udiDeviceIdentifier");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackagingUdiDeviceIdentifier valUdiDeviceIdentifier in UdiDeviceIdentifier)
        {
          valUdiDeviceIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Packaging != null) && (Packaging.Count != 0))
      {
        writer.WritePropertyName("packaging");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackaging valPackaging in Packaging)
        {
          valPackaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "count":
          Count = reader.GetInt32();
          break;

        case "_count":
          _Count = new fhirCsR5.Models.Element();
          _Count.DeserializeJson(ref reader, options);
          break;

        case "distributor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Distributor = new List<DeviceDefinitionPackagingDistributor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackagingDistributor objDistributor = new fhirCsR5.Models.DeviceDefinitionPackagingDistributor();
            objDistributor.DeserializeJson(ref reader, options);
            Distributor.Add(objDistributor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Distributor.Count == 0)
          {
            Distributor = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR5.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "packaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Packaging = new List<DeviceDefinitionPackaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackaging objPackaging = new fhirCsR5.Models.DeviceDefinitionPackaging();
            objPackaging.DeserializeJson(ref reader, options);
            Packaging.Add(objPackaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Packaging.Count == 0)
          {
            Packaging = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udiDeviceIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UdiDeviceIdentifier = new List<DeviceDefinitionPackagingUdiDeviceIdentifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackagingUdiDeviceIdentifier objUdiDeviceIdentifier = new fhirCsR5.Models.DeviceDefinitionPackagingUdiDeviceIdentifier();
            objUdiDeviceIdentifier.DeserializeJson(ref reader, options);
            UdiDeviceIdentifier.Add(objUdiDeviceIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UdiDeviceIdentifier.Count == 0)
          {
            UdiDeviceIdentifier = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The version of the device or software.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionVersion>))]
  public class DeviceDefinitionVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
    /// </summary>
    public Identifier Component { get; set; }
    /// <summary>
    /// The type of the device version, e.g. manufacturer, approved, internal.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The version text.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Component != null)
      {
        writer.WritePropertyName("component");
        Component.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "component":
          Component = new fhirCsR5.Models.Identifier();
          Component.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR5.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The potential, valid configuration settings of a device, e.g., regulation status, time properties.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionProperty>))]
  public class DeviceDefinitionProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Code that specifies the property.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The usage of CodeableConcept is for concepts that are normally coded but for which a code is not available - for example a device implant size that is not standardized. The property string is for text characteristics, e.g. long descriptions, warnings, etc.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The usage of CodeableConcept is for concepts that are normally coded but for which a code is not available - for example a device implant size that is not standardized. The property string is for text characteristics, e.g. long descriptions, warnings, etc.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The usage of CodeableConcept is for concepts that are normally coded but for which a code is not available - for example a device implant size that is not standardized. The property string is for text characteristics, e.g. long descriptions, warnings, etc.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The usage of CodeableConcept is for concepts that are normally coded but for which a code is not available - for example a device implant size that is not standardized. The property string is for text characteristics, e.g. long descriptions, warnings, etc.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// The usage of CodeableConcept is for concepts that are normally coded but for which a code is not available - for example a device implant size that is not standardized. The property string is for text characteristics, e.g. long descriptions, warnings, etc.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Extension container element for ValueInteger
    /// </summary>
    public Element _ValueInteger { get; set; }
    /// <summary>
    /// The usage of CodeableConcept is for concepts that are normally coded but for which a code is not available - for example a device implant size that is not standardized. The property string is for text characteristics, e.g. long descriptions, warnings, etc.
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The usage of CodeableConcept is for concepts that are normally coded but for which a code is not available - for example a device implant size that is not standardized. The property string is for text characteristics, e.g. long descriptions, warnings, etc.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (_ValueInteger != null)
      {
        writer.WritePropertyName("_valueInteger");
        _ValueInteger.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR5.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR5.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "_valueInteger":
          _ValueInteger = new fhirCsR5.Models.Element();
          _ValueInteger.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR5.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR5.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionLink>))]
  public class DeviceDefinitionLink : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A reference to the linked device.
    /// </summary>
    public CodeableReference RelatedDevice { get; set; }
    /// <summary>
    /// The type indicates the relationship of the related device to the device instance.
    /// </summary>
    public Coding Relation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Relation != null)
      {
        writer.WritePropertyName("relation");
        Relation.SerializeJson(writer, options);
      }

      if (RelatedDevice != null)
      {
        writer.WritePropertyName("relatedDevice");
        RelatedDevice.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relatedDevice":
          RelatedDevice = new fhirCsR5.Models.CodeableReference();
          RelatedDevice.DeserializeJson(ref reader, options);
          break;

        case "relation":
          Relation = new fhirCsR5.Models.Coding();
          Relation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A substance used to create the material(s) of which the device is made.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionMaterial>))]
  public class DeviceDefinitionMaterial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Whether the substance is a known or suspected allergen.
    /// </summary>
    public bool? AllergenicIndicator { get; set; }
    /// <summary>
    /// Extension container element for AllergenicIndicator
    /// </summary>
    public Element _AllergenicIndicator { get; set; }
    /// <summary>
    /// Indicates an alternative material of the device.
    /// </summary>
    public bool? Alternate { get; set; }
    /// <summary>
    /// Extension container element for Alternate
    /// </summary>
    public Element _Alternate { get; set; }
    /// <summary>
    /// A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.
    /// </summary>
    public CodeableConcept Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (Alternate != null)
      {
        writer.WriteBoolean("alternate", (bool)Alternate!);
      }

      if (_Alternate != null)
      {
        writer.WritePropertyName("_alternate");
        _Alternate.SerializeJson(writer, options);
      }

      if (AllergenicIndicator != null)
      {
        writer.WriteBoolean("allergenicIndicator", (bool)AllergenicIndicator!);
      }

      if (_AllergenicIndicator != null)
      {
        writer.WritePropertyName("_allergenicIndicator");
        _AllergenicIndicator.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allergenicIndicator":
          AllergenicIndicator = reader.GetBoolean();
          break;

        case "_allergenicIndicator":
          _AllergenicIndicator = new fhirCsR5.Models.Element();
          _AllergenicIndicator.DeserializeJson(ref reader, options);
          break;

        case "alternate":
          Alternate = reader.GetBoolean();
          break;

        case "_alternate":
          _Alternate = new fhirCsR5.Models.Element();
          _Alternate.DeserializeJson(ref reader, options);
          break;

        case "substance":
          Substance = new fhirCsR5.Models.CodeableConcept();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information aimed at providing directions for the usage of this model of device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionGuideline>))]
  public class DeviceDefinitionGuideline : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A specific situation when a device should not be used because it may cause harm.
    /// </summary>
    public List<CodeableReference> Contraindication { get; set; }
    /// <summary>
    /// A clinical condition for which the device was designed to be used.
    /// </summary>
    public List<CodeableReference> Indication { get; set; }
    /// <summary>
    /// A description of the general purpose or medical use of the device or its function.
    /// </summary>
    public string IntendedUse { get; set; }
    /// <summary>
    /// Extension container element for IntendedUse
    /// </summary>
    public Element _IntendedUse { get; set; }
    /// <summary>
    /// A source of information or reference for this guideline.
    /// </summary>
    public List<RelatedArtifact> RelatedArtifact { get; set; }
    /// <summary>
    /// Detailed written and visual directions for the user on how to use the device.
    /// </summary>
    public string UsageInstruction { get; set; }
    /// <summary>
    /// Extension container element for UsageInstruction
    /// </summary>
    public Element _UsageInstruction { get; set; }
    /// <summary>
    /// The circumstances that form the setting for using the device.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// Specific hazard alert information that a user needs to know before using the device.
    /// </summary>
    public List<CodeableReference> Warning { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(UsageInstruction))
      {
        writer.WriteString("usageInstruction", (string)UsageInstruction!);
      }

      if (_UsageInstruction != null)
      {
        writer.WritePropertyName("_usageInstruction");
        _UsageInstruction.SerializeJson(writer, options);
      }

      if ((RelatedArtifact != null) && (RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();

        foreach (RelatedArtifact valRelatedArtifact in RelatedArtifact)
        {
          valRelatedArtifact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Indication != null) && (Indication.Count != 0))
      {
        writer.WritePropertyName("indication");
        writer.WriteStartArray();

        foreach (CodeableReference valIndication in Indication)
        {
          valIndication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contraindication != null) && (Contraindication.Count != 0))
      {
        writer.WritePropertyName("contraindication");
        writer.WriteStartArray();

        foreach (CodeableReference valContraindication in Contraindication)
        {
          valContraindication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Warning != null) && (Warning.Count != 0))
      {
        writer.WritePropertyName("warning");
        writer.WriteStartArray();

        foreach (CodeableReference valWarning in Warning)
        {
          valWarning.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(IntendedUse))
      {
        writer.WriteString("intendedUse", (string)IntendedUse!);
      }

      if (_IntendedUse != null)
      {
        writer.WritePropertyName("_intendedUse");
        _IntendedUse.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contraindication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contraindication = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objContraindication = new fhirCsR5.Models.CodeableReference();
            objContraindication.DeserializeJson(ref reader, options);
            Contraindication.Add(objContraindication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contraindication.Count == 0)
          {
            Contraindication = null;
          }

          break;

        case "indication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Indication = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objIndication = new fhirCsR5.Models.CodeableReference();
            objIndication.DeserializeJson(ref reader, options);
            Indication.Add(objIndication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Indication.Count == 0)
          {
            Indication = null;
          }

          break;

        case "intendedUse":
          IntendedUse = reader.GetString();
          break;

        case "_intendedUse":
          _IntendedUse = new fhirCsR5.Models.Element();
          _IntendedUse.DeserializeJson(ref reader, options);
          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objRelatedArtifact = new fhirCsR5.Models.RelatedArtifact();
            objRelatedArtifact.DeserializeJson(ref reader, options);
            RelatedArtifact.Add(objRelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedArtifact.Count == 0)
          {
            RelatedArtifact = null;
          }

          break;

        case "usageInstruction":
          UsageInstruction = reader.GetString();
          break;

        case "_usageInstruction":
          _UsageInstruction = new fhirCsR5.Models.Element();
          _UsageInstruction.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "warning":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Warning = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objWarning = new fhirCsR5.Models.CodeableReference();
            objWarning.DeserializeJson(ref reader, options);
            Warning.Add(objWarning);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Warning.Count == 0)
          {
            Warning = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Tracking of latest field safety corrective action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionCorrectiveAction>))]
  public class DeviceDefinitionCorrectiveAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Start and end dates of the  corrective action.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// When a field safety action has been initiated but not yet resulted in a recall, this element will be set to 'false'.
    /// </summary>
    public bool Recall { get; set; }
    /// <summary>
    /// Extension container element for Recall
    /// </summary>
    public Element _Recall { get; set; }
    /// <summary>
    /// The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.
    /// </summary>
    public string Scope { get; set; }
    /// <summary>
    /// Extension container element for Scope
    /// </summary>
    public Element _Scope { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteBoolean("recall", Recall);

      if (_Recall != null)
      {
        writer.WritePropertyName("_recall");
        _Recall.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Scope))
      {
        writer.WriteString("scope", (string)Scope!);
      }

      if (_Scope != null)
      {
        writer.WritePropertyName("_scope");
        _Scope.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "period":
          Period = new fhirCsR5.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "recall":
          Recall = reader.GetBoolean();
          break;

        case "_recall":
          _Recall = new fhirCsR5.Models.Element();
          _Recall.DeserializeJson(ref reader, options);
          break;

        case "scope":
          Scope = reader.GetString();
          break;

        case "_scope":
          _Scope = new fhirCsR5.Models.Element();
          _Scope.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the DeviceDefinition.correctiveAction.scope field
  /// </summary>
  public static class DeviceDefinitionCorrectiveActionScopeCodes {
    public const string MODEL = "model";
    public const string LOT_NUMBERS = "lot-numbers";
    public const string SERIAL_NUMBERS = "serial-numbers";
    public static HashSet<string> Values = new HashSet<string>() {
      "model",
      "lot-numbers",
      "serial-numbers",
    };
  }
  /// <summary>
  /// Billing code or reference associated with the device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinitionChargeItem>))]
  public class DeviceDefinitionChargeItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The code or reference for the charge item.
    /// </summary>
    public CodeableReference ChargeItemCode { get; set; }
    /// <summary>
    /// Coefficient applicable to the billing code.
    /// </summary>
    public Quantity Count { get; set; }
    /// <summary>
    /// A specific time period in which this charge item applies.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// The context to which this charge item applies.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ChargeItemCode != null)
      {
        writer.WritePropertyName("chargeItemCode");
        ChargeItemCode.SerializeJson(writer, options);
      }

      if (Count != null)
      {
        writer.WritePropertyName("count");
        Count.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chargeItemCode":
          ChargeItemCode = new fhirCsR5.Models.CodeableReference();
          ChargeItemCode.DeserializeJson(ref reader, options);
          break;

        case "count":
          Count = new fhirCsR5.Models.Quantity();
          Count.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR5.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The characteristics, operational status and capabilities of a medical-related component of a medical device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDefinition>))]
  public class DeviceDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "DeviceDefinition";
    /// <summary>
    /// Billing code or reference associated with the device.
    /// </summary>
    public List<DeviceDefinitionChargeItem> ChargeItem { get; set; }
    /// <summary>
    /// In this element various classifications can be used, such as GMDN, EMDN, SNOMED CT, risk classes, national product codes.
    /// </summary>
    public List<DeviceDefinitionClassification> Classification { get; set; }
    /// <summary>
    /// used for troubleshooting etc.
    /// </summary>
    public List<ContactPoint> Contact { get; set; }
    /// <summary>
    /// Tracking of latest field safety corrective action.
    /// </summary>
    public DeviceDefinitionCorrectiveAction CorrectiveAction { get; set; }
    /// <summary>
    /// Additional information to describe the device.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The name or names of the device as given by the manufacturer.
    /// </summary>
    public List<DeviceDefinitionDeviceName> DeviceName { get; set; }
    /// <summary>
    /// Information aimed at providing directions for the usage of this model of device.
    /// </summary>
    public DeviceDefinitionGuideline Guideline { get; set; }
    /// <summary>
    /// A device that is part (for example a component) of the present device.
    /// </summary>
    public List<DeviceDefinitionHasPart> HasPart { get; set; }
    /// <summary>
    /// Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Language code for the human-readable text strings produced by the device (all supported).
    /// </summary>
    public List<CodeableConcept> LanguageCode { get; set; }
    /// <summary>
    /// An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.
    /// </summary>
    public List<DeviceDefinitionLink> Link { get; set; }
    /// <summary>
    /// A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
    /// </summary>
    public string ManufacturerString { get; set; }
    /// <summary>
    /// Extension container element for ManufacturerString
    /// </summary>
    public Element _ManufacturerString { get; set; }
    /// <summary>
    /// A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
    /// </summary>
    public Reference ManufacturerReference { get; set; }
    /// <summary>
    /// A substance used to create the material(s) of which the device is made.
    /// </summary>
    public List<DeviceDefinitionMaterial> Material { get; set; }
    /// <summary>
    /// The model number for the device for example as defined by the manufacturer or labeler, or other agency.
    /// </summary>
    public string ModelNumber { get; set; }
    /// <summary>
    /// Extension container element for ModelNumber
    /// </summary>
    public Element _ModelNumber { get; set; }
    /// <summary>
    /// Descriptive information, usage information or implantation information that is not captured in an existing element.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// An organization that is responsible for the provision and ongoing maintenance of the device.
    /// </summary>
    public Reference Owner { get; set; }
    /// <summary>
    /// Information about the packaging of the device, i.e. how the device is packaged.
    /// </summary>
    public List<DeviceDefinitionPackaging> Packaging { get; set; }
    /// <summary>
    /// The parent device it can be part of.
    /// </summary>
    public Reference ParentDevice { get; set; }
    /// <summary>
    /// Alphanumeric Maximum 20.
    /// </summary>
    public string PartNumber { get; set; }
    /// <summary>
    /// Extension container element for PartNumber
    /// </summary>
    public Element _PartNumber { get; set; }
    /// <summary>
    /// Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.
    /// </summary>
    public List<string> ProductionIdentifierInUDI { get; set; }
    /// <summary>
    /// Extension container element for ProductionIdentifierInUDI
    /// </summary>
    public List<Element> _ProductionIdentifierInUDI { get; set; }
    /// <summary>
    /// The potential, valid configuration settings of a device, e.g., regulation status, time properties.
    /// </summary>
    public List<DeviceDefinitionProperty> Property { get; set; }
    /// <summary>
    /// Safety characteristics of the device.
    /// </summary>
    public List<CodeableConcept> Safety { get; set; }
    /// <summary>
    /// Shelf Life and storage information.
    /// </summary>
    public List<ProductShelfLife> ShelfLifeStorage { get; set; }
    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
    /// </summary>
    public List<RelatedArtifact> Specialization { get; set; }
    /// <summary>
    /// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
    /// </summary>
    public List<DeviceDefinitionUdiDeviceIdentifier> UdiDeviceIdentifier { get; set; }
    /// <summary>
    /// The version of the device or software.
    /// </summary>
    public List<DeviceDefinitionVersion> Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UdiDeviceIdentifier != null) && (UdiDeviceIdentifier.Count != 0))
      {
        writer.WritePropertyName("udiDeviceIdentifier");
        writer.WriteStartArray();

        foreach (DeviceDefinitionUdiDeviceIdentifier valUdiDeviceIdentifier in UdiDeviceIdentifier)
        {
          valUdiDeviceIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(PartNumber))
      {
        writer.WriteString("partNumber", (string)PartNumber!);
      }

      if (_PartNumber != null)
      {
        writer.WritePropertyName("_partNumber");
        _PartNumber.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ManufacturerString))
      {
        writer.WriteString("manufacturerString", (string)ManufacturerString!);
      }

      if (_ManufacturerString != null)
      {
        writer.WritePropertyName("_manufacturerString");
        _ManufacturerString.SerializeJson(writer, options);
      }

      if (ManufacturerReference != null)
      {
        writer.WritePropertyName("manufacturerReference");
        ManufacturerReference.SerializeJson(writer, options);
      }

      if ((DeviceName != null) && (DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();

        foreach (DeviceDefinitionDeviceName valDeviceName in DeviceName)
        {
          valDeviceName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ModelNumber))
      {
        writer.WriteString("modelNumber", (string)ModelNumber!);
      }

      if (_ModelNumber != null)
      {
        writer.WritePropertyName("_modelNumber");
        _ModelNumber.SerializeJson(writer, options);
      }

      if ((Classification != null) && (Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();

        foreach (DeviceDefinitionClassification valClassification in Classification)
        {
          valClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Specialization != null) && (Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();

        foreach (RelatedArtifact valSpecialization in Specialization)
        {
          valSpecialization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((HasPart != null) && (HasPart.Count != 0))
      {
        writer.WritePropertyName("hasPart");
        writer.WriteStartArray();

        foreach (DeviceDefinitionHasPart valHasPart in HasPart)
        {
          valHasPart.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Packaging != null) && (Packaging.Count != 0))
      {
        writer.WritePropertyName("packaging");
        writer.WriteStartArray();

        foreach (DeviceDefinitionPackaging valPackaging in Packaging)
        {
          valPackaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Version != null) && (Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();

        foreach (DeviceDefinitionVersion valVersion in Version)
        {
          valVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Safety != null) && (Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();

        foreach (CodeableConcept valSafety in Safety)
        {
          valSafety.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ShelfLifeStorage != null) && (ShelfLifeStorage.Count != 0))
      {
        writer.WritePropertyName("shelfLifeStorage");
        writer.WriteStartArray();

        foreach (ProductShelfLife valShelfLifeStorage in ShelfLifeStorage)
        {
          valShelfLifeStorage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((LanguageCode != null) && (LanguageCode.Count != 0))
      {
        writer.WritePropertyName("languageCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valLanguageCode in LanguageCode)
        {
          valLanguageCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (DeviceDefinitionProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Owner != null)
      {
        writer.WritePropertyName("owner");
        Owner.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactPoint valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Link != null) && (Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();

        foreach (DeviceDefinitionLink valLink in Link)
        {
          valLink.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ParentDevice != null)
      {
        writer.WritePropertyName("parentDevice");
        ParentDevice.SerializeJson(writer, options);
      }

      if ((Material != null) && (Material.Count != 0))
      {
        writer.WritePropertyName("material");
        writer.WriteStartArray();

        foreach (DeviceDefinitionMaterial valMaterial in Material)
        {
          valMaterial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProductionIdentifierInUDI != null) && (ProductionIdentifierInUDI.Count != 0))
      {
        writer.WritePropertyName("productionIdentifierInUDI");
        writer.WriteStartArray();

        foreach (string valProductionIdentifierInUDI in ProductionIdentifierInUDI)
        {
          writer.WriteStringValue(valProductionIdentifierInUDI);
        }

        writer.WriteEndArray();
      }

      if ((_ProductionIdentifierInUDI != null) && (_ProductionIdentifierInUDI.Count != 0))
      {
        writer.WritePropertyName("_productionIdentifierInUDI");
        writer.WriteStartArray();

        foreach (Element val_ProductionIdentifierInUDI in _ProductionIdentifierInUDI)
        {
          val_ProductionIdentifierInUDI.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Guideline != null)
      {
        writer.WritePropertyName("guideline");
        Guideline.SerializeJson(writer, options);
      }

      if (CorrectiveAction != null)
      {
        writer.WritePropertyName("correctiveAction");
        CorrectiveAction.SerializeJson(writer, options);
      }

      if ((ChargeItem != null) && (ChargeItem.Count != 0))
      {
        writer.WritePropertyName("chargeItem");
        writer.WriteStartArray();

        foreach (DeviceDefinitionChargeItem valChargeItem in ChargeItem)
        {
          valChargeItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chargeItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ChargeItem = new List<DeviceDefinitionChargeItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionChargeItem objChargeItem = new fhirCsR5.Models.DeviceDefinitionChargeItem();
            objChargeItem.DeserializeJson(ref reader, options);
            ChargeItem.Add(objChargeItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ChargeItem.Count == 0)
          {
            ChargeItem = null;
          }

          break;

        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<DeviceDefinitionClassification>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionClassification objClassification = new fhirCsR5.Models.DeviceDefinitionClassification();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactPoint objContact = new fhirCsR5.Models.ContactPoint();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "correctiveAction":
          CorrectiveAction = new fhirCsR5.Models.DeviceDefinitionCorrectiveAction();
          CorrectiveAction.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DeviceName = new List<DeviceDefinitionDeviceName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionDeviceName objDeviceName = new fhirCsR5.Models.DeviceDefinitionDeviceName();
            objDeviceName.DeserializeJson(ref reader, options);
            DeviceName.Add(objDeviceName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DeviceName.Count == 0)
          {
            DeviceName = null;
          }

          break;

        case "guideline":
          Guideline = new fhirCsR5.Models.DeviceDefinitionGuideline();
          Guideline.DeserializeJson(ref reader, options);
          break;

        case "hasPart":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          HasPart = new List<DeviceDefinitionHasPart>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionHasPart objHasPart = new fhirCsR5.Models.DeviceDefinitionHasPart();
            objHasPart.DeserializeJson(ref reader, options);
            HasPart.Add(objHasPart);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (HasPart.Count == 0)
          {
            HasPart = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "languageCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LanguageCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objLanguageCode = new fhirCsR5.Models.CodeableConcept();
            objLanguageCode.DeserializeJson(ref reader, options);
            LanguageCode.Add(objLanguageCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LanguageCode.Count == 0)
          {
            LanguageCode = null;
          }

          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Link = new List<DeviceDefinitionLink>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionLink objLink = new fhirCsR5.Models.DeviceDefinitionLink();
            objLink.DeserializeJson(ref reader, options);
            Link.Add(objLink);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Link.Count == 0)
          {
            Link = null;
          }

          break;

        case "manufacturerString":
          ManufacturerString = reader.GetString();
          break;

        case "_manufacturerString":
          _ManufacturerString = new fhirCsR5.Models.Element();
          _ManufacturerString.DeserializeJson(ref reader, options);
          break;

        case "manufacturerReference":
          ManufacturerReference = new fhirCsR5.Models.Reference();
          ManufacturerReference.DeserializeJson(ref reader, options);
          break;

        case "material":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Material = new List<DeviceDefinitionMaterial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionMaterial objMaterial = new fhirCsR5.Models.DeviceDefinitionMaterial();
            objMaterial.DeserializeJson(ref reader, options);
            Material.Add(objMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Material.Count == 0)
          {
            Material = null;
          }

          break;

        case "modelNumber":
          ModelNumber = reader.GetString();
          break;

        case "_modelNumber":
          _ModelNumber = new fhirCsR5.Models.Element();
          _ModelNumber.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "owner":
          Owner = new fhirCsR5.Models.Reference();
          Owner.DeserializeJson(ref reader, options);
          break;

        case "packaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Packaging = new List<DeviceDefinitionPackaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionPackaging objPackaging = new fhirCsR5.Models.DeviceDefinitionPackaging();
            objPackaging.DeserializeJson(ref reader, options);
            Packaging.Add(objPackaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Packaging.Count == 0)
          {
            Packaging = null;
          }

          break;

        case "parentDevice":
          ParentDevice = new fhirCsR5.Models.Reference();
          ParentDevice.DeserializeJson(ref reader, options);
          break;

        case "partNumber":
          PartNumber = reader.GetString();
          break;

        case "_partNumber":
          _PartNumber = new fhirCsR5.Models.Element();
          _PartNumber.DeserializeJson(ref reader, options);
          break;

        case "productionIdentifierInUDI":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProductionIdentifierInUDI = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ProductionIdentifierInUDI.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProductionIdentifierInUDI.Count == 0)
          {
            ProductionIdentifierInUDI = null;
          }

          break;

        case "_productionIdentifierInUDI":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ProductionIdentifierInUDI = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_ProductionIdentifierInUDI = new fhirCsR5.Models.Element();
            obj_ProductionIdentifierInUDI.DeserializeJson(ref reader, options);
            _ProductionIdentifierInUDI.Add(obj_ProductionIdentifierInUDI);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ProductionIdentifierInUDI.Count == 0)
          {
            _ProductionIdentifierInUDI = null;
          }

          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<DeviceDefinitionProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionProperty objProperty = new fhirCsR5.Models.DeviceDefinitionProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objSafety = new fhirCsR5.Models.CodeableConcept();
            objSafety.DeserializeJson(ref reader, options);
            Safety.Add(objSafety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Safety.Count == 0)
          {
            Safety = null;
          }

          break;

        case "shelfLifeStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ShelfLifeStorage = new List<ProductShelfLife>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ProductShelfLife objShelfLifeStorage = new fhirCsR5.Models.ProductShelfLife();
            objShelfLifeStorage.DeserializeJson(ref reader, options);
            ShelfLifeStorage.Add(objShelfLifeStorage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ShelfLifeStorage.Count == 0)
          {
            ShelfLifeStorage = null;
          }

          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialization = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objSpecialization = new fhirCsR5.Models.RelatedArtifact();
            objSpecialization.DeserializeJson(ref reader, options);
            Specialization.Add(objSpecialization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialization.Count == 0)
          {
            Specialization = null;
          }

          break;

        case "udiDeviceIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UdiDeviceIdentifier = new List<DeviceDefinitionUdiDeviceIdentifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionUdiDeviceIdentifier objUdiDeviceIdentifier = new fhirCsR5.Models.DeviceDefinitionUdiDeviceIdentifier();
            objUdiDeviceIdentifier.DeserializeJson(ref reader, options);
            UdiDeviceIdentifier.Add(objUdiDeviceIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UdiDeviceIdentifier.Count == 0)
          {
            UdiDeviceIdentifier = null;
          }

          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Version = new List<DeviceDefinitionVersion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDefinitionVersion objVersion = new fhirCsR5.Models.DeviceDefinitionVersion();
            objVersion.DeserializeJson(ref reader, options);
            Version.Add(objVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Version.Count == 0)
          {
            Version = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the DeviceDefinition.productionIdentifierInUDI field
  /// </summary>
  public static class DeviceDefinitionProductionIdentifierInUDICodes {
    public const string LOT_NUMBER = "lot-number";
    public const string MANUFACTURED_DATE = "manufactured-date";
    public const string SERIAL_NUMBER = "serial-number";
    public const string EXPIRATION_DATE = "expiration-date";
    public const string BIOLOGICAL_SOURCE = "biological-source";
    public const string SOFTWARE_VERSION = "software-version";
    public static HashSet<string> Values = new HashSet<string>() {
      "lot-number",
      "manufactured-date",
      "serial-number",
      "expiration-date",
      "biological-source",
      "software-version",
    };
  }
}
