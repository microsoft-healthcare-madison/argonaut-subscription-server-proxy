// <auto-generated />
// Built from: hl7.fhir.r5.core version: 3.0.1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceSourceMaterialFractionDescription>))]
  public class SubstanceSourceMaterialFractionDescription : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
    /// </summary>
    public string Fraction { get; set; }
    /// <summary>
    /// Extension container element for Fraction
    /// </summary>
    public Element _Fraction { get; set; }
    /// <summary>
    /// The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
    /// </summary>
    public CodeableConcept MaterialType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Fraction))
      {
        writer.WriteString("fraction", (string)Fraction!);
      }

      if (_Fraction != null)
      {
        writer.WritePropertyName("_fraction");
        _Fraction.SerializeJson(writer, options);
      }

      if (MaterialType != null)
      {
        writer.WritePropertyName("materialType");
        MaterialType.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "fraction":
          Fraction = reader.GetString();
          break;

        case "_fraction":
          _Fraction = new fhirCsR5.Models.Element();
          _Fraction.DeserializeJson(ref reader, options);
          break;

        case "materialType":
          MaterialType = new fhirCsR5.Models.CodeableConcept();
          MaterialType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// 4.9.13.6.1 Author type (Conditional).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceSourceMaterialOrganismAuthor>))]
  public class SubstanceSourceMaterialOrganismAuthor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
    /// </summary>
    public string AuthorDescription { get; set; }
    /// <summary>
    /// Extension container element for AuthorDescription
    /// </summary>
    public Element _AuthorDescription { get; set; }
    /// <summary>
    /// The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
    /// </summary>
    public CodeableConcept AuthorType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (AuthorType != null)
      {
        writer.WritePropertyName("authorType");
        AuthorType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AuthorDescription))
      {
        writer.WriteString("authorDescription", (string)AuthorDescription!);
      }

      if (_AuthorDescription != null)
      {
        writer.WritePropertyName("_authorDescription");
        _AuthorDescription.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authorDescription":
          AuthorDescription = reader.GetString();
          break;

        case "_authorDescription":
          _AuthorDescription = new fhirCsR5.Models.Element();
          _AuthorDescription.DeserializeJson(ref reader, options);
          break;

        case "authorType":
          AuthorType = new fhirCsR5.Models.CodeableConcept();
          AuthorType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceSourceMaterialOrganismHybrid>))]
  public class SubstanceSourceMaterialOrganismHybrid : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The hybrid type of an organism shall be specified.
    /// </summary>
    public CodeableConcept HybridType { get; set; }
    /// <summary>
    /// The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
    /// </summary>
    public string MaternalOrganismId { get; set; }
    /// <summary>
    /// Extension container element for MaternalOrganismId
    /// </summary>
    public Element _MaternalOrganismId { get; set; }
    /// <summary>
    /// The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
    /// </summary>
    public string MaternalOrganismName { get; set; }
    /// <summary>
    /// Extension container element for MaternalOrganismName
    /// </summary>
    public Element _MaternalOrganismName { get; set; }
    /// <summary>
    /// The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
    /// </summary>
    public string PaternalOrganismId { get; set; }
    /// <summary>
    /// Extension container element for PaternalOrganismId
    /// </summary>
    public Element _PaternalOrganismId { get; set; }
    /// <summary>
    /// The name of the paternal species constituting the hybrid organism shall be specified.
    /// </summary>
    public string PaternalOrganismName { get; set; }
    /// <summary>
    /// Extension container element for PaternalOrganismName
    /// </summary>
    public Element _PaternalOrganismName { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(MaternalOrganismId))
      {
        writer.WriteString("maternalOrganismId", (string)MaternalOrganismId!);
      }

      if (_MaternalOrganismId != null)
      {
        writer.WritePropertyName("_maternalOrganismId");
        _MaternalOrganismId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MaternalOrganismName))
      {
        writer.WriteString("maternalOrganismName", (string)MaternalOrganismName!);
      }

      if (_MaternalOrganismName != null)
      {
        writer.WritePropertyName("_maternalOrganismName");
        _MaternalOrganismName.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PaternalOrganismId))
      {
        writer.WriteString("paternalOrganismId", (string)PaternalOrganismId!);
      }

      if (_PaternalOrganismId != null)
      {
        writer.WritePropertyName("_paternalOrganismId");
        _PaternalOrganismId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PaternalOrganismName))
      {
        writer.WriteString("paternalOrganismName", (string)PaternalOrganismName!);
      }

      if (_PaternalOrganismName != null)
      {
        writer.WritePropertyName("_paternalOrganismName");
        _PaternalOrganismName.SerializeJson(writer, options);
      }

      if (HybridType != null)
      {
        writer.WritePropertyName("hybridType");
        HybridType.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "hybridType":
          HybridType = new fhirCsR5.Models.CodeableConcept();
          HybridType.DeserializeJson(ref reader, options);
          break;

        case "maternalOrganismId":
          MaternalOrganismId = reader.GetString();
          break;

        case "_maternalOrganismId":
          _MaternalOrganismId = new fhirCsR5.Models.Element();
          _MaternalOrganismId.DeserializeJson(ref reader, options);
          break;

        case "maternalOrganismName":
          MaternalOrganismName = reader.GetString();
          break;

        case "_maternalOrganismName":
          _MaternalOrganismName = new fhirCsR5.Models.Element();
          _MaternalOrganismName.DeserializeJson(ref reader, options);
          break;

        case "paternalOrganismId":
          PaternalOrganismId = reader.GetString();
          break;

        case "_paternalOrganismId":
          _PaternalOrganismId = new fhirCsR5.Models.Element();
          _PaternalOrganismId.DeserializeJson(ref reader, options);
          break;

        case "paternalOrganismName":
          PaternalOrganismName = reader.GetString();
          break;

        case "_paternalOrganismName":
          _PaternalOrganismName = new fhirCsR5.Models.Element();
          _PaternalOrganismName.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// 4.9.13.7.1 Kingdom (Conditional).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceSourceMaterialOrganismOrganismGeneral>))]
  public class SubstanceSourceMaterialOrganismOrganismGeneral : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The class of an organism shall be specified.
    /// </summary>
    public CodeableConcept Class { get; set; }
    /// <summary>
    /// The kingdom of an organism shall be specified.
    /// </summary>
    public CodeableConcept Kingdom { get; set; }
    /// <summary>
    /// The order of an organism shall be specified,.
    /// </summary>
    public CodeableConcept Order { get; set; }
    /// <summary>
    /// The phylum of an organism shall be specified.
    /// </summary>
    public CodeableConcept Phylum { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Kingdom != null)
      {
        writer.WritePropertyName("kingdom");
        Kingdom.SerializeJson(writer, options);
      }

      if (Phylum != null)
      {
        writer.WritePropertyName("phylum");
        Phylum.SerializeJson(writer, options);
      }

      if (Class != null)
      {
        writer.WritePropertyName("class");
        Class.SerializeJson(writer, options);
      }

      if (Order != null)
      {
        writer.WritePropertyName("order");
        Order.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "class":
          Class = new fhirCsR5.Models.CodeableConcept();
          Class.DeserializeJson(ref reader, options);
          break;

        case "kingdom":
          Kingdom = new fhirCsR5.Models.CodeableConcept();
          Kingdom.DeserializeJson(ref reader, options);
          break;

        case "order":
          Order = new fhirCsR5.Models.CodeableConcept();
          Order.DeserializeJson(ref reader, options);
          break;

        case "phylum":
          Phylum = new fhirCsR5.Models.CodeableConcept();
          Phylum.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceSourceMaterialOrganism>))]
  public class SubstanceSourceMaterialOrganism : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// 4.9.13.6.1 Author type (Conditional).
    /// </summary>
    public List<SubstanceSourceMaterialOrganismAuthor> Author { get; set; }
    /// <summary>
    /// The family of an organism shall be specified.
    /// </summary>
    public CodeableConcept Family { get; set; }
    /// <summary>
    /// The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
    /// </summary>
    public CodeableConcept Genus { get; set; }
    /// <summary>
    /// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
    /// </summary>
    public SubstanceSourceMaterialOrganismHybrid Hybrid { get; set; }
    /// <summary>
    /// The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
    /// </summary>
    public string IntraspecificDescription { get; set; }
    /// <summary>
    /// Extension container element for IntraspecificDescription
    /// </summary>
    public Element _IntraspecificDescription { get; set; }
    /// <summary>
    /// The Intraspecific type of an organism shall be specified.
    /// </summary>
    public CodeableConcept IntraspecificType { get; set; }
    /// <summary>
    /// 4.9.13.7.1 Kingdom (Conditional).
    /// </summary>
    public SubstanceSourceMaterialOrganismOrganismGeneral OrganismGeneral { get; set; }
    /// <summary>
    /// The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
    /// </summary>
    public CodeableConcept Species { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Family != null)
      {
        writer.WritePropertyName("family");
        Family.SerializeJson(writer, options);
      }

      if (Genus != null)
      {
        writer.WritePropertyName("genus");
        Genus.SerializeJson(writer, options);
      }

      if (Species != null)
      {
        writer.WritePropertyName("species");
        Species.SerializeJson(writer, options);
      }

      if (IntraspecificType != null)
      {
        writer.WritePropertyName("intraspecificType");
        IntraspecificType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(IntraspecificDescription))
      {
        writer.WriteString("intraspecificDescription", (string)IntraspecificDescription!);
      }

      if (_IntraspecificDescription != null)
      {
        writer.WritePropertyName("_intraspecificDescription");
        _IntraspecificDescription.SerializeJson(writer, options);
      }

      if ((Author != null) && (Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();

        foreach (SubstanceSourceMaterialOrganismAuthor valAuthor in Author)
        {
          valAuthor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Hybrid != null)
      {
        writer.WritePropertyName("hybrid");
        Hybrid.SerializeJson(writer, options);
      }

      if (OrganismGeneral != null)
      {
        writer.WritePropertyName("organismGeneral");
        OrganismGeneral.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Author = new List<SubstanceSourceMaterialOrganismAuthor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubstanceSourceMaterialOrganismAuthor objAuthor = new fhirCsR5.Models.SubstanceSourceMaterialOrganismAuthor();
            objAuthor.DeserializeJson(ref reader, options);
            Author.Add(objAuthor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Author.Count == 0)
          {
            Author = null;
          }

          break;

        case "family":
          Family = new fhirCsR5.Models.CodeableConcept();
          Family.DeserializeJson(ref reader, options);
          break;

        case "genus":
          Genus = new fhirCsR5.Models.CodeableConcept();
          Genus.DeserializeJson(ref reader, options);
          break;

        case "hybrid":
          Hybrid = new fhirCsR5.Models.SubstanceSourceMaterialOrganismHybrid();
          Hybrid.DeserializeJson(ref reader, options);
          break;

        case "intraspecificDescription":
          IntraspecificDescription = reader.GetString();
          break;

        case "_intraspecificDescription":
          _IntraspecificDescription = new fhirCsR5.Models.Element();
          _IntraspecificDescription.DeserializeJson(ref reader, options);
          break;

        case "intraspecificType":
          IntraspecificType = new fhirCsR5.Models.CodeableConcept();
          IntraspecificType.DeserializeJson(ref reader, options);
          break;

        case "organismGeneral":
          OrganismGeneral = new fhirCsR5.Models.SubstanceSourceMaterialOrganismOrganismGeneral();
          OrganismGeneral.DeserializeJson(ref reader, options);
          break;

        case "species":
          Species = new fhirCsR5.Models.CodeableConcept();
          Species.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// To do.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceSourceMaterialPartDescription>))]
  public class SubstanceSourceMaterialPartDescription : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Entity of anatomical origin of source material within an organism.
    /// </summary>
    public CodeableConcept Part { get; set; }
    /// <summary>
    /// The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
    /// </summary>
    public CodeableConcept PartLocation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Part != null)
      {
        writer.WritePropertyName("part");
        Part.SerializeJson(writer, options);
      }

      if (PartLocation != null)
      {
        writer.WritePropertyName("partLocation");
        PartLocation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "part":
          Part = new fhirCsR5.Models.CodeableConcept();
          Part.DeserializeJson(ref reader, options);
          break;

        case "partLocation":
          PartLocation = new fhirCsR5.Models.CodeableConcept();
          PartLocation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceSourceMaterial>))]
  public class SubstanceSourceMaterial : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "SubstanceSourceMaterial";
    /// <summary>
    /// The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
    /// </summary>
    public List<CodeableConcept> CountryOfOrigin { get; set; }
    /// <summary>
    /// Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
    /// </summary>
    public CodeableConcept DevelopmentStage { get; set; }
    /// <summary>
    /// Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
    /// </summary>
    public List<SubstanceSourceMaterialFractionDescription> FractionDescription { get; set; }
    /// <summary>
    /// The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
    /// </summary>
    public List<string> GeographicalLocation { get; set; }
    /// <summary>
    /// Extension container element for GeographicalLocation
    /// </summary>
    public List<Element> _GeographicalLocation { get; set; }
    /// <summary>
    /// This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
    /// </summary>
    public SubstanceSourceMaterialOrganism Organism { get; set; }
    /// <summary>
    /// The unique identifier associated with the source material parent organism shall be specified.
    /// </summary>
    public Identifier OrganismId { get; set; }
    /// <summary>
    /// The organism accepted Scientific name shall be provided based on the organism taxonomy.
    /// </summary>
    public string OrganismName { get; set; }
    /// <summary>
    /// Extension container element for OrganismName
    /// </summary>
    public Element _OrganismName { get; set; }
    /// <summary>
    /// The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
    /// </summary>
    public List<Identifier> ParentSubstanceId { get; set; }
    /// <summary>
    /// The parent substance of the Herbal Drug, or Herbal preparation.
    /// </summary>
    public List<string> ParentSubstanceName { get; set; }
    /// <summary>
    /// Extension container element for ParentSubstanceName
    /// </summary>
    public List<Element> _ParentSubstanceName { get; set; }
    /// <summary>
    /// To do.
    /// </summary>
    public List<SubstanceSourceMaterialPartDescription> PartDescription { get; set; }
    /// <summary>
    /// General high level classification of the source material specific to the origin of the material.
    /// </summary>
    public CodeableConcept SourceMaterialClass { get; set; }
    /// <summary>
    /// The state of the source material when extracted.
    /// </summary>
    public CodeableConcept SourceMaterialState { get; set; }
    /// <summary>
    /// The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
    /// </summary>
    public CodeableConcept SourceMaterialType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (SourceMaterialClass != null)
      {
        writer.WritePropertyName("sourceMaterialClass");
        SourceMaterialClass.SerializeJson(writer, options);
      }

      if (SourceMaterialType != null)
      {
        writer.WritePropertyName("sourceMaterialType");
        SourceMaterialType.SerializeJson(writer, options);
      }

      if (SourceMaterialState != null)
      {
        writer.WritePropertyName("sourceMaterialState");
        SourceMaterialState.SerializeJson(writer, options);
      }

      if (OrganismId != null)
      {
        writer.WritePropertyName("organismId");
        OrganismId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OrganismName))
      {
        writer.WriteString("organismName", (string)OrganismName!);
      }

      if (_OrganismName != null)
      {
        writer.WritePropertyName("_organismName");
        _OrganismName.SerializeJson(writer, options);
      }

      if ((ParentSubstanceId != null) && (ParentSubstanceId.Count != 0))
      {
        writer.WritePropertyName("parentSubstanceId");
        writer.WriteStartArray();

        foreach (Identifier valParentSubstanceId in ParentSubstanceId)
        {
          valParentSubstanceId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ParentSubstanceName != null) && (ParentSubstanceName.Count != 0))
      {
        writer.WritePropertyName("parentSubstanceName");
        writer.WriteStartArray();

        foreach (string valParentSubstanceName in ParentSubstanceName)
        {
          writer.WriteStringValue(valParentSubstanceName);
        }

        writer.WriteEndArray();
      }

      if ((_ParentSubstanceName != null) && (_ParentSubstanceName.Count != 0))
      {
        writer.WritePropertyName("_parentSubstanceName");
        writer.WriteStartArray();

        foreach (Element val_ParentSubstanceName in _ParentSubstanceName)
        {
          val_ParentSubstanceName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CountryOfOrigin != null) && (CountryOfOrigin.Count != 0))
      {
        writer.WritePropertyName("countryOfOrigin");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountryOfOrigin in CountryOfOrigin)
        {
          valCountryOfOrigin.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((GeographicalLocation != null) && (GeographicalLocation.Count != 0))
      {
        writer.WritePropertyName("geographicalLocation");
        writer.WriteStartArray();

        foreach (string valGeographicalLocation in GeographicalLocation)
        {
          writer.WriteStringValue(valGeographicalLocation);
        }

        writer.WriteEndArray();
      }

      if ((_GeographicalLocation != null) && (_GeographicalLocation.Count != 0))
      {
        writer.WritePropertyName("_geographicalLocation");
        writer.WriteStartArray();

        foreach (Element val_GeographicalLocation in _GeographicalLocation)
        {
          val_GeographicalLocation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DevelopmentStage != null)
      {
        writer.WritePropertyName("developmentStage");
        DevelopmentStage.SerializeJson(writer, options);
      }

      if ((FractionDescription != null) && (FractionDescription.Count != 0))
      {
        writer.WritePropertyName("fractionDescription");
        writer.WriteStartArray();

        foreach (SubstanceSourceMaterialFractionDescription valFractionDescription in FractionDescription)
        {
          valFractionDescription.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Organism != null)
      {
        writer.WritePropertyName("organism");
        Organism.SerializeJson(writer, options);
      }

      if ((PartDescription != null) && (PartDescription.Count != 0))
      {
        writer.WritePropertyName("partDescription");
        writer.WriteStartArray();

        foreach (SubstanceSourceMaterialPartDescription valPartDescription in PartDescription)
        {
          valPartDescription.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "countryOfOrigin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CountryOfOrigin = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCountryOfOrigin = new fhirCsR5.Models.CodeableConcept();
            objCountryOfOrigin.DeserializeJson(ref reader, options);
            CountryOfOrigin.Add(objCountryOfOrigin);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CountryOfOrigin.Count == 0)
          {
            CountryOfOrigin = null;
          }

          break;

        case "developmentStage":
          DevelopmentStage = new fhirCsR5.Models.CodeableConcept();
          DevelopmentStage.DeserializeJson(ref reader, options);
          break;

        case "fractionDescription":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FractionDescription = new List<SubstanceSourceMaterialFractionDescription>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubstanceSourceMaterialFractionDescription objFractionDescription = new fhirCsR5.Models.SubstanceSourceMaterialFractionDescription();
            objFractionDescription.DeserializeJson(ref reader, options);
            FractionDescription.Add(objFractionDescription);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FractionDescription.Count == 0)
          {
            FractionDescription = null;
          }

          break;

        case "geographicalLocation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          GeographicalLocation = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            GeographicalLocation.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (GeographicalLocation.Count == 0)
          {
            GeographicalLocation = null;
          }

          break;

        case "_geographicalLocation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _GeographicalLocation = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_GeographicalLocation = new fhirCsR5.Models.Element();
            obj_GeographicalLocation.DeserializeJson(ref reader, options);
            _GeographicalLocation.Add(obj_GeographicalLocation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_GeographicalLocation.Count == 0)
          {
            _GeographicalLocation = null;
          }

          break;

        case "organism":
          Organism = new fhirCsR5.Models.SubstanceSourceMaterialOrganism();
          Organism.DeserializeJson(ref reader, options);
          break;

        case "organismId":
          OrganismId = new fhirCsR5.Models.Identifier();
          OrganismId.DeserializeJson(ref reader, options);
          break;

        case "organismName":
          OrganismName = reader.GetString();
          break;

        case "_organismName":
          _OrganismName = new fhirCsR5.Models.Element();
          _OrganismName.DeserializeJson(ref reader, options);
          break;

        case "parentSubstanceId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ParentSubstanceId = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objParentSubstanceId = new fhirCsR5.Models.Identifier();
            objParentSubstanceId.DeserializeJson(ref reader, options);
            ParentSubstanceId.Add(objParentSubstanceId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ParentSubstanceId.Count == 0)
          {
            ParentSubstanceId = null;
          }

          break;

        case "parentSubstanceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ParentSubstanceName = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ParentSubstanceName.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ParentSubstanceName.Count == 0)
          {
            ParentSubstanceName = null;
          }

          break;

        case "_parentSubstanceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ParentSubstanceName = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_ParentSubstanceName = new fhirCsR5.Models.Element();
            obj_ParentSubstanceName.DeserializeJson(ref reader, options);
            _ParentSubstanceName.Add(obj_ParentSubstanceName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ParentSubstanceName.Count == 0)
          {
            _ParentSubstanceName = null;
          }

          break;

        case "partDescription":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PartDescription = new List<SubstanceSourceMaterialPartDescription>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubstanceSourceMaterialPartDescription objPartDescription = new fhirCsR5.Models.SubstanceSourceMaterialPartDescription();
            objPartDescription.DeserializeJson(ref reader, options);
            PartDescription.Add(objPartDescription);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PartDescription.Count == 0)
          {
            PartDescription = null;
          }

          break;

        case "sourceMaterialClass":
          SourceMaterialClass = new fhirCsR5.Models.CodeableConcept();
          SourceMaterialClass.DeserializeJson(ref reader, options);
          break;

        case "sourceMaterialState":
          SourceMaterialState = new fhirCsR5.Models.CodeableConcept();
          SourceMaterialState.DeserializeJson(ref reader, options);
          break;

        case "sourceMaterialType":
          SourceMaterialType = new fhirCsR5.Models.CodeableConcept();
          SourceMaterialType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
