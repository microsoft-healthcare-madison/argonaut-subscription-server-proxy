// <auto-generated />
// Built from: hl7.fhir.r5.core version: 3.0.1
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceReferenceInformationGene>))]
  public class SubstanceReferenceInformationGene : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Gene { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept GeneSequenceOrigin { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (GeneSequenceOrigin != null)
      {
        writer.WritePropertyName("geneSequenceOrigin");
        GeneSequenceOrigin.SerializeJson(writer, options);
      }

      if (Gene != null)
      {
        writer.WritePropertyName("gene");
        Gene.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "gene":
          Gene = new fhirCsR5.Models.CodeableConcept();
          Gene.DeserializeJson(ref reader, options);
          break;

        case "geneSequenceOrigin":
          GeneSequenceOrigin = new fhirCsR5.Models.CodeableConcept();
          GeneSequenceOrigin.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSource = new fhirCsR5.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceReferenceInformationGeneElement>))]
  public class SubstanceReferenceInformationGeneElement : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public Identifier Element { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Element != null)
      {
        writer.WritePropertyName("element");
        Element.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "element":
          Element = new fhirCsR5.Models.Identifier();
          Element.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSource = new fhirCsR5.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceReferenceInformationTarget>))]
  public class SubstanceReferenceInformationTarget : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public Range AmountRange { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept AmountType { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Interaction { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Organism { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept OrganismType { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public Identifier Target { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Target != null)
      {
        writer.WritePropertyName("target");
        Target.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Interaction != null)
      {
        writer.WritePropertyName("interaction");
        Interaction.SerializeJson(writer, options);
      }

      if (Organism != null)
      {
        writer.WritePropertyName("organism");
        Organism.SerializeJson(writer, options);
      }

      if (OrganismType != null)
      {
        writer.WritePropertyName("organismType");
        OrganismType.SerializeJson(writer, options);
      }

      if (AmountQuantity != null)
      {
        writer.WritePropertyName("amountQuantity");
        AmountQuantity.SerializeJson(writer, options);
      }

      if (AmountRange != null)
      {
        writer.WritePropertyName("amountRange");
        AmountRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AmountString))
      {
        writer.WriteString("amountString", (string)AmountString!);
      }

      if (_AmountString != null)
      {
        writer.WritePropertyName("_amountString");
        _AmountString.SerializeJson(writer, options);
      }

      if (AmountType != null)
      {
        writer.WritePropertyName("amountType");
        AmountType.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new fhirCsR5.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountRange":
          AmountRange = new fhirCsR5.Models.Range();
          AmountRange.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new fhirCsR5.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "amountType":
          AmountType = new fhirCsR5.Models.CodeableConcept();
          AmountType.DeserializeJson(ref reader, options);
          break;

        case "interaction":
          Interaction = new fhirCsR5.Models.CodeableConcept();
          Interaction.DeserializeJson(ref reader, options);
          break;

        case "organism":
          Organism = new fhirCsR5.Models.CodeableConcept();
          Organism.DeserializeJson(ref reader, options);
          break;

        case "organismType":
          OrganismType = new fhirCsR5.Models.CodeableConcept();
          OrganismType.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSource = new fhirCsR5.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "target":
          Target = new fhirCsR5.Models.Identifier();
          Target.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<SubstanceReferenceInformation>))]
  public class SubstanceReferenceInformation : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "SubstanceReferenceInformation";
    /// <summary>
    /// Todo.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstanceReferenceInformationGene> Gene { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstanceReferenceInformationGeneElement> GeneElement { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstanceReferenceInformationTarget> Target { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if ((Gene != null) && (Gene.Count != 0))
      {
        writer.WritePropertyName("gene");
        writer.WriteStartArray();

        foreach (SubstanceReferenceInformationGene valGene in Gene)
        {
          valGene.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((GeneElement != null) && (GeneElement.Count != 0))
      {
        writer.WritePropertyName("geneElement");
        writer.WriteStartArray();

        foreach (SubstanceReferenceInformationGeneElement valGeneElement in GeneElement)
        {
          valGeneElement.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Target != null) && (Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();

        foreach (SubstanceReferenceInformationTarget valTarget in Target)
        {
          valTarget.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new fhirCsR5.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "gene":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Gene = new List<SubstanceReferenceInformationGene>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubstanceReferenceInformationGene objGene = new fhirCsR5.Models.SubstanceReferenceInformationGene();
            objGene.DeserializeJson(ref reader, options);
            Gene.Add(objGene);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Gene.Count == 0)
          {
            Gene = null;
          }

          break;

        case "geneElement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          GeneElement = new List<SubstanceReferenceInformationGeneElement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubstanceReferenceInformationGeneElement objGeneElement = new fhirCsR5.Models.SubstanceReferenceInformationGeneElement();
            objGeneElement.DeserializeJson(ref reader, options);
            GeneElement.Add(objGeneElement);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (GeneElement.Count == 0)
          {
            GeneElement = null;
          }

          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<SubstanceReferenceInformationTarget>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.SubstanceReferenceInformationTarget objTarget = new fhirCsR5.Models.SubstanceReferenceInformationTarget();
            objTarget.DeserializeJson(ref reader, options);
            Target.Add(objTarget);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
